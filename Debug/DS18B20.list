
DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08006fa8  08006fa8  00016fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007468  08007468  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007468  08007468  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007468  08007468  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200001dc  0800764c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  0800764c  00020594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c3c  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d3f  00000000  00000000  00030e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001128  00000000  00000000  00033b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  00034ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ef9  00000000  00000000  00035c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f96b  00000000  00000000  0004fb29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ec8c  00000000  00000000  0005f494  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  000ee19c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f8c 	.word	0x08006f8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006f8c 	.word	0x08006f8c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000f48:	4806      	ldr	r0, [pc, #24]	; (8000f64 <DS18B20_StartAll+0x20>)
 8000f4a:	f000 fd42 	bl	80019d2 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8000f4e:	21cc      	movs	r1, #204	; 0xcc
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <DS18B20_StartAll+0x20>)
 8000f52:	f000 fdc1 	bl	8001ad8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000f56:	2144      	movs	r1, #68	; 0x44
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <DS18B20_StartAll+0x20>)
 8000f5a:	f000 fdbd 	bl	8001ad8 <OneWire_WriteByte>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000444 	.word	0x20000444

08000f68 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000f74:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <DS18B20_Read+0x14c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d301      	bcc.n	8000f82 <DS18B20_Read+0x1a>
		return 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e094      	b.n	80010ac <DS18B20_Read+0x144>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif

	
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <DS18B20_Read+0x150>)
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f93e 	bl	8001210 <DS18B20_Is>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <DS18B20_Read+0x36>
		return 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e086      	b.n	80010ac <DS18B20_Read+0x144>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8000f9e:	4847      	ldr	r0, [pc, #284]	; (80010bc <DS18B20_Read+0x154>)
 8000fa0:	f000 fd70 	bl	8001a84 <OneWire_ReadBit>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000faa:	2300      	movs	r3, #0
 8000fac:	e07e      	b.n	80010ac <DS18B20_Read+0x144>

	OneWire_Reset(&OneWire); // Reset the bus
 8000fae:	4843      	ldr	r0, [pc, #268]	; (80010bc <DS18B20_Read+0x154>)
 8000fb0:	f000 fd0f 	bl	80019d2 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <DS18B20_Read+0x150>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	483f      	ldr	r0, [pc, #252]	; (80010bc <DS18B20_Read+0x154>)
 8000fc0:	f000 febd 	bl	8001d3e <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000fc4:	21be      	movs	r1, #190	; 0xbe
 8000fc6:	483d      	ldr	r0, [pc, #244]	; (80010bc <DS18B20_Read+0x154>)
 8000fc8:	f000 fd86 	bl	8001ad8 <OneWire_WriteByte>
	
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000fcc:	2300      	movs	r3, #0
 8000fce:	74fb      	strb	r3, [r7, #19]
 8000fd0:	e00d      	b.n	8000fee <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000fd2:	7cfc      	ldrb	r4, [r7, #19]
 8000fd4:	4839      	ldr	r0, [pc, #228]	; (80010bc <DS18B20_Read+0x154>)
 8000fd6:	f000 fd9c 	bl	8001b12 <OneWire_ReadByte>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	4423      	add	r3, r4
 8000fe4:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000fe8:	7cfb      	ldrb	r3, [r7, #19]
 8000fea:	3301      	adds	r3, #1
 8000fec:	74fb      	strb	r3, [r7, #19]
 8000fee:	7cfb      	ldrb	r3, [r7, #19]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d9ee      	bls.n	8000fd2 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000ff4:	7a3b      	ldrb	r3, [r7, #8]
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	7a7b      	ldrb	r3, [r7, #9]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8001004:	482d      	ldr	r0, [pc, #180]	; (80010bc <DS18B20_Read+0x154>)
 8001006:	f000 fce4 	bl	80019d2 <OneWire_Reset>
	
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	115b      	asrs	r3, r3, #5
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	3309      	adds	r3, #9
 8001018:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	3b09      	subs	r3, #9
 800101e:	2b03      	cmp	r3, #3
 8001020:	d83e      	bhi.n	80010a0 <DS18B20_Read+0x138>
 8001022:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <DS18B20_Read+0xc0>)
 8001024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001028:	08001039 	.word	0x08001039
 800102c:	08001053 	.word	0x08001053
 8001030:	0800106d 	.word	0x0800106d
 8001034:	08001087 	.word	0x08001087
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8001038:	8a3b      	ldrh	r3, [r7, #16]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fdde 	bl	8000bfc <__aeabi_i2f>
 8001040:	4603      	mov	r3, r0
 8001042:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fe2c 	bl	8000ca4 <__aeabi_fmul>
 800104c:	4603      	mov	r3, r0
 800104e:	617b      	str	r3, [r7, #20]
		break;
 8001050:	e028      	b.n	80010a4 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8001052:	8a3b      	ldrh	r3, [r7, #16]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fdd1 	bl	8000bfc <__aeabi_i2f>
 800105a:	4603      	mov	r3, r0
 800105c:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe1f 	bl	8000ca4 <__aeabi_fmul>
 8001066:	4603      	mov	r3, r0
 8001068:	617b      	str	r3, [r7, #20]
		 break;
 800106a:	e01b      	b.n	80010a4 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 800106c:	8a3b      	ldrh	r3, [r7, #16]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fdc4 	bl	8000bfc <__aeabi_i2f>
 8001074:	4603      	mov	r3, r0
 8001076:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe12 	bl	8000ca4 <__aeabi_fmul>
 8001080:	4603      	mov	r3, r0
 8001082:	617b      	str	r3, [r7, #20]
		break;
 8001084:	e00e      	b.n	80010a4 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8001086:	8a3b      	ldrh	r3, [r7, #16]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fdb7 	bl	8000bfc <__aeabi_i2f>
 800108e:	4603      	mov	r3, r0
 8001090:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe05 	bl	8000ca4 <__aeabi_fmul>
 800109a:	4603      	mov	r3, r0
 800109c:	617b      	str	r3, [r7, #20]
		 break;
 800109e:	e001      	b.n	80010a4 <DS18B20_Read+0x13c>
		default: 
			result = 0xFF;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <DS18B20_Read+0x158>)
 80010a2:	617b      	str	r3, [r7, #20]
	}
	
	*destination = result;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	601a      	str	r2, [r3, #0]
	
	return 1; //temperature valid
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	200001f8 	.word	0x200001f8
 80010b8:	20000404 	.word	0x20000404
 80010bc:	20000444 	.word	0x20000444
 80010c0:	437f0000 	.word	0x437f0000

080010c4 <DS18B20_SetResolution>:
	
	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 80010d4:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <DS18B20_SetResolution+0x140>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	79fa      	ldrb	r2, [r7, #7]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d301      	bcc.n	80010e2 <DS18B20_SetResolution+0x1e>
		return 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	e08c      	b.n	80011fc <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	4a48      	ldr	r2, [pc, #288]	; (8001208 <DS18B20_SetResolution+0x144>)
 80010e8:	4413      	add	r3, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f890 	bl	8001210 <DS18B20_Is>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <DS18B20_SetResolution+0x36>
		return 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e080      	b.n	80011fc <DS18B20_SetResolution+0x138>
	
	OneWire_Reset(&OneWire); // Reset the bus
 80010fa:	4844      	ldr	r0, [pc, #272]	; (800120c <DS18B20_SetResolution+0x148>)
 80010fc:	f000 fc69 	bl	80019d2 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4a40      	ldr	r2, [pc, #256]	; (8001208 <DS18B20_SetResolution+0x144>)
 8001106:	4413      	add	r3, r2
 8001108:	4619      	mov	r1, r3
 800110a:	4840      	ldr	r0, [pc, #256]	; (800120c <DS18B20_SetResolution+0x148>)
 800110c:	f000 fe17 	bl	8001d3e <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001110:	21be      	movs	r1, #190	; 0xbe
 8001112:	483e      	ldr	r0, [pc, #248]	; (800120c <DS18B20_SetResolution+0x148>)
 8001114:	f000 fce0 	bl	8001ad8 <OneWire_WriteByte>
	
	OneWire_ReadByte(&OneWire);
 8001118:	483c      	ldr	r0, [pc, #240]	; (800120c <DS18B20_SetResolution+0x148>)
 800111a:	f000 fcfa 	bl	8001b12 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 800111e:	483b      	ldr	r0, [pc, #236]	; (800120c <DS18B20_SetResolution+0x148>)
 8001120:	f000 fcf7 	bl	8001b12 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8001124:	4839      	ldr	r0, [pc, #228]	; (800120c <DS18B20_SetResolution+0x148>)
 8001126:	f000 fcf4 	bl	8001b12 <OneWire_ReadByte>
 800112a:	4603      	mov	r3, r0
 800112c:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 800112e:	4837      	ldr	r0, [pc, #220]	; (800120c <DS18B20_SetResolution+0x148>)
 8001130:	f000 fcef 	bl	8001b12 <OneWire_ReadByte>
 8001134:	4603      	mov	r3, r0
 8001136:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001138:	4834      	ldr	r0, [pc, #208]	; (800120c <DS18B20_SetResolution+0x148>)
 800113a:	f000 fcea 	bl	8001b12 <OneWire_ReadByte>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
	
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	2b09      	cmp	r3, #9
 8001146:	d108      	bne.n	800115a <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800114e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f023 0320 	bic.w	r3, r3, #32
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e022      	b.n	80011a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	2b0a      	cmp	r3, #10
 800115e:	d108      	bne.n	8001172 <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001166:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e016      	b.n	80011a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b0b      	cmp	r3, #11
 8001176:	d108      	bne.n	800118a <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800117e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	f023 0320 	bic.w	r3, r3, #32
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e00a      	b.n	80011a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	2b0c      	cmp	r3, #12
 800118e:	d107      	bne.n	80011a0 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001196:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	73fb      	strb	r3, [r7, #15]
	}
	
	OneWire_Reset(&OneWire); // Reset the bus
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <DS18B20_SetResolution+0x148>)
 80011a2:	f000 fc16 	bl	80019d2 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <DS18B20_SetResolution+0x144>)
 80011ac:	4413      	add	r3, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	4816      	ldr	r0, [pc, #88]	; (800120c <DS18B20_SetResolution+0x148>)
 80011b2:	f000 fdc4 	bl	8001d3e <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 80011b6:	214e      	movs	r1, #78	; 0x4e
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <DS18B20_SetResolution+0x148>)
 80011ba:	f000 fc8d 	bl	8001ad8 <OneWire_WriteByte>
	
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4812      	ldr	r0, [pc, #72]	; (800120c <DS18B20_SetResolution+0x148>)
 80011c4:	f000 fc88 	bl	8001ad8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 80011c8:	7b7b      	ldrb	r3, [r7, #13]
 80011ca:	4619      	mov	r1, r3
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <DS18B20_SetResolution+0x148>)
 80011ce:	f000 fc83 	bl	8001ad8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	4619      	mov	r1, r3
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <DS18B20_SetResolution+0x148>)
 80011d8:	f000 fc7e 	bl	8001ad8 <OneWire_WriteByte>
	
	OneWire_Reset(&OneWire); // Reset the bus
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <DS18B20_SetResolution+0x148>)
 80011de:	f000 fbf8 	bl	80019d2 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <DS18B20_SetResolution+0x144>)
 80011e8:	4413      	add	r3, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <DS18B20_SetResolution+0x148>)
 80011ee:	f000 fda6 	bl	8001d3e <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80011f2:	2148      	movs	r1, #72	; 0x48
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <DS18B20_SetResolution+0x148>)
 80011f6:	f000 fc6f 	bl	8001ad8 <OneWire_WriteByte>
	
	return 1;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001f8 	.word	0x200001f8
 8001208:	20000404 	.word	0x20000404
 800120c:	20000444 	.word	0x20000444

08001210 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b28      	cmp	r3, #40	; 0x28
 800121e:	d101      	bne.n	8001224 <DS18B20_Is+0x14>
		return 1;
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <DS18B20_Is+0x16>
	return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <DS18B20_AllDone+0x10>)
 8001236:	f000 fc25 	bl	8001a84 <OneWire_ReadBit>
 800123a:	4603      	mov	r3, r0
}
 800123c:	4618      	mov	r0, r3
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000444 	.word	0x20000444

08001244 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 800124a:	f7ff fff1 	bl	8001230 <DS18B20_AllDone>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d02e      	beq.n	80012b2 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001254:	2300      	movs	r3, #0
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	e026      	b.n	80012a8 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <DS18B20_ReadAll+0x78>)
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4413      	add	r3, r2
 8001262:	330c      	adds	r3, #12
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4a13      	ldr	r2, [pc, #76]	; (80012bc <DS18B20_ReadAll+0x78>)
 800126e:	4413      	add	r3, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffcd 	bl	8001210 <DS18B20_Is>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d012      	beq.n	80012a2 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	3308      	adds	r3, #8
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <DS18B20_ReadAll+0x78>)
 8001284:	441a      	add	r2, r3
 8001286:	79fc      	ldrb	r4, [r7, #7]
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe6b 	bl	8000f68 <DS18B20_Read>
 8001292:	4603      	mov	r3, r0
 8001294:	4619      	mov	r1, r3
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <DS18B20_ReadAll+0x78>)
 8001298:	0123      	lsls	r3, r4, #4
 800129a:	4413      	add	r3, r2
 800129c:	330c      	adds	r3, #12
 800129e:	460a      	mov	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	3301      	adds	r3, #1
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <DS18B20_ReadAll+0x7c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d3d3      	bcc.n	800125a <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000404 	.word	0x20000404
 80012c0:	200001f8 	.word	0x200001f8

080012c4 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	return TempSensorCount;
 80012c8:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <DS18B20_Quantity+0x10>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	200001f8 	.word	0x200001f8

080012d8 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <DS18B20_GetTemperature+0x3c>)
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4413      	add	r3, r2
 80012ec:	330c      	adds	r3, #12
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <DS18B20_GetTemperature+0x20>
		return 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e008      	b.n	800130a <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4a06      	ldr	r2, [pc, #24]	; (8001314 <DS18B20_GetTemperature+0x3c>)
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	3308      	adds	r3, #8
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]
	return 1;
 8001308:	2301      	movs	r3, #1

}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	20000404 	.word	0x20000404

08001318 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	2300      	movs	r3, #0
 8001328:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 800132a:	2210      	movs	r2, #16
 800132c:	491e      	ldr	r1, [pc, #120]	; (80013a8 <DS18B20_Init+0x90>)
 800132e:	481f      	ldr	r0, [pc, #124]	; (80013ac <DS18B20_Init+0x94>)
 8001330:	f000 fd3e 	bl	8001db0 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8001334:	481d      	ldr	r0, [pc, #116]	; (80013ac <DS18B20_Init+0x94>)
 8001336:	f000 fce5 	bl	8001d04 <OneWire_First>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
	while(next)
 800133e:	e018      	b.n	8001372 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <DS18B20_Init+0x98>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <DS18B20_Init+0x98>)
 800134a:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	73ba      	strb	r2, [r7, #14]
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <DS18B20_Init+0x9c>)
 8001356:	4413      	add	r3, r2
 8001358:	4619      	mov	r1, r3
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <DS18B20_Init+0x94>)
 800135c:	f000 fd0d 	bl	8001d7a <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8001360:	4812      	ldr	r0, [pc, #72]	; (80013ac <DS18B20_Init+0x94>)
 8001362:	f000 fcdf 	bl	8001d24 <OneWire_Next>
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <DS18B20_Init+0x98>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d803      	bhi.n	800137a <DS18B20_Init+0x62>
	while(next)
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1e3      	bne.n	8001340 <DS18B20_Init+0x28>
 8001378:	e000      	b.n	800137c <DS18B20_Init+0x64>
			break;
 800137a:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 800137c:	2300      	movs	r3, #0
 800137e:	737b      	strb	r3, [r7, #13]
 8001380:	e00a      	b.n	8001398 <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8001382:	79fa      	ldrb	r2, [r7, #7]
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe9b 	bl	80010c4 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 800138e:	f7ff fdd9 	bl	8000f44 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	3301      	adds	r3, #1
 8001396:	737b      	strb	r3, [r7, #13]
 8001398:	7b7a      	ldrb	r2, [r7, #13]
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	429a      	cmp	r2, r3
 800139e:	d3f0      	bcc.n	8001382 <DS18B20_Init+0x6a>
	}
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	20000444 	.word	0x20000444
 80013b0:	200001f8 	.word	0x200001f8
 80013b4:	20000404 	.word	0x20000404

080013b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013cc:	4b3c      	ldr	r3, [pc, #240]	; (80014c0 <MX_GPIO_Init+0x108>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a3b      	ldr	r2, [pc, #236]	; (80014c0 <MX_GPIO_Init+0x108>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <MX_GPIO_Init+0x108>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e4:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <MX_GPIO_Init+0x108>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a35      	ldr	r2, [pc, #212]	; (80014c0 <MX_GPIO_Init+0x108>)
 80013ea:	f043 0320 	orr.w	r3, r3, #32
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <MX_GPIO_Init+0x108>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0320 	and.w	r3, r3, #32
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <MX_GPIO_Init+0x108>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <MX_GPIO_Init+0x108>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <MX_GPIO_Init+0x108>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <MX_GPIO_Init+0x108>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <MX_GPIO_Init+0x108>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <MX_GPIO_Init+0x108>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CE_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2161      	movs	r1, #97	; 0x61
 8001430:	4824      	ldr	r0, [pc, #144]	; (80014c4 <MX_GPIO_Init+0x10c>)
 8001432:	f001 fa80 	bl	8002936 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2120      	movs	r1, #32
 800143a:	4823      	ldr	r0, [pc, #140]	; (80014c8 <MX_GPIO_Init+0x110>)
 800143c:	f001 fa7b 	bl	8002936 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_GPIO_Port, Backlight_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2140      	movs	r1, #64	; 0x40
 8001444:	4821      	ldr	r0, [pc, #132]	; (80014cc <MX_GPIO_Init+0x114>)
 8001446:	f001 fa76 	bl	8002936 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	4819      	ldr	r0, [pc, #100]	; (80014c4 <MX_GPIO_Init+0x10c>)
 8001460:	f001 f8f8 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_CE_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001464:	2361      	movs	r3, #97	; 0x61
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2302      	movs	r3, #2
 8001472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	4812      	ldr	r0, [pc, #72]	; (80014c4 <MX_GPIO_Init+0x10c>)
 800147c:	f001 f8ea 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001480:	2320      	movs	r3, #32
 8001482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2302      	movs	r3, #2
 800148e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4619      	mov	r1, r3
 8001496:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_GPIO_Init+0x110>)
 8001498:	f001 f8dc 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Backlight_Pin;
 800149c:	2340      	movs	r3, #64	; 0x40
 800149e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Backlight_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <MX_GPIO_Init+0x114>)
 80014b4:	f001 f8ce 	bl	8002654 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40011000 	.word	0x40011000
 80014c8:	40010800 	.word	0x40010800
 80014cc:	40010c00 	.word	0x40010c00

080014d0 <lcd_cmd>:
#define LCD_BUFFER_SIZE			(84 * 48 / 8)

static uint8_t lcd_buffer[LCD_BUFFER_SIZE];

void lcd_cmd(uint8_t cmd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CE_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2121      	movs	r1, #33	; 0x21
 80014de:	4809      	ldr	r0, [pc, #36]	; (8001504 <lcd_cmd+0x34>)
 80014e0:	f001 fa29 	bl	8002936 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80014e4:	1df9      	adds	r1, r7, #7
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	2201      	movs	r2, #1
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <lcd_cmd+0x38>)
 80014ee:	f002 fe0b 	bl	8004108 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CE_CS_Pin | LCD_DC_Pin, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	2121      	movs	r1, #33	; 0x21
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <lcd_cmd+0x34>)
 80014f8:	f001 fa1d 	bl	8002936 <HAL_GPIO_WritePin>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40011000 	.word	0x40011000
 8001508:	200004ac 	.word	0x200004ac

0800150c <lcd_setup>:

void lcd_setup(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2140      	movs	r1, #64	; 0x40
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <lcd_setup+0x3c>)
 8001516:	f001 fa0e 	bl	8002936 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	480a      	ldr	r0, [pc, #40]	; (8001548 <lcd_setup+0x3c>)
 8001520:	f001 fa09 	bl	8002936 <HAL_GPIO_WritePin>

	lcd_cmd(PCD8544_FUNCTION_SET | 1);
 8001524:	2021      	movs	r0, #33	; 0x21
 8001526:	f7ff ffd3 	bl	80014d0 <lcd_cmd>
	lcd_cmd(PCD8544_H_BIAS | 4);
 800152a:	2014      	movs	r0, #20
 800152c:	f7ff ffd0 	bl	80014d0 <lcd_cmd>
	lcd_cmd(PCD8544_H_VOP | 0x36);		//kontrast
 8001530:	20b6      	movs	r0, #182	; 0xb6
 8001532:	f7ff ffcd 	bl	80014d0 <lcd_cmd>
	lcd_cmd(PCD8544_FUNCTION_SET);
 8001536:	2020      	movs	r0, #32
 8001538:	f7ff ffca 	bl	80014d0 <lcd_cmd>
	lcd_cmd(PCD8544_DISP_NORMAL);
 800153c:	200c      	movs	r0, #12
 800153e:	f7ff ffc7 	bl	80014d0 <lcd_cmd>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40011000 	.word	0x40011000

0800154c <lcd_deinit>:

void lcd_deinit(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2140      	movs	r1, #64	; 0x40
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <lcd_deinit+0x14>)
 8001556:	f001 f9ee 	bl	8002936 <HAL_GPIO_WritePin>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40011000 	.word	0x40011000

08001564 <lcd_clear>:

void lcd_clear(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	memset(lcd_buffer, 0, LCD_BUFFER_SIZE);
 8001568:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800156c:	2100      	movs	r1, #0
 800156e:	4802      	ldr	r0, [pc, #8]	; (8001578 <lcd_clear+0x14>)
 8001570:	f003 fcd3 	bl	8004f1a <memset>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200001fc 	.word	0x200001fc

0800157c <lcd_draw_text>:
{
	memcpy(lcd_buffer, data, LCD_BUFFER_SIZE);
}

void lcd_draw_text(int row, int col, const char* text)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t* pbuf = &lcd_buffer[row * 84 + col];
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2254      	movs	r2, #84	; 0x54
 800158c:	fb02 f203 	mul.w	r2, r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4413      	add	r3, r2
 8001594:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <lcd_draw_text+0x84>)
 8001596:	4413      	add	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 800159a:	e023      	b.n	80015e4 <lcd_draw_text+0x68>
		int ch = *text++;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	613b      	str	r3, [r7, #16]
		const uint8_t* font = &font_ASCII[ch - ' '][0];
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f1a3 0220 	sub.w	r2, r3, #32
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <lcd_draw_text+0x88>)
 80015b4:	4413      	add	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 5; i++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	e00a      	b.n	80015d4 <lcd_draw_text+0x58>
			*pbuf++ = *font++;
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	1c53      	adds	r3, r2, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1c59      	adds	r1, r3, #1
 80015c8:	61b9      	str	r1, [r7, #24]
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 5; i++) {
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3301      	adds	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	ddf1      	ble.n	80015be <lcd_draw_text+0x42>
		}
		*pbuf++ = 0;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	61ba      	str	r2, [r7, #24]
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <lcd_draw_text+0x78>
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <lcd_draw_text+0x8c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d3d3      	bcc.n	800159c <lcd_draw_text+0x20>
	}
}
 80015f4:	bf00      	nop
 80015f6:	3724      	adds	r7, #36	; 0x24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200001fc 	.word	0x200001fc
 8001604:	08007014 	.word	0x08007014
 8001608:	200003ee 	.word	0x200003ee

0800160c <lcd_copy>:
        }
    }
}

void lcd_copy(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2120      	movs	r1, #32
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <lcd_copy+0x38>)
 8001616:	f001 f98e 	bl	8002936 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_CE_CS_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	2101      	movs	r1, #1
 800161e:	4809      	ldr	r0, [pc, #36]	; (8001644 <lcd_copy+0x38>)
 8001620:	f001 f989 	bl	8002936 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, lcd_buffer, LCD_BUFFER_SIZE, HAL_MAX_DELAY);
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800162c:	4906      	ldr	r1, [pc, #24]	; (8001648 <lcd_copy+0x3c>)
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <lcd_copy+0x40>)
 8001630:	f002 fd6a 	bl	8004108 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CE_CS_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2101      	movs	r1, #1
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <lcd_copy+0x38>)
 800163a:	f001 f97c 	bl	8002936 <HAL_GPIO_WritePin>
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40011000 	.word	0x40011000
 8001648:	200001fc 	.word	0x200001fc
 800164c:	200004ac 	.word	0x200004ac

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b085      	sub	sp, #20
 8001654:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001656:	f000 fe95 	bl	8002384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165a:	f000 f8f3 	bl	8001844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165e:	f7ff feab 	bl	80013b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001662:	f000 fe01 	bl	8002268 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001666:	f000 fd57 	bl	8002118 <MX_TIM3_Init>
  MX_SPI2_Init();
 800166a:	f000 fc3b 	bl	8001ee4 <MX_SPI2_Init>
  MX_RTC_Init();
 800166e:	f000 fbcb 	bl	8001e08 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //-----------INICJALIZACJA PARAMETRÓW DS18B20-----------------
  DS18B20_Init(DS18B20_Resolution_12bits);	//rozdzielczość 10 bit (dokładność 0,25 C)
 8001672:	200c      	movs	r0, #12
 8001674:	f7ff fe50 	bl	8001318 <DS18B20_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_setup();
 8001678:	f7ff ff48 	bl	800150c <lcd_setup>
	  lcd_clear();
 800167c:	f7ff ff72 	bl	8001564 <lcd_clear>
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001684:	485e      	ldr	r0, [pc, #376]	; (8001800 <main+0x1b0>)
 8001686:	f001 f93f 	bl	8002908 <HAL_GPIO_ReadPin>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f3      	bne.n	8001678 <main+0x28>
	  {
		  HAL_Delay(100);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f000 fed9 	bl	8002448 <HAL_Delay>
		  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169a:	4859      	ldr	r0, [pc, #356]	; (8001800 <main+0x1b0>)
 800169c:	f001 f934 	bl	8002908 <HAL_GPIO_ReadPin>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1e8      	bne.n	8001678 <main+0x28>
		  {
			  HAL_GPIO_WritePin(Backlight_GPIO_Port, Backlight_Pin, GPIO_PIN_SET);	//włączenie podświetlenia
 80016a6:	2201      	movs	r2, #1
 80016a8:	2140      	movs	r1, #64	; 0x40
 80016aa:	4856      	ldr	r0, [pc, #344]	; (8001804 <main+0x1b4>)
 80016ac:	f001 f943 	bl	8002936 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);		//odczekaj po inicjalizacji czujnika temperatury - KONIECZNE!!!
 80016b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b4:	f000 fec8 	bl	8002448 <HAL_Delay>

			  //----------------------------------------------
			  //==============================================

			  DS18B20_ReadAll();	//odczytanie skonwertowanej temperatury do odpowiednich elementów w tablicy czujników
 80016b8:	f7ff fdc4 	bl	8001244 <DS18B20_ReadAll>
			  DS18B20_StartAll();	//rozesłanie do wszystkich podłączonych czujników komendy startu konwersji temperatury
 80016bc:	f7ff fc42 	bl	8000f44 <DS18B20_StartAll>
			  uint8_t i;
			  for (i=0; i < DS18B20_Quantity(); i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	e093      	b.n	80017ee <main+0x19e>
			  {
				  if (DS18B20_GetTemperature(i, &temperature))
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	494f      	ldr	r1, [pc, #316]	; (8001808 <main+0x1b8>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe04 	bl	80012d8 <DS18B20_GetTemperature>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00c      	beq.n	80016f0 <main+0xa0>

			//		  DS18B20_Read(0, &temperature);	//nie działa

			//		  DS18B20_GetROM(i, ROM_tmp);
			//		  memset(komunikat, 0, sizeof(komunikat));
				  sprintf(komunikat, "Temp: %.2f ", temperature);
 80016d6:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <main+0x1b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fea4 	bl	8000428 <__aeabi_f2d>
 80016e0:	4603      	mov	r3, r0
 80016e2:	460c      	mov	r4, r1
 80016e4:	461a      	mov	r2, r3
 80016e6:	4623      	mov	r3, r4
 80016e8:	4948      	ldr	r1, [pc, #288]	; (800180c <main+0x1bc>)
 80016ea:	4849      	ldr	r0, [pc, #292]	; (8001810 <main+0x1c0>)
 80016ec:	f004 f86c 	bl	80057c8 <siprintf>
				  lcd_draw_text(1,2, "Temp: ");
 80016f0:	4a48      	ldr	r2, [pc, #288]	; (8001814 <main+0x1c4>)
 80016f2:	2102      	movs	r1, #2
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff ff41 	bl	800157c <lcd_draw_text>

				  sprintf(buffer, "%.2f", temperature);
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <main+0x1b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fe92 	bl	8000428 <__aeabi_f2d>
 8001704:	4603      	mov	r3, r0
 8001706:	460c      	mov	r4, r1
 8001708:	461a      	mov	r2, r3
 800170a:	4623      	mov	r3, r4
 800170c:	4942      	ldr	r1, [pc, #264]	; (8001818 <main+0x1c8>)
 800170e:	4843      	ldr	r0, [pc, #268]	; (800181c <main+0x1cc>)
 8001710:	f004 f85a 	bl	80057c8 <siprintf>
				  lcd_draw_text(1, 35, (uint8_t *)buffer);
 8001714:	4a41      	ldr	r2, [pc, #260]	; (800181c <main+0x1cc>)
 8001716:	2123      	movs	r1, #35	; 0x23
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff ff2f 	bl	800157c <lcd_draw_text>

				  lcd_draw_text(1, 68, "C");
 800171e:	4a40      	ldr	r2, [pc, #256]	; (8001820 <main+0x1d0>)
 8001720:	2144      	movs	r1, #68	; 0x44
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff ff2a 	bl	800157c <lcd_draw_text>

				  HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8001728:	2200      	movs	r2, #0
 800172a:	493e      	ldr	r1, [pc, #248]	; (8001824 <main+0x1d4>)
 800172c:	483e      	ldr	r0, [pc, #248]	; (8001828 <main+0x1d8>)
 800172e:	f001 ffe3 	bl	80036f8 <HAL_RTC_GetTime>
				  HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8001732:	2200      	movs	r2, #0
 8001734:	493d      	ldr	r1, [pc, #244]	; (800182c <main+0x1dc>)
 8001736:	483c      	ldr	r0, [pc, #240]	; (8001828 <main+0x1d8>)
 8001738:	f002 f96c 	bl	8003a14 <HAL_RTC_GetDate>

				  if(RtcTime.Seconds != CompareSeconds)		//sprawia, że czas i data aktualizuje się na wyświetlaczu co sekundę
 800173c:	4b39      	ldr	r3, [pc, #228]	; (8001824 <main+0x1d4>)
 800173e:	789a      	ldrb	r2, [r3, #2]
 8001740:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <main+0x1e0>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d036      	beq.n	80017b6 <main+0x166>
					  {
					  sprintf(RtcPrint, "%02d:%02d:%02d ", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8001748:	4b36      	ldr	r3, [pc, #216]	; (8001824 <main+0x1d4>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b35      	ldr	r3, [pc, #212]	; (8001824 <main+0x1d4>)
 8001750:	785b      	ldrb	r3, [r3, #1]
 8001752:	4619      	mov	r1, r3
 8001754:	4b33      	ldr	r3, [pc, #204]	; (8001824 <main+0x1d4>)
 8001756:	789b      	ldrb	r3, [r3, #2]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	460b      	mov	r3, r1
 800175c:	4935      	ldr	r1, [pc, #212]	; (8001834 <main+0x1e4>)
 800175e:	4836      	ldr	r0, [pc, #216]	; (8001838 <main+0x1e8>)
 8001760:	f004 f832 	bl	80057c8 <siprintf>
					  lcd_draw_text(3, 2, (uint8_t *)RtcPrint);
 8001764:	4a34      	ldr	r2, [pc, #208]	; (8001838 <main+0x1e8>)
 8001766:	2102      	movs	r1, #2
 8001768:	2003      	movs	r0, #3
 800176a:	f7ff ff07 	bl	800157c <lcd_draw_text>
					  HAL_UART_Transmit(&huart2, (uint8_t *) RtcPrint, sizeof(RtcPrint), 100);
 800176e:	2364      	movs	r3, #100	; 0x64
 8001770:	2214      	movs	r2, #20
 8001772:	4931      	ldr	r1, [pc, #196]	; (8001838 <main+0x1e8>)
 8001774:	4831      	ldr	r0, [pc, #196]	; (800183c <main+0x1ec>)
 8001776:	f003 fa30 	bl	8004bda <HAL_UART_Transmit>
					  sprintf(RtcPrint, "%02d.%02d.20%02d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <main+0x1dc>)
 800177c:	789b      	ldrb	r3, [r3, #2]
 800177e:	461a      	mov	r2, r3
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <main+0x1dc>)
 8001782:	785b      	ldrb	r3, [r3, #1]
 8001784:	4619      	mov	r1, r3
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <main+0x1dc>)
 8001788:	78db      	ldrb	r3, [r3, #3]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	460b      	mov	r3, r1
 800178e:	492c      	ldr	r1, [pc, #176]	; (8001840 <main+0x1f0>)
 8001790:	4829      	ldr	r0, [pc, #164]	; (8001838 <main+0x1e8>)
 8001792:	f004 f819 	bl	80057c8 <siprintf>
					  lcd_draw_text(5, 20, (uint8_t *)RtcPrint);
 8001796:	4a28      	ldr	r2, [pc, #160]	; (8001838 <main+0x1e8>)
 8001798:	2114      	movs	r1, #20
 800179a:	2005      	movs	r0, #5
 800179c:	f7ff feee 	bl	800157c <lcd_draw_text>
					  HAL_UART_Transmit(&huart2, (uint8_t*) RtcPrint, sizeof(RtcPrint), 1000);
 80017a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a4:	2214      	movs	r2, #20
 80017a6:	4924      	ldr	r1, [pc, #144]	; (8001838 <main+0x1e8>)
 80017a8:	4824      	ldr	r0, [pc, #144]	; (800183c <main+0x1ec>)
 80017aa:	f003 fa16 	bl	8004bda <HAL_UART_Transmit>
					  CompareSeconds = RtcTime.Seconds;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <main+0x1d4>)
 80017b0:	789a      	ldrb	r2, [r3, #2]
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <main+0x1e0>)
 80017b4:	701a      	strb	r2, [r3, #0]
					  }

			//		  lcd_draw_text(2, 35, (uint8_t *)buffer2));		//wyświetla "test"
			//	  }
				  lcd_copy();
 80017b6:	f7ff ff29 	bl	800160c <lcd_copy>
				  HAL_UART_Transmit(&huart2, (uint8_t *)komunikat, sizeof(komunikat), 100);
 80017ba:	2364      	movs	r3, #100	; 0x64
 80017bc:	2214      	movs	r2, #20
 80017be:	4914      	ldr	r1, [pc, #80]	; (8001810 <main+0x1c0>)
 80017c0:	481e      	ldr	r0, [pc, #120]	; (800183c <main+0x1ec>)
 80017c2:	f003 fa0a 	bl	8004bda <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, sizeof(buffer), 100);
 80017c6:	2364      	movs	r3, #100	; 0x64
 80017c8:	2208      	movs	r2, #8
 80017ca:	4914      	ldr	r1, [pc, #80]	; (800181c <main+0x1cc>)
 80017cc:	481b      	ldr	r0, [pc, #108]	; (800183c <main+0x1ec>)
 80017ce:	f003 fa04 	bl	8004bda <HAL_UART_Transmit>
				  HAL_Delay(10000);
 80017d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80017d6:	f000 fe37 	bl	8002448 <HAL_Delay>
				lcd_deinit();
 80017da:	f7ff feb7 	bl	800154c <lcd_deinit>
				HAL_GPIO_WritePin(Backlight_GPIO_Port, Backlight_Pin, GPIO_PIN_RESET);	//wyłączenie podświetlenia
 80017de:	2200      	movs	r2, #0
 80017e0:	2140      	movs	r1, #64	; 0x40
 80017e2:	4808      	ldr	r0, [pc, #32]	; (8001804 <main+0x1b4>)
 80017e4:	f001 f8a7 	bl	8002936 <HAL_GPIO_WritePin>
			  for (i=0; i < DS18B20_Quantity(); i++)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	3301      	adds	r3, #1
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	f7ff fd69 	bl	80012c4 <DS18B20_Quantity>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4293      	cmp	r3, r2
 80017fa:	f4ff af64 	bcc.w	80016c6 <main+0x76>
	  lcd_setup();
 80017fe:	e73b      	b.n	8001678 <main+0x28>
 8001800:	40011000 	.word	0x40011000
 8001804:	40010c00 	.word	0x40010c00
 8001808:	2000046c 	.word	0x2000046c
 800180c:	08006fa8 	.word	0x08006fa8
 8001810:	20000458 	.word	0x20000458
 8001814:	08006fb4 	.word	0x08006fb4
 8001818:	08006fbc 	.word	0x08006fbc
 800181c:	20000474 	.word	0x20000474
 8001820:	08006fc4 	.word	0x08006fc4
 8001824:	20000470 	.word	0x20000470
 8001828:	20000498 	.word	0x20000498
 800182c:	20000490 	.word	0x20000490
 8001830:	20000494 	.word	0x20000494
 8001834:	08006fc8 	.word	0x08006fc8
 8001838:	2000047c 	.word	0x2000047c
 800183c:	2000054c 	.word	0x2000054c
 8001840:	08006fd8 	.word	0x08006fd8

08001844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b094      	sub	sp, #80	; 0x50
 8001848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184e:	2228      	movs	r2, #40	; 0x28
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fb61 	bl	8004f1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001874:	2306      	movs	r3, #6
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001878:	2301      	movs	r3, #1
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187c:	2301      	movs	r3, #1
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001880:	2310      	movs	r3, #16
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001884:	2302      	movs	r3, #2
 8001886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001888:	2300      	movs	r3, #0
 800188a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800188c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001890:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001896:	4618      	mov	r0, r3
 8001898:	f001 f872 	bl	8002980 <HAL_RCC_OscConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80018a2:	f000 f828 	bl	80018f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a6:	230f      	movs	r3, #15
 80018a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2102      	movs	r1, #2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 fadc 	bl	8002e80 <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018ce:	f000 f812 	bl	80018f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018d2:	2301      	movs	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018da:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 fc6a 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018ea:	f000 f804 	bl	80018f6 <Error_Handler>
  }
}
 80018ee:	bf00      	nop
 80018f0:	3750      	adds	r7, #80	; 0x50
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
	...

08001904 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <OneWire_Delay+0x2c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8001916:	bf00      	nop
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <OneWire_Delay+0x2c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	429a      	cmp	r2, r3
 8001922:	d9f9      	bls.n	8001918 <OneWire_Delay+0x14>
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000504 	.word	0x20000504

08001934 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001944:	2301      	movs	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	889b      	ldrh	r3, [r3, #4]
 800194c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f107 0208 	add.w	r2, r7, #8
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fe7b 	bl	8002654 <HAL_GPIO_Init>
}	
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 800196e:	2311      	movs	r3, #17
 8001970:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001976:	2301      	movs	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	889b      	ldrh	r3, [r3, #4]
 800197e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f107 0208 	add.w	r2, r7, #8
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fe62 	bl	8002654 <HAL_GPIO_Init>
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	889b      	ldrh	r3, [r3, #4]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	611a      	str	r2, [r3, #16]
}	
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	889a      	ldrh	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	611a      	str	r2, [r3, #16]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffdc 	bl	8001998 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffc0 	bl	8001966 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 80019e6:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80019ea:	f7ff ff8b 	bl	8001904 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa0 	bl	8001934 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 80019f4:	2046      	movs	r0, #70	; 0x46
 80019f6:	f7ff ff85 	bl	8001904 <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	889b      	ldrh	r3, [r3, #4]
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f000 ff7f 	bl	8002908 <HAL_GPIO_ReadPin>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8001a0e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001a12:	f7ff ff77 	bl	8001904 <OneWire_Delay>

	return i;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d012      	beq.n	8001a58 <OneWire_WriteBit+0x38>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffb0 	bl	8001998 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff94 	bl	8001966 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8001a3e:	2006      	movs	r0, #6
 8001a40:	f7ff ff60 	bl	8001904 <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff75 	bl	8001934 <OneWire_BusInputDirection>
		
		OneWire_Delay(64);
 8001a4a:	2040      	movs	r0, #64	; 0x40
 8001a4c:	f7ff ff5a 	bl	8001904 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); //Release bus
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff6f 	bl	8001934 <OneWire_BusInputDirection>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		
		OneWire_Delay(10);
		OneWire_BusInputDirection(onewire); // Release bus
	}
}
 8001a56:	e011      	b.n	8001a7c <OneWire_WriteBit+0x5c>
		OneWire_OutputLow(onewire); // Set the bus low
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff9d 	bl	8001998 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff81 	bl	8001966 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8001a64:	203c      	movs	r0, #60	; 0x3c
 8001a66:	f7ff ff4d 	bl	8001904 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff62 	bl	8001934 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8001a70:	200a      	movs	r0, #10
 8001a72:	f7ff ff47 	bl	8001904 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff5c 	bl	8001934 <OneWire_BusInputDirection>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff81 	bl	8001998 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff65 	bl	8001966 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f7ff ff31 	bl	8001904 <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff46 	bl	8001934 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8001aa8:	200a      	movs	r0, #10
 8001aaa:	f7ff ff2b 	bl	8001904 <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	889b      	ldrh	r3, [r3, #4]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4610      	mov	r0, r2
 8001aba:	f000 ff25 	bl	8002908 <HAL_GPIO_ReadPin>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <OneWire_ReadBit+0x44>
		bit = 1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
	
	OneWire_Delay(50); // Wait for end of read cycle
 8001ac8:	2032      	movs	r0, #50	; 0x32
 8001aca:	f7ff ff1b 	bl	8001904 <OneWire_Delay>

	return bit;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff94 	bl	8001a20 <OneWire_WriteBit>
		byte >>= 1;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	085b      	lsrs	r3, r3, #1
 8001afc:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ee      	bne.n	8001ae8 <OneWire_WriteByte+0x10>
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8001b22:	7bbb      	ldrb	r3, [r7, #14]
 8001b24:	085b      	lsrs	r3, r3, #1
 8001b26:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ffab 	bl	8001a84 <OneWire_ReadBit>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	01db      	lsls	r3, r3, #7
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1eb      	bne.n	8001b22 <OneWire_ReadByte+0x10>
	
	return byte;
 8001b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	71da      	strb	r2, [r3, #7]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7a1b      	ldrb	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f040 809a 	bne.w	8001cd6 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ff15 	bl	80019d2 <OneWire_Reset>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	71da      	strb	r2, [r3, #7]
			return 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e09b      	b.n	8001cfc <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff85 	bl	8001ad8 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ff58 	bl	8001a84 <OneWire_ReadBit>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff53 	bl	8001a84 <OneWire_ReadBit>
 8001bde:	4603      	mov	r3, r0
 8001be0:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8001be2:	7a7b      	ldrb	r3, [r7, #9]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d102      	bne.n	8001bee <OneWire_Search+0x76>
 8001be8:	7a3b      	ldrb	r3, [r7, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d064      	beq.n	8001cb8 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8001bee:	7a7a      	ldrb	r2, [r7, #9]
 8001bf0:	7a3b      	ldrb	r3, [r7, #8]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d002      	beq.n	8001bfc <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8001bf6:	7a7b      	ldrb	r3, [r7, #9]
 8001bf8:	72bb      	strb	r3, [r7, #10]
 8001bfa:	e026      	b.n	8001c4a <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	799b      	ldrb	r3, [r3, #6]
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d20d      	bcs.n	8001c22 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001c06:	7b7b      	ldrb	r3, [r7, #13]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	7a5a      	ldrb	r2, [r3, #9]
 8001c0e:	7afb      	ldrb	r3, [r7, #11]
 8001c10:	4013      	ands	r3, r2
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf14      	ite	ne
 8001c18:	2301      	movne	r3, #1
 8001c1a:	2300      	moveq	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	72bb      	strb	r3, [r7, #10]
 8001c20:	e008      	b.n	8001c34 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	799b      	ldrb	r3, [r3, #6]
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	bf0c      	ite	eq
 8001c2c:	2301      	moveq	r3, #1
 8001c2e:	2300      	movne	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001c34:	7abb      	ldrb	r3, [r7, #10]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d107      	bne.n	8001c4a <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d802      	bhi.n	8001c4a <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7bba      	ldrb	r2, [r7, #14]
 8001c48:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8001c4a:	7abb      	ldrb	r3, [r7, #10]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d10c      	bne.n	8001c6a <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8001c50:	7b7b      	ldrb	r3, [r7, #13]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	7a59      	ldrb	r1, [r3, #9]
 8001c58:	7b7b      	ldrb	r3, [r7, #13]
 8001c5a:	7afa      	ldrb	r2, [r7, #11]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	b2d1      	uxtb	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	460a      	mov	r2, r1
 8001c66:	725a      	strb	r2, [r3, #9]
 8001c68:	e010      	b.n	8001c8c <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8001c6a:	7b7b      	ldrb	r3, [r7, #13]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	7a5b      	ldrb	r3, [r3, #9]
 8001c72:	b25a      	sxtb	r2, r3
 8001c74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	b25a      	sxtb	r2, r3
 8001c80:	7b7b      	ldrb	r3, [r7, #13]
 8001c82:	b2d1      	uxtb	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	460a      	mov	r2, r1
 8001c8a:	725a      	strb	r2, [r3, #9]
				}
				
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8001c8c:	7abb      	ldrb	r3, [r7, #10]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff fec5 	bl	8001a20 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8001ca8:	7b7b      	ldrb	r3, [r7, #13]
 8001caa:	3301      	adds	r3, #1
 8001cac:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8001cae:	2301      	movs	r3, #1
 8001cb0:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8001cb2:	7b7b      	ldrb	r3, [r7, #13]
 8001cb4:	2b07      	cmp	r3, #7
 8001cb6:	d98a      	bls.n	8001bce <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b40      	cmp	r3, #64	; 0x40
 8001cbc:	d90b      	bls.n	8001cd6 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7bba      	ldrb	r2, [r7, #14]
 8001cc2:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	799b      	ldrb	r3, [r3, #6]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8001cd6:	7b3b      	ldrb	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <OneWire_Search+0x16c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7a5b      	ldrb	r3, [r3, #9]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10a      	bne.n	8001cfa <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001cfa:	7b3b      	ldrb	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff21 	bl	8001b54 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001d12:	21f0      	movs	r1, #240	; 0xf0
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff2f 	bl	8001b78 <OneWire_Search>
 8001d1a:	4603      	mov	r3, r0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001d2c:	21f0      	movs	r1, #240	; 0xf0
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ff22 	bl	8001b78 <OneWire_Search>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8001d48:	2155      	movs	r1, #85	; 0x55
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fec4 	bl	8001ad8 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e00a      	b.n	8001d6c <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff feb9 	bl	8001ad8 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	2b07      	cmp	r3, #7
 8001d70:	d9f1      	bls.n	8001d56 <OneWire_SelectWithPointer+0x18>
	}	
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e00a      	b.n	8001da0 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	440b      	add	r3, r1
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	440a      	add	r2, r1
 8001d96:	7a52      	ldrb	r2, [r2, #9]
 8001d98:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	2b07      	cmp	r3, #7
 8001da4:	d9f1      	bls.n	8001d8a <OneWire_GetFullROM+0x10>
	}
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8001dbe:	4811      	ldr	r0, [pc, #68]	; (8001e04 <OneWire_Init+0x54>)
 8001dc0:	f002 fb84 	bl	80044cc <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	88fa      	ldrh	r2, [r7, #6]
 8001dce:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7ff fdc8 	bl	8001966 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7ff fded 	bl	80019b6 <OneWire_OutputHigh>
	HAL_Delay(100);
 8001ddc:	2064      	movs	r0, #100	; 0x64
 8001dde:	f000 fb33 	bl	8002448 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff fdd8 	bl	8001998 <OneWire_OutputLow>
	HAL_Delay(100);
 8001de8:	2064      	movs	r0, #100	; 0x64
 8001dea:	f000 fb2d 	bl	8002448 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff fde1 	bl	80019b6 <OneWire_OutputHigh>
	HAL_Delay(200);
 8001df4:	20c8      	movs	r0, #200	; 0xc8
 8001df6:	f000 fb27 	bl	8002448 <HAL_Delay>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000504 	.word	0x20000504

08001e08 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2100      	movs	r1, #0
 8001e12:	460a      	mov	r2, r1
 8001e14:	801a      	strh	r2, [r3, #0]
 8001e16:	460a      	mov	r2, r1
 8001e18:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <MX_RTC_Init+0x8c>)
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <MX_RTC_Init+0x90>)
 8001e22:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_RTC_Init+0x8c>)
 8001e26:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <MX_RTC_Init+0x8c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e32:	4818      	ldr	r0, [pc, #96]	; (8001e94 <MX_RTC_Init+0x8c>)
 8001e34:	f001 fb32 	bl	800349c <HAL_RTC_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8001e3e:	f7ff fd5a 	bl	80018f6 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8001e42:	2312      	movs	r3, #18
 8001e44:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x50;
 8001e46:	2350      	movs	r3, #80	; 0x50
 8001e48:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2201      	movs	r2, #1
 8001e52:	4619      	mov	r1, r3
 8001e54:	480f      	ldr	r0, [pc, #60]	; (8001e94 <MX_RTC_Init+0x8c>)
 8001e56:	f001 fbb7 	bl	80035c8 <HAL_RTC_SetTime>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001e60:	f7ff fd49 	bl	80018f6 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001e64:	2300      	movs	r3, #0
 8001e66:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_DECEMBER;
 8001e68:	2312      	movs	r3, #18
 8001e6a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x27;
 8001e6c:	2327      	movs	r3, #39	; 0x27
 8001e6e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x20;
 8001e70:	2320      	movs	r3, #32
 8001e72:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001e74:	463b      	mov	r3, r7
 8001e76:	2201      	movs	r2, #1
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4806      	ldr	r0, [pc, #24]	; (8001e94 <MX_RTC_Init+0x8c>)
 8001e7c:	f001 fd14 	bl	80038a8 <HAL_RTC_SetDate>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001e86:	f7ff fd36 	bl	80018f6 <Error_Handler>
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000498 	.word	0x20000498
 8001e98:	40002800 	.word	0x40002800

08001e9c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <HAL_RTC_MspInit+0x3c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d110      	bne.n	8001ed0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001eae:	f000 fd5b 	bl	8002968 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_RTC_MspInit+0x40>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_RTC_MspInit+0x40>)
 8001eb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RTC_MspInit+0x40>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RTC_MspInit+0x44>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40002800 	.word	0x40002800
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	4242043c 	.word	0x4242043c

08001ee4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <MX_SPI2_Init+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001f18:	2210      	movs	r2, #16
 8001f1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001f30:	220a      	movs	r2, #10
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_SPI2_Init+0x64>)
 8001f36:	f002 f863 	bl	8004000 <HAL_SPI_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f40:	f7ff fcd9 	bl	80018f6 <Error_Handler>
  }

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200004ac 	.word	0x200004ac
 8001f4c:	40003800 	.word	0x40003800

08001f50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_SPI_MspInit+0x8c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d131      	bne.n	8001fd4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_SPI_MspInit+0x90>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_SPI_MspInit+0x90>)
 8001f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7a:	61d3      	str	r3, [r2, #28]
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_SPI_MspInit+0x90>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_SPI_MspInit+0x90>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <HAL_SPI_MspInit+0x90>)
 8001f8e:	f043 0308 	orr.w	r3, r3, #8
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_SPI_MspInit+0x90>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001fa0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001fa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <HAL_SPI_MspInit+0x94>)
 8001fb6:	f000 fb4d 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <HAL_SPI_MspInit+0x94>)
 8001fd0:	f000 fb40 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40003800 	.word	0x40003800
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010c00 	.word	0x40010c00

08001fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_MspInit+0x5c>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4a14      	ldr	r2, [pc, #80]	; (8002044 <HAL_MspInit+0x5c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6193      	str	r3, [r2, #24]
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_MspInit+0x5c>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_MspInit+0x5c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <HAL_MspInit+0x5c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_MspInit+0x5c>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_MspInit+0x60>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_MspInit+0x60>)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <HardFault_Handler+0x4>

0800205e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <MemManage_Handler+0x4>

08002064 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <BusFault_Handler+0x4>

0800206a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <UsageFault_Handler+0x4>

08002070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002098:	f000 f9ba 	bl	8002410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <_sbrk+0x5c>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <_sbrk+0x60>)
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <_sbrk+0x64>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <_sbrk+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d0:	f002 feee 	bl	8004eb0 <__errno>
 80020d4:	4602      	mov	r2, r0
 80020d6:	230c      	movs	r3, #12
 80020d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e009      	b.n	80020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <_sbrk+0x64>)
 80020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20005000 	.word	0x20005000
 8002100:	00000400 	.word	0x00000400
 8002104:	200003f4 	.word	0x200003f4
 8002108:	20000598 	.word	0x20000598

0800210c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	615a      	str	r2, [r3, #20]
 8002138:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <MX_TIM3_Init+0xa4>)
 800213c:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <MX_TIM3_Init+0xa8>)
 800213e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <MX_TIM3_Init+0xa4>)
 8002142:	223f      	movs	r2, #63	; 0x3f
 8002144:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <MX_TIM3_Init+0xa4>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <MX_TIM3_Init+0xa4>)
 800214e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002152:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <MX_TIM3_Init+0xa4>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MX_TIM3_Init+0xa4>)
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002160:	4816      	ldr	r0, [pc, #88]	; (80021bc <MX_TIM3_Init+0xa4>)
 8002162:	f002 f9fd 	bl	8004560 <HAL_TIM_OC_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800216c:	f7ff fbc3 	bl	80018f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002178:	f107 0320 	add.w	r3, r7, #32
 800217c:	4619      	mov	r1, r3
 800217e:	480f      	ldr	r0, [pc, #60]	; (80021bc <MX_TIM3_Init+0xa4>)
 8002180:	f002 fc80 	bl	8004a84 <HAL_TIMEx_MasterConfigSynchronization>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800218a:	f7ff fbb4 	bl	80018f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_TIM3_Init+0xa4>)
 80021a6:	f002 fa2b 	bl	8004600 <HAL_TIM_OC_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80021b0:	f7ff fba1 	bl	80018f6 <Error_Handler>
  }

}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000504 	.word	0x20000504
 80021c0:	40000400 	.word	0x40000400

080021c4 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
  if(tim_ocHandle->Instance==TIM3)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_TIM_OC_MspInit+0x94>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d135      	bne.n	8002250 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_TIM_OC_MspInit+0x98>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_TIM_OC_MspInit+0x98>)
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	61d3      	str	r3, [r2, #28]
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <HAL_TIM_OC_MspInit+0x98>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_TIM_OC_MspInit+0x98>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a16      	ldr	r2, [pc, #88]	; (800225c <HAL_TIM_OC_MspInit+0x98>)
 8002202:	f043 0308 	orr.w	r3, r3, #8
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_TIM_OC_MspInit+0x98>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = DS18B20_Pin;
 8002214:	2310      	movs	r3, #16
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2302      	movs	r3, #2
 800221e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	480e      	ldr	r0, [pc, #56]	; (8002260 <HAL_TIM_OC_MspInit+0x9c>)
 8002228:	f000 fa14 	bl	8002654 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800222c:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_TIM_OC_MspInit+0xa0>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	4a06      	ldr	r2, [pc, #24]	; (8002264 <HAL_TIM_OC_MspInit+0xa0>)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002250:	bf00      	nop
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40000400 	.word	0x40000400
 800225c:	40021000 	.word	0x40021000
 8002260:	40010c00 	.word	0x40010c00
 8002264:	40010000 	.word	0x40010000

08002268 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <MX_USART2_UART_Init+0x50>)
 8002270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 800228e:	220c      	movs	r2, #12
 8002290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 80022a0:	f002 fc4e 	bl	8004b40 <HAL_UART_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022aa:	f7ff fb24 	bl	80018f6 <Error_Handler>
  }

}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000054c 	.word	0x2000054c
 80022b8:	40004400 	.word	0x40004400

080022bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <HAL_UART_MspInit+0x70>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d123      	bne.n	8002324 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_UART_MspInit+0x74>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_UART_MspInit+0x74>)
 80022e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e6:	61d3      	str	r3, [r2, #28]
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_UART_MspInit+0x74>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_UART_MspInit+0x74>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_UART_MspInit+0x74>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_UART_MspInit+0x74>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800230c:	230c      	movs	r3, #12
 800230e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2302      	movs	r3, #2
 8002316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	4619      	mov	r1, r3
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <HAL_UART_MspInit+0x78>)
 8002320:	f000 f998 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40004400 	.word	0x40004400
 8002330:	40021000 	.word	0x40021000
 8002334:	40010800 	.word	0x40010800

08002338 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002338:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800233a:	e003      	b.n	8002344 <LoopCopyDataInit>

0800233c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800233e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002340:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002342:	3104      	adds	r1, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002344:	480a      	ldr	r0, [pc, #40]	; (8002370 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002348:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800234a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800234c:	d3f6      	bcc.n	800233c <CopyDataInit>
  ldr r2, =_sbss
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002350:	e002      	b.n	8002358 <LoopFillZerobss>

08002352 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002354:	f842 3b04 	str.w	r3, [r2], #4

08002358 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800235a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800235c:	d3f9      	bcc.n	8002352 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800235e:	f7ff fed5 	bl	800210c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002362:	f002 fdab 	bl	8004ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002366:	f7ff f973 	bl	8001650 <main>
  bx lr
 800236a:	4770      	bx	lr
  ldr r3, =_sidata
 800236c:	08007470 	.word	0x08007470
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002374:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002378:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800237c:	20000594 	.word	0x20000594

08002380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC1_2_IRQHandler>
	...

08002384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_Init+0x28>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_Init+0x28>)
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002394:	2003      	movs	r0, #3
 8002396:	f000 f929 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800239a:	2000      	movs	r0, #0
 800239c:	f000 f808 	bl	80023b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a0:	f7ff fe22 	bl	8001fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40022000 	.word	0x40022000

080023b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_InitTick+0x54>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_InitTick+0x58>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 f933 	bl	800263a <HAL_SYSTICK_Config>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e00e      	b.n	80023fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b0f      	cmp	r3, #15
 80023e2:	d80a      	bhi.n	80023fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e4:	2200      	movs	r2, #0
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f000 f909 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f0:	4a06      	ldr	r2, [pc, #24]	; (800240c <HAL_InitTick+0x5c>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000000 	.word	0x20000000
 8002408:	20000008 	.word	0x20000008
 800240c:	20000004 	.word	0x20000004

08002410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_IncTick+0x1c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_IncTick+0x20>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4413      	add	r3, r2
 8002420:	4a03      	ldr	r2, [pc, #12]	; (8002430 <HAL_IncTick+0x20>)
 8002422:	6013      	str	r3, [r2, #0]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	20000008 	.word	0x20000008
 8002430:	2000058c 	.word	0x2000058c

08002434 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b02      	ldr	r3, [pc, #8]	; (8002444 <HAL_GetTick+0x10>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	2000058c 	.word	0x2000058c

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff fff0 	bl	8002434 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d005      	beq.n	800246e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_Delay+0x40>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800246e:	bf00      	nop
 8002470:	f7ff ffe0 	bl	8002434 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	429a      	cmp	r2, r3
 800247e:	d8f7      	bhi.n	8002470 <HAL_Delay+0x28>
  {
  }
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000008 	.word	0x20000008

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	; (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	; (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff90 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff49 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff5e 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff90 	bl	8002544 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5f 	bl	80024f0 <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffb0 	bl	80025a8 <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b08b      	sub	sp, #44	; 0x2c
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002666:	e127      	b.n	80028b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002668:	2201      	movs	r2, #1
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8116 	bne.w	80028b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b12      	cmp	r3, #18
 800268c:	d034      	beq.n	80026f8 <HAL_GPIO_Init+0xa4>
 800268e:	2b12      	cmp	r3, #18
 8002690:	d80d      	bhi.n	80026ae <HAL_GPIO_Init+0x5a>
 8002692:	2b02      	cmp	r3, #2
 8002694:	d02b      	beq.n	80026ee <HAL_GPIO_Init+0x9a>
 8002696:	2b02      	cmp	r3, #2
 8002698:	d804      	bhi.n	80026a4 <HAL_GPIO_Init+0x50>
 800269a:	2b00      	cmp	r3, #0
 800269c:	d031      	beq.n	8002702 <HAL_GPIO_Init+0xae>
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d01c      	beq.n	80026dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026a2:	e048      	b.n	8002736 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d043      	beq.n	8002730 <HAL_GPIO_Init+0xdc>
 80026a8:	2b11      	cmp	r3, #17
 80026aa:	d01b      	beq.n	80026e4 <HAL_GPIO_Init+0x90>
          break;
 80026ac:	e043      	b.n	8002736 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80026ae:	4a89      	ldr	r2, [pc, #548]	; (80028d4 <HAL_GPIO_Init+0x280>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d026      	beq.n	8002702 <HAL_GPIO_Init+0xae>
 80026b4:	4a87      	ldr	r2, [pc, #540]	; (80028d4 <HAL_GPIO_Init+0x280>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d806      	bhi.n	80026c8 <HAL_GPIO_Init+0x74>
 80026ba:	4a87      	ldr	r2, [pc, #540]	; (80028d8 <HAL_GPIO_Init+0x284>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d020      	beq.n	8002702 <HAL_GPIO_Init+0xae>
 80026c0:	4a86      	ldr	r2, [pc, #536]	; (80028dc <HAL_GPIO_Init+0x288>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01d      	beq.n	8002702 <HAL_GPIO_Init+0xae>
          break;
 80026c6:	e036      	b.n	8002736 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80026c8:	4a85      	ldr	r2, [pc, #532]	; (80028e0 <HAL_GPIO_Init+0x28c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d019      	beq.n	8002702 <HAL_GPIO_Init+0xae>
 80026ce:	4a85      	ldr	r2, [pc, #532]	; (80028e4 <HAL_GPIO_Init+0x290>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d016      	beq.n	8002702 <HAL_GPIO_Init+0xae>
 80026d4:	4a84      	ldr	r2, [pc, #528]	; (80028e8 <HAL_GPIO_Init+0x294>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0xae>
          break;
 80026da:	e02c      	b.n	8002736 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	623b      	str	r3, [r7, #32]
          break;
 80026e2:	e028      	b.n	8002736 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	3304      	adds	r3, #4
 80026ea:	623b      	str	r3, [r7, #32]
          break;
 80026ec:	e023      	b.n	8002736 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	3308      	adds	r3, #8
 80026f4:	623b      	str	r3, [r7, #32]
          break;
 80026f6:	e01e      	b.n	8002736 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	330c      	adds	r3, #12
 80026fe:	623b      	str	r3, [r7, #32]
          break;
 8002700:	e019      	b.n	8002736 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800270a:	2304      	movs	r3, #4
 800270c:	623b      	str	r3, [r7, #32]
          break;
 800270e:	e012      	b.n	8002736 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002718:	2308      	movs	r3, #8
 800271a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	611a      	str	r2, [r3, #16]
          break;
 8002722:	e008      	b.n	8002736 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002724:	2308      	movs	r3, #8
 8002726:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	615a      	str	r2, [r3, #20]
          break;
 800272e:	e002      	b.n	8002736 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
          break;
 8002734:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2bff      	cmp	r3, #255	; 0xff
 800273a:	d801      	bhi.n	8002740 <HAL_GPIO_Init+0xec>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	e001      	b.n	8002744 <HAL_GPIO_Init+0xf0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3304      	adds	r3, #4
 8002744:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2bff      	cmp	r3, #255	; 0xff
 800274a:	d802      	bhi.n	8002752 <HAL_GPIO_Init+0xfe>
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	e002      	b.n	8002758 <HAL_GPIO_Init+0x104>
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	3b08      	subs	r3, #8
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	210f      	movs	r1, #15
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	401a      	ands	r2, r3
 800276a:	6a39      	ldr	r1, [r7, #32]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	431a      	orrs	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8096 	beq.w	80028b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002786:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_GPIO_Init+0x298>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4a58      	ldr	r2, [pc, #352]	; (80028ec <HAL_GPIO_Init+0x298>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6193      	str	r3, [r2, #24]
 8002792:	4b56      	ldr	r3, [pc, #344]	; (80028ec <HAL_GPIO_Init+0x298>)
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800279e:	4a54      	ldr	r2, [pc, #336]	; (80028f0 <HAL_GPIO_Init+0x29c>)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4013      	ands	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4b      	ldr	r2, [pc, #300]	; (80028f4 <HAL_GPIO_Init+0x2a0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0x19e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4a      	ldr	r2, [pc, #296]	; (80028f8 <HAL_GPIO_Init+0x2a4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <HAL_GPIO_Init+0x19a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a49      	ldr	r2, [pc, #292]	; (80028fc <HAL_GPIO_Init+0x2a8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x196>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a48      	ldr	r2, [pc, #288]	; (8002900 <HAL_GPIO_Init+0x2ac>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_GPIO_Init+0x192>
 80027e2:	2303      	movs	r3, #3
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x1a0>
 80027e6:	2304      	movs	r3, #4
 80027e8:	e004      	b.n	80027f4 <HAL_GPIO_Init+0x1a0>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e002      	b.n	80027f4 <HAL_GPIO_Init+0x1a0>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_GPIO_Init+0x1a0>
 80027f2:	2300      	movs	r3, #0
 80027f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f6:	f002 0203 	and.w	r2, r2, #3
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	4093      	lsls	r3, r2
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002804:	493a      	ldr	r1, [pc, #232]	; (80028f0 <HAL_GPIO_Init+0x29c>)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	3302      	adds	r3, #2
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800281e:	4b39      	ldr	r3, [pc, #228]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4938      	ldr	r1, [pc, #224]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
 800282a:	e006      	b.n	800283a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800282c:	4b35      	ldr	r3, [pc, #212]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	43db      	mvns	r3, r3
 8002834:	4933      	ldr	r1, [pc, #204]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 8002836:	4013      	ands	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002846:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	492e      	ldr	r1, [pc, #184]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	e006      	b.n	8002862 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	43db      	mvns	r3, r3
 800285c:	4929      	ldr	r1, [pc, #164]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 800285e:	4013      	ands	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d006      	beq.n	800287c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	4924      	ldr	r1, [pc, #144]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
 800287a:	e006      	b.n	800288a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800287c:	4b21      	ldr	r3, [pc, #132]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	43db      	mvns	r3, r3
 8002884:	491f      	ldr	r1, [pc, #124]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 8002886:	4013      	ands	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	491a      	ldr	r1, [pc, #104]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60cb      	str	r3, [r1, #12]
 80028a2:	e006      	b.n	80028b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	4915      	ldr	r1, [pc, #84]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f47f aed0 	bne.w	8002668 <HAL_GPIO_Init+0x14>
  }
}
 80028c8:	bf00      	nop
 80028ca:	372c      	adds	r7, #44	; 0x2c
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	10210000 	.word	0x10210000
 80028d8:	10110000 	.word	0x10110000
 80028dc:	10120000 	.word	0x10120000
 80028e0:	10310000 	.word	0x10310000
 80028e4:	10320000 	.word	0x10320000
 80028e8:	10220000 	.word	0x10220000
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40010800 	.word	0x40010800
 80028f8:	40010c00 	.word	0x40010c00
 80028fc:	40011000 	.word	0x40011000
 8002900:	40011400 	.word	0x40011400
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e001      	b.n	800292a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	807b      	strh	r3, [r7, #2]
 8002942:	4613      	mov	r3, r2
 8002944:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002946:	787b      	ldrb	r3, [r7, #1]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294c:	887a      	ldrh	r2, [r7, #2]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002952:	e003      	b.n	800295c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	041a      	lsls	r2, r3, #16
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	611a      	str	r2, [r3, #16]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
	...

08002968 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_PWR_EnableBkUpAccess+0x14>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	420e0020 	.word	0x420e0020

08002980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e26c      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8087 	beq.w	8002aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a0:	4b92      	ldr	r3, [pc, #584]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d00c      	beq.n	80029c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ac:	4b8f      	ldr	r3, [pc, #572]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d112      	bne.n	80029de <HAL_RCC_OscConfig+0x5e>
 80029b8:	4b8c      	ldr	r3, [pc, #560]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c4:	d10b      	bne.n	80029de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c6:	4b89      	ldr	r3, [pc, #548]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d06c      	beq.n	8002aac <HAL_RCC_OscConfig+0x12c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d168      	bne.n	8002aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e246      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x76>
 80029e8:	4b80      	ldr	r3, [pc, #512]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a7f      	ldr	r2, [pc, #508]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e02e      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x98>
 80029fe:	4b7b      	ldr	r3, [pc, #492]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a7a      	ldr	r2, [pc, #488]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b78      	ldr	r3, [pc, #480]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a77      	ldr	r2, [pc, #476]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0xbc>
 8002a22:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a71      	ldr	r2, [pc, #452]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b6f      	ldr	r3, [pc, #444]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a6e      	ldr	r2, [pc, #440]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 8002a3c:	4b6b      	ldr	r3, [pc, #428]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a6a      	ldr	r2, [pc, #424]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a67      	ldr	r2, [pc, #412]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fcea 	bl	8002434 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff fce6 	bl	8002434 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1fa      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	4b5d      	ldr	r3, [pc, #372]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xe4>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7ff fcd6 	bl	8002434 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7ff fcd2 	bl	8002434 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1e6      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x10c>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d063      	beq.n	8002b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aba:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ac6:	4b49      	ldr	r3, [pc, #292]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x18c>
 8002ad2:	4b46      	ldr	r3, [pc, #280]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x176>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1ba      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4939      	ldr	r1, [pc, #228]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7ff fc8b 	bl	8002434 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7ff fc87 	bl	8002434 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e19b      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4927      	ldr	r1, [pc, #156]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7ff fc6a 	bl	8002434 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b64:	f7ff fc66 	bl	8002434 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e17a      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d03a      	beq.n	8002c04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d019      	beq.n	8002bca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_RCC_OscConfig+0x274>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9c:	f7ff fc4a 	bl	8002434 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7ff fc46 	bl	8002434 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e15a      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	f000 fada 	bl	800317c <RCC_Delay>
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd0:	f7ff fc30 	bl	8002434 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd6:	e00f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7ff fc2c 	bl	8002434 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d908      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e140      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	42420000 	.word	0x42420000
 8002bf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	4b9e      	ldr	r3, [pc, #632]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e9      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a6 	beq.w	8002d5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c16:	4b97      	ldr	r3, [pc, #604]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10d      	bne.n	8002c3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	4b94      	ldr	r3, [pc, #592]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	4a93      	ldr	r2, [pc, #588]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	61d3      	str	r3, [r2, #28]
 8002c2e:	4b91      	ldr	r3, [pc, #580]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b8e      	ldr	r3, [pc, #568]	; (8002e78 <HAL_RCC_OscConfig+0x4f8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b8b      	ldr	r3, [pc, #556]	; (8002e78 <HAL_RCC_OscConfig+0x4f8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a8a      	ldr	r2, [pc, #552]	; (8002e78 <HAL_RCC_OscConfig+0x4f8>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7ff fbed 	bl	8002434 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7ff fbe9 	bl	8002434 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b64      	cmp	r3, #100	; 0x64
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0fd      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <HAL_RCC_OscConfig+0x4f8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x312>
 8002c84:	4b7b      	ldr	r3, [pc, #492]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a7a      	ldr	r2, [pc, #488]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	e02d      	b.n	8002cee <HAL_RCC_OscConfig+0x36e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x334>
 8002c9a:	4b76      	ldr	r3, [pc, #472]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a75      	ldr	r2, [pc, #468]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6213      	str	r3, [r2, #32]
 8002ca6:	4b73      	ldr	r3, [pc, #460]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4a72      	ldr	r2, [pc, #456]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	6213      	str	r3, [r2, #32]
 8002cb2:	e01c      	b.n	8002cee <HAL_RCC_OscConfig+0x36e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x356>
 8002cbc:	4b6d      	ldr	r3, [pc, #436]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a6c      	ldr	r2, [pc, #432]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a69      	ldr	r2, [pc, #420]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6213      	str	r3, [r2, #32]
 8002cd4:	e00b      	b.n	8002cee <HAL_RCC_OscConfig+0x36e>
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a66      	ldr	r2, [pc, #408]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6213      	str	r3, [r2, #32]
 8002ce2:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a63      	ldr	r2, [pc, #396]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	f023 0304 	bic.w	r3, r3, #4
 8002cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d015      	beq.n	8002d22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf6:	f7ff fb9d 	bl	8002434 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7ff fb99 	bl	8002434 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e0ab      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	4b57      	ldr	r3, [pc, #348]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ee      	beq.n	8002cfe <HAL_RCC_OscConfig+0x37e>
 8002d20:	e014      	b.n	8002d4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d22:	f7ff fb87 	bl	8002434 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7ff fb83 	bl	8002434 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e095      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d40:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ee      	bne.n	8002d2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d52:	4b48      	ldr	r3, [pc, #288]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4a47      	ldr	r2, [pc, #284]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8081 	beq.w	8002e6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d68:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 030c 	and.w	r3, r3, #12
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d061      	beq.n	8002e38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d146      	bne.n	8002e0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCC_OscConfig+0x4fc>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7ff fb57 	bl	8002434 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7ff fb53 	bl	8002434 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e067      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9c:	4b35      	ldr	r3, [pc, #212]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db0:	d108      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002db2:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	492d      	ldr	r1, [pc, #180]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc4:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a19      	ldr	r1, [r3, #32]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	4927      	ldr	r1, [pc, #156]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ddc:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <HAL_RCC_OscConfig+0x4fc>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7ff fb27 	bl	8002434 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dea:	f7ff fb23 	bl	8002434 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e037      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x46a>
 8002e08:	e02f      	b.n	8002e6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <HAL_RCC_OscConfig+0x4fc>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff fb10 	bl	8002434 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7ff fb0c 	bl	8002434 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e020      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x498>
 8002e36:	e018      	b.n	8002e6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e013      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCC_OscConfig+0x4f4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d001      	beq.n	8002e6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	42420060 	.word	0x42420060

08002e80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0d0      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d910      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b67      	ldr	r3, [pc, #412]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 0207 	bic.w	r2, r3, #7
 8002eaa:	4965      	ldr	r1, [pc, #404]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b63      	ldr	r3, [pc, #396]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0b8      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002edc:	4b59      	ldr	r3, [pc, #356]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a58      	ldr	r2, [pc, #352]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ee6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef4:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002efe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b50      	ldr	r3, [pc, #320]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	494d      	ldr	r1, [pc, #308]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d040      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d115      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e07f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e073      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06b      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5e:	4b39      	ldr	r3, [pc, #228]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4936      	ldr	r1, [pc, #216]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f70:	f7ff fa60 	bl	8002434 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7ff fa5c 	bl	8002434 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e053      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d210      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 0207 	bic.w	r2, r3, #7
 8002fb6:	4922      	ldr	r1, [pc, #136]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e032      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4916      	ldr	r1, [pc, #88]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	490e      	ldr	r1, [pc, #56]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800300e:	f000 f821 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8003012:	4601      	mov	r1, r0
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	5cd3      	ldrb	r3, [r2, r3]
 8003022:	fa21 f303 	lsr.w	r3, r1, r3
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1cc>)
 8003028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_RCC_ClockConfig+0x1d0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f9be 	bl	80023b0 <HAL_InitTick>

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40022000 	.word	0x40022000
 8003044:	40021000 	.word	0x40021000
 8003048:	080071f4 	.word	0x080071f4
 800304c:	20000000 	.word	0x20000000
 8003050:	20000004 	.word	0x20000004

08003054 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	b490      	push	{r4, r7}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800305a:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <HAL_RCC_GetSysClockFreq+0xb0>)
 800305c:	1d3c      	adds	r4, r7, #4
 800305e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003064:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800307e:	4b23      	ldr	r3, [pc, #140]	; (800310c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b04      	cmp	r3, #4
 800308c:	d002      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x40>
 800308e:	2b08      	cmp	r3, #8
 8003090:	d003      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x46>
 8003092:	e02d      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003094:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003096:	623b      	str	r3, [r7, #32]
      break;
 8003098:	e02d      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	0c9b      	lsrs	r3, r3, #18
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030a6:	4413      	add	r3, r2
 80030a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030b8:	4b14      	ldr	r3, [pc, #80]	; (800310c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c5b      	lsrs	r3, r3, #17
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030c6:	4413      	add	r3, r2
 80030c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030d2:	fb02 f203 	mul.w	r2, r2, r3
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
 80030de:	e004      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	623b      	str	r3, [r7, #32]
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030f2:	623b      	str	r3, [r7, #32]
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	6a3b      	ldr	r3, [r7, #32]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3728      	adds	r7, #40	; 0x28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc90      	pop	{r4, r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	08006fec 	.word	0x08006fec
 8003108:	08006ffc 	.word	0x08006ffc
 800310c:	40021000 	.word	0x40021000
 8003110:	007a1200 	.word	0x007a1200
 8003114:	003d0900 	.word	0x003d0900

08003118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <HAL_RCC_GetHCLKFreq+0x10>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	20000000 	.word	0x20000000

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003130:	f7ff fff2 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003134:	4601      	mov	r1, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4a03      	ldr	r2, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	08007204 	.word	0x08007204

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003158:	f7ff ffde 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 800315c:	4601      	mov	r1, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0adb      	lsrs	r3, r3, #11
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4a03      	ldr	r2, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	08007204 	.word	0x08007204

0800317c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <RCC_Delay+0x34>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <RCC_Delay+0x38>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003198:	bf00      	nop
  }
  while (Delay --);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f9      	bne.n	8003198 <RCC_Delay+0x1c>
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d07d      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d8:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e4:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	4a4b      	ldr	r2, [pc, #300]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ee:	61d3      	str	r3, [r2, #28]
 80031f0:	4b49      	ldr	r3, [pc, #292]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d118      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a42      	ldr	r2, [pc, #264]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003218:	f7ff f90c 	bl	8002434 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	e008      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003220:	f7ff f908 	bl	8002434 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e06d      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003232:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800323e:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003246:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d02e      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d027      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800325c:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003264:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003268:	2201      	movs	r2, #1
 800326a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800326c:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003272:	4a29      	ldr	r2, [pc, #164]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d014      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003282:	f7ff f8d7 	bl	8002434 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003288:	e00a      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7ff f8d3 	bl	8002434 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e036      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ee      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4917      	ldr	r1, [pc, #92]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	4a13      	ldr	r2, [pc, #76]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	490b      	ldr	r1, [pc, #44]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032fa:	4b07      	ldr	r3, [pc, #28]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4904      	ldr	r1, [pc, #16]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	40007000 	.word	0x40007000
 8003320:	42420440 	.word	0x42420440

08003324 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b08d      	sub	sp, #52	; 0x34
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800332c:	4b55      	ldr	r3, [pc, #340]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800332e:	f107 040c 	add.w	r4, r7, #12
 8003332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003338:	4b53      	ldr	r3, [pc, #332]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	2300      	movs	r3, #0
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	2300      	movs	r3, #0
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d07f      	beq.n	8003458 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003358:	2b10      	cmp	r3, #16
 800335a:	d002      	beq.n	8003362 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800335c:	2b01      	cmp	r3, #1
 800335e:	d048      	beq.n	80033f2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003360:	e08b      	b.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003362:	4b4a      	ldr	r3, [pc, #296]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003368:	4b48      	ldr	r3, [pc, #288]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d07f      	beq.n	8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	0c9b      	lsrs	r3, r3, #18
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003380:	4413      	add	r3, r2
 8003382:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003386:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d018      	beq.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003392:	4b3e      	ldr	r3, [pc, #248]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0c5b      	lsrs	r3, r3, #17
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80033a0:	4413      	add	r3, r2
 80033a2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033b2:	4a37      	ldr	r2, [pc, #220]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	fb02 f303 	mul.w	r3, r2, r3
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c2:	e004      	b.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	4a33      	ldr	r2, [pc, #204]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80033c8:	fb02 f303 	mul.w	r3, r2, r3
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80033ce:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033da:	d102      	bne.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80033e0:	e048      	b.n	8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4a2c      	ldr	r2, [pc, #176]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80033f0:	e040      	b.n	8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	d108      	bne.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800340e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
 8003414:	e01f      	b.n	8003456 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003420:	d109      	bne.n	8003436 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003422:	4b1a      	ldr	r3, [pc, #104]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800342e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28
 8003434:	e00f      	b.n	8003456 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003440:	d11a      	bne.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d014      	beq.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800344e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003454:	e010      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003456:	e00f      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003458:	f7ff fe7c 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	0b9b      	lsrs	r3, r3, #14
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	3301      	adds	r3, #1
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003472:	e002      	b.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003474:	bf00      	nop
 8003476:	e000      	b.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003478:	bf00      	nop
    }
  }
  return (frequency);
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800347c:	4618      	mov	r0, r3
 800347e:	3734      	adds	r7, #52	; 0x34
 8003480:	46bd      	mov	sp, r7
 8003482:	bd90      	pop	{r4, r7, pc}
 8003484:	08007000 	.word	0x08007000
 8003488:	08007010 	.word	0x08007010
 800348c:	40021000 	.word	0x40021000
 8003490:	007a1200 	.word	0x007a1200
 8003494:	003d0900 	.word	0x003d0900
 8003498:	aaaaaaab 	.word	0xaaaaaaab

0800349c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e084      	b.n	80035bc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7c5b      	ldrb	r3, [r3, #17]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe fcea 	bl	8001e9c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 faf4 	bl	8003abc <HAL_RTC_WaitForSynchro>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d004      	beq.n	80034e4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2204      	movs	r2, #4
 80034de:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e06b      	b.n	80035bc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fbad 	bl	8003c44 <RTC_EnterInitMode>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2204      	movs	r2, #4
 80034f4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e060      	b.n	80035bc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0207 	bic.w	r2, r2, #7
 8003508:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003512:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <HAL_RTC_Init+0x128>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a2b      	ldr	r2, [pc, #172]	; (80035c4 <HAL_RTC_Init+0x128>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800351e:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RTC_Init+0x128>)
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4926      	ldr	r1, [pc, #152]	; (80035c4 <HAL_RTC_Init+0x128>)
 800352c:	4313      	orrs	r3, r2
 800352e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d003      	beq.n	8003542 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e00e      	b.n	8003560 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003542:	2001      	movs	r0, #1
 8003544:	f7ff feee 	bl	8003324 <HAL_RCCEx_GetPeriphCLKFreq>
 8003548:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d104      	bne.n	800355a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2204      	movs	r2, #4
 8003554:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e030      	b.n	80035bc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3b01      	subs	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 010f 	bic.w	r1, r3, #15
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	0c1a      	lsrs	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	b291      	uxth	r1, r2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	430b      	orrs	r3, r1
 800358a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fb81 	bl	8003c94 <RTC_ExitInitMode>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2204      	movs	r2, #4
 800359c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e00c      	b.n	80035bc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80035ba:	2300      	movs	r3, #0
  }
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40006c00 	.word	0x40006c00

080035c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_RTC_SetTime+0x20>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e080      	b.n	80036ee <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	7c1b      	ldrb	r3, [r3, #16]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_RTC_SetTime+0x30>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e07a      	b.n	80036ee <HAL_RTC_SetTime+0x126>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2202      	movs	r2, #2
 8003602:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d113      	bne.n	8003632 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003614:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	785b      	ldrb	r3, [r3, #1]
 800361c:	4619      	mov	r1, r3
 800361e:	460b      	mov	r3, r1
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a5b      	subs	r3, r3, r1
 8003624:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003626:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800362c:	4413      	add	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e01e      	b.n	8003670 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fb71 	bl	8003d1e <RTC_Bcd2ToByte>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003644:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fb66 	bl	8003d1e <RTC_Bcd2ToByte>
 8003652:	4603      	mov	r3, r0
 8003654:	461a      	mov	r2, r3
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800365e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	789b      	ldrb	r3, [r3, #2]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fb5a 	bl	8003d1e <RTC_Bcd2ToByte>
 800366a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800366c:	4423      	add	r3, r4
 800366e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003670:	6979      	ldr	r1, [r7, #20]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa7f 	bl	8003b76 <RTC_WriteTimeCounter>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2204      	movs	r2, #4
 8003682:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e02f      	b.n	80036ee <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0205 	bic.w	r2, r2, #5
 800369c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fa90 	bl	8003bc4 <RTC_ReadAlarmCounter>
 80036a4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d018      	beq.n	80036e0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d214      	bcs.n	80036e0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80036bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80036c0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80036c2:	6939      	ldr	r1, [r7, #16]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fa96 	bl	8003bf6 <RTC_WriteAlarmCounter>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d007      	beq.n	80036e0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2204      	movs	r2, #4
 80036d4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e006      	b.n	80036ee <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80036ec:	2300      	movs	r3, #0
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd90      	pop	{r4, r7, pc}
	...

080036f8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_RTC_GetTime+0x28>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0b5      	b.n	8003890 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0ac      	b.n	8003890 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f9ed 	bl	8003b16 <RTC_ReadTimeCounter>
 800373c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4a55      	ldr	r2, [pc, #340]	; (8003898 <HAL_RTC_GetTime+0x1a0>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0adb      	lsrs	r3, r3, #11
 8003748:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4b52      	ldr	r3, [pc, #328]	; (8003898 <HAL_RTC_GetTime+0x1a0>)
 800374e:	fba3 1302 	umull	r1, r3, r3, r2
 8003752:	0adb      	lsrs	r3, r3, #11
 8003754:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	4a4f      	ldr	r2, [pc, #316]	; (800389c <HAL_RTC_GetTime+0x1a4>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4a4a      	ldr	r2, [pc, #296]	; (8003898 <HAL_RTC_GetTime+0x1a0>)
 8003770:	fba2 1203 	umull	r1, r2, r2, r3
 8003774:	0ad2      	lsrs	r2, r2, #11
 8003776:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800377a:	fb01 f202 	mul.w	r2, r1, r2
 800377e:	1a9a      	subs	r2, r3, r2
 8003780:	4b46      	ldr	r3, [pc, #280]	; (800389c <HAL_RTC_GetTime+0x1a4>)
 8003782:	fba3 1302 	umull	r1, r3, r3, r2
 8003786:	0959      	lsrs	r1, r3, #5
 8003788:	460b      	mov	r3, r1
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a5b      	subs	r3, r3, r1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	1ad1      	subs	r1, r2, r3
 8003792:	b2ca      	uxtb	r2, r1
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b17      	cmp	r3, #23
 800379c:	d955      	bls.n	800384a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4a3f      	ldr	r2, [pc, #252]	; (80038a0 <HAL_RTC_GetTime+0x1a8>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80037aa:	6939      	ldr	r1, [r7, #16]
 80037ac:	4b3c      	ldr	r3, [pc, #240]	; (80038a0 <HAL_RTC_GetTime+0x1a8>)
 80037ae:	fba3 2301 	umull	r2, r3, r3, r1
 80037b2:	091a      	lsrs	r2, r3, #4
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1aca      	subs	r2, r1, r3
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f9fd 	bl	8003bc4 <RTC_ReadAlarmCounter>
 80037ca:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d008      	beq.n	80037e6 <HAL_RTC_GetTime+0xee>
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d904      	bls.n	80037e6 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	e002      	b.n	80037ec <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ea:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <HAL_RTC_GetTime+0x1ac>)
 80037f0:	fb02 f303 	mul.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80037fa:	69b9      	ldr	r1, [r7, #24]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f9ba 	bl	8003b76 <RTC_WriteTimeCounter>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e041      	b.n	8003890 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	d00c      	beq.n	800382e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	4413      	add	r3, r2
 800381a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800381c:	69f9      	ldr	r1, [r7, #28]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f9e9 	bl	8003bf6 <RTC_WriteAlarmCounter>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e030      	b.n	8003890 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800382e:	69f9      	ldr	r1, [r7, #28]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f9e0 	bl	8003bf6 <RTC_WriteAlarmCounter>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e027      	b.n	8003890 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003840:	6979      	ldr	r1, [r7, #20]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fa88 	bl	8003d58 <RTC_DateUpdate>
 8003848:	e003      	b.n	8003852 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01a      	beq.n	800388e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fa41 	bl	8003ce4 <RTC_ByteToBcd2>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fa38 	bl	8003ce4 <RTC_ByteToBcd2>
 8003874:	4603      	mov	r3, r0
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	789b      	ldrb	r3, [r3, #2]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fa2f 	bl	8003ce4 <RTC_ByteToBcd2>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	91a2b3c5 	.word	0x91a2b3c5
 800389c:	88888889 	.word	0x88888889
 80038a0:	aaaaaaab 	.word	0xaaaaaaab
 80038a4:	00015180 	.word	0x00015180

080038a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_RTC_SetDate+0x24>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e097      	b.n	8003a00 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	7c1b      	ldrb	r3, [r3, #16]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_RTC_SetDate+0x34>
 80038d8:	2302      	movs	r3, #2
 80038da:	e091      	b.n	8003a00 <HAL_RTC_SetDate+0x158>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2202      	movs	r2, #2
 80038e6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10c      	bne.n	8003908 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	78da      	ldrb	r2, [r3, #3]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	785a      	ldrb	r2, [r3, #1]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	789a      	ldrb	r2, [r3, #2]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	739a      	strb	r2, [r3, #14]
 8003906:	e01a      	b.n	800393e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	78db      	ldrb	r3, [r3, #3]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fa06 	bl	8003d1e <RTC_Bcd2ToByte>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f9fd 	bl	8003d1e <RTC_Bcd2ToByte>
 8003924:	4603      	mov	r3, r0
 8003926:	461a      	mov	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	789b      	ldrb	r3, [r3, #2]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f9f4 	bl	8003d1e <RTC_Bcd2ToByte>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	7bdb      	ldrb	r3, [r3, #15]
 8003942:	4618      	mov	r0, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	7b59      	ldrb	r1, [r3, #13]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	7b9b      	ldrb	r3, [r3, #14]
 800394c:	461a      	mov	r2, r3
 800394e:	f000 fadf 	bl	8003f10 <RTC_WeekDayNum>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	7b1a      	ldrb	r2, [r3, #12]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f8d7 	bl	8003b16 <RTC_ReadTimeCounter>
 8003968:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4a26      	ldr	r2, [pc, #152]	; (8003a08 <HAL_RTC_SetDate+0x160>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0adb      	lsrs	r3, r3, #11
 8003974:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b18      	cmp	r3, #24
 800397a:	d93a      	bls.n	80039f2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <HAL_RTC_SetDate+0x164>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <HAL_RTC_SetDate+0x168>)
 8003988:	fb02 f303 	mul.w	r3, r2, r3
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003992:	69f9      	ldr	r1, [r7, #28]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f8ee 	bl	8003b76 <RTC_WriteTimeCounter>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2204      	movs	r2, #4
 80039a4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e027      	b.n	8003a00 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f907 	bl	8003bc4 <RTC_ReadAlarmCounter>
 80039b6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d018      	beq.n	80039f2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d214      	bcs.n	80039f2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80039ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80039d2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f90d 	bl	8003bf6 <RTC_WriteAlarmCounter>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2204      	movs	r2, #4
 80039e6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e006      	b.n	8003a00 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	91a2b3c5 	.word	0x91a2b3c5
 8003a0c:	aaaaaaab 	.word	0xaaaaaaab
 8003a10:	00015180 	.word	0x00015180

08003a14 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003a20:	f107 0314 	add.w	r3, r7, #20
 8003a24:	2100      	movs	r1, #0
 8003a26:	460a      	mov	r2, r1
 8003a28:	801a      	strh	r2, [r3, #0]
 8003a2a:	460a      	mov	r2, r1
 8003a2c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_RTC_GetDate+0x26>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e03a      	b.n	8003ab4 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003a3e:	f107 0314 	add.w	r3, r7, #20
 8003a42:	2200      	movs	r2, #0
 8003a44:	4619      	mov	r1, r3
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7ff fe56 	bl	80036f8 <HAL_RTC_GetTime>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e02e      	b.n	8003ab4 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	7b1a      	ldrb	r2, [r3, #12]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	7bda      	ldrb	r2, [r3, #15]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	7b5a      	ldrb	r2, [r3, #13]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	7b9a      	ldrb	r2, [r3, #14]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01a      	beq.n	8003ab2 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	78db      	ldrb	r3, [r3, #3]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f92f 	bl	8003ce4 <RTC_ByteToBcd2>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	785b      	ldrb	r3, [r3, #1]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f926 	bl	8003ce4 <RTC_ByteToBcd2>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	789b      	ldrb	r3, [r3, #2]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 f91d 	bl	8003ce4 <RTC_ByteToBcd2>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e01d      	b.n	8003b0e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0208 	bic.w	r2, r2, #8
 8003ae0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003ae2:	f7fe fca7 	bl	8002434 <HAL_GetTick>
 8003ae6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003ae8:	e009      	b.n	8003afe <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003aea:	f7fe fca3 	bl	8002434 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003af8:	d901      	bls.n	8003afe <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e007      	b.n	8003b0e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0ee      	beq.n	8003aea <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	827b      	strh	r3, [r7, #18]
 8003b22:	2300      	movs	r3, #0
 8003b24:	823b      	strh	r3, [r7, #16]
 8003b26:	2300      	movs	r3, #0
 8003b28:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003b46:	8a7a      	ldrh	r2, [r7, #18]
 8003b48:	8a3b      	ldrh	r3, [r7, #16]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d008      	beq.n	8003b60 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003b4e:	8a3b      	ldrh	r3, [r7, #16]
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e004      	b.n	8003b6a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003b60:	8a7b      	ldrh	r3, [r7, #18]
 8003b62:	041a      	lsls	r2, r3, #16
 8003b64:	89fb      	ldrh	r3, [r7, #14]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003b6a:	697b      	ldr	r3, [r7, #20]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f85d 	bl	8003c44 <RTC_EnterInitMode>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e011      	b.n	8003bba <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	0c12      	lsrs	r2, r2, #16
 8003b9e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	b292      	uxth	r2, r2
 8003ba8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f872 	bl	8003c94 <RTC_ExitInitMode>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	81fb      	strh	r3, [r7, #14]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003be4:	89fb      	ldrh	r3, [r7, #14]
 8003be6:	041a      	lsls	r2, r3, #16
 8003be8:	89bb      	ldrh	r3, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f81d 	bl	8003c44 <RTC_EnterInitMode>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
 8003c14:	e011      	b.n	8003c3a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	0c12      	lsrs	r2, r2, #16
 8003c1e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	b292      	uxth	r2, r2
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f832 	bl	8003c94 <RTC_ExitInitMode>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003c50:	f7fe fbf0 	bl	8002434 <HAL_GetTick>
 8003c54:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c56:	e009      	b.n	8003c6c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c58:	f7fe fbec 	bl	8002434 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c66:	d901      	bls.n	8003c6c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e00f      	b.n	8003c8c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0ee      	beq.n	8003c58 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0210 	orr.w	r2, r2, #16
 8003c88:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0210 	bic.w	r2, r2, #16
 8003cae:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003cb0:	f7fe fbc0 	bl	8002434 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003cb6:	e009      	b.n	8003ccc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003cb8:	f7fe fbbc 	bl	8002434 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc6:	d901      	bls.n	8003ccc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e007      	b.n	8003cdc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0ee      	beq.n	8003cb8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003cf2:	e005      	b.n	8003d00 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	3b0a      	subs	r3, #10
 8003cfe:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	2b09      	cmp	r3, #9
 8003d04:	d8f6      	bhi.n	8003cf4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	b2db      	uxtb	r3, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	4603      	mov	r3, r0
 8003d26:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	b2db      	uxtb	r3, r3
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7bdb      	ldrb	r3, [r3, #15]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	7b5b      	ldrb	r3, [r3, #13]
 8003d7c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7b9b      	ldrb	r3, [r3, #14]
 8003d82:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003d84:	2300      	movs	r3, #0
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	e06f      	b.n	8003e6a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d011      	beq.n	8003db4 <RTC_DateUpdate+0x5c>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d00e      	beq.n	8003db4 <RTC_DateUpdate+0x5c>
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d00b      	beq.n	8003db4 <RTC_DateUpdate+0x5c>
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b07      	cmp	r3, #7
 8003da0:	d008      	beq.n	8003db4 <RTC_DateUpdate+0x5c>
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d005      	beq.n	8003db4 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	2b0a      	cmp	r3, #10
 8003dac:	d002      	beq.n	8003db4 <RTC_DateUpdate+0x5c>
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	d117      	bne.n	8003de4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b1e      	cmp	r3, #30
 8003db8:	d803      	bhi.n	8003dc2 <RTC_DateUpdate+0x6a>
      {
        day++;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003dc0:	e050      	b.n	8003e64 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	d005      	beq.n	8003dd4 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003dd2:	e047      	b.n	8003e64 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
          year++;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3301      	adds	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003de2:	e03f      	b.n	8003e64 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d008      	beq.n	8003dfc <RTC_DateUpdate+0xa4>
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b06      	cmp	r3, #6
 8003dee:	d005      	beq.n	8003dfc <RTC_DateUpdate+0xa4>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b09      	cmp	r3, #9
 8003df4:	d002      	beq.n	8003dfc <RTC_DateUpdate+0xa4>
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b0b      	cmp	r3, #11
 8003dfa:	d10c      	bne.n	8003e16 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b1d      	cmp	r3, #29
 8003e00:	d803      	bhi.n	8003e0a <RTC_DateUpdate+0xb2>
      {
        day++;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3301      	adds	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003e08:	e02c      	b.n	8003e64 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003e10:	2301      	movs	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003e14:	e026      	b.n	8003e64 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d123      	bne.n	8003e64 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b1b      	cmp	r3, #27
 8003e20:	d803      	bhi.n	8003e2a <RTC_DateUpdate+0xd2>
      {
        day++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3301      	adds	r3, #1
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e01c      	b.n	8003e64 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b1c      	cmp	r3, #28
 8003e2e:	d111      	bne.n	8003e54 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f839 	bl	8003eac <RTC_IsLeapYear>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3301      	adds	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	e00d      	b.n	8003e64 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	e007      	b.n	8003e64 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b1d      	cmp	r3, #29
 8003e58:	d104      	bne.n	8003e64 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003e60:	2301      	movs	r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d38b      	bcc.n	8003d8a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	6978      	ldr	r0, [r7, #20]
 8003e96:	f000 f83b 	bl	8003f10 <RTC_WeekDayNum>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	731a      	strb	r2, [r3, #12]
}
 8003ea2:	bf00      	nop
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e01d      	b.n	8003f02 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <RTC_IsLeapYear+0x60>)
 8003eca:	fba2 1203 	umull	r1, r2, r2, r3
 8003ece:	0952      	lsrs	r2, r2, #5
 8003ed0:	2164      	movs	r1, #100	; 0x64
 8003ed2:	fb01 f202 	mul.w	r2, r1, r2
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e00f      	b.n	8003f02 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <RTC_IsLeapYear+0x60>)
 8003ee6:	fba2 1203 	umull	r1, r2, r2, r3
 8003eea:	09d2      	lsrs	r2, r2, #7
 8003eec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003ef0:	fb01 f202 	mul.w	r2, r1, r2
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003f00:	2300      	movs	r3, #0
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	51eb851f 	.word	0x51eb851f

08003f10 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003f2e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d82d      	bhi.n	8003f92 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <RTC_WeekDayNum+0xe4>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	085a      	lsrs	r2, r3, #1
 8003f4a:	78bb      	ldrb	r3, [r7, #2]
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	441a      	add	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	441a      	add	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	4926      	ldr	r1, [pc, #152]	; (8003ff8 <RTC_WeekDayNum+0xe8>)
 8003f60:	fba1 1303 	umull	r1, r3, r1, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	1ad2      	subs	r2, r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	4922      	ldr	r1, [pc, #136]	; (8003ff8 <RTC_WeekDayNum+0xe8>)
 8003f6e:	fba1 1303 	umull	r1, r3, r1, r3
 8003f72:	09db      	lsrs	r3, r3, #7
 8003f74:	4413      	add	r3, r2
 8003f76:	1d1a      	adds	r2, r3, #4
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <RTC_WeekDayNum+0xec>)
 8003f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7e:	1ad1      	subs	r1, r2, r3
 8003f80:	0849      	lsrs	r1, r1, #1
 8003f82:	440b      	add	r3, r1
 8003f84:	0899      	lsrs	r1, r3, #2
 8003f86:	460b      	mov	r3, r1
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	1a5b      	subs	r3, r3, r1
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e029      	b.n	8003fe6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <RTC_WeekDayNum+0xe4>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	085a      	lsrs	r2, r3, #1
 8003fa6:	78bb      	ldrb	r3, [r7, #2]
 8003fa8:	441a      	add	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	441a      	add	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	089b      	lsrs	r3, r3, #2
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4910      	ldr	r1, [pc, #64]	; (8003ff8 <RTC_WeekDayNum+0xe8>)
 8003fb8:	fba1 1303 	umull	r1, r3, r1, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	1ad2      	subs	r2, r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	490d      	ldr	r1, [pc, #52]	; (8003ff8 <RTC_WeekDayNum+0xe8>)
 8003fc4:	fba1 1303 	umull	r1, r3, r1, r3
 8003fc8:	09db      	lsrs	r3, r3, #7
 8003fca:	4413      	add	r3, r2
 8003fcc:	1c9a      	adds	r2, r3, #2
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <RTC_WeekDayNum+0xec>)
 8003fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd4:	1ad1      	subs	r1, r2, r3
 8003fd6:	0849      	lsrs	r1, r1, #1
 8003fd8:	440b      	add	r3, r1
 8003fda:	0899      	lsrs	r1, r3, #2
 8003fdc:	460b      	mov	r3, r1
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	1a5b      	subs	r3, r3, r1
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	b2db      	uxtb	r3, r3
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr
 8003ff4:	38e38e39 	.word	0x38e38e39
 8003ff8:	51eb851f 	.word	0x51eb851f
 8003ffc:	24924925 	.word	0x24924925

08004000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e076      	b.n	8004100 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d108      	bne.n	800402c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004022:	d009      	beq.n	8004038 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	61da      	str	r2, [r3, #28]
 800402a:	e005      	b.n	8004038 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fd ff7c 	bl	8001f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040bc:	ea42 0103 	orr.w	r1, r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	0c1a      	lsrs	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f002 0204 	and.w	r2, r2, #4
 80040de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_SPI_Transmit+0x22>
 8004126:	2302      	movs	r3, #2
 8004128:	e126      	b.n	8004378 <HAL_SPI_Transmit+0x270>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004132:	f7fe f97f 	bl	8002434 <HAL_GetTick>
 8004136:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004138:	88fb      	ldrh	r3, [r7, #6]
 800413a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d002      	beq.n	800414e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004148:	2302      	movs	r3, #2
 800414a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800414c:	e10b      	b.n	8004366 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_SPI_Transmit+0x52>
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800415e:	e102      	b.n	8004366 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2203      	movs	r2, #3
 8004164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	88fa      	ldrh	r2, [r7, #6]
 8004178:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	88fa      	ldrh	r2, [r7, #6]
 800417e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a6:	d10f      	bne.n	80041c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d007      	beq.n	80041e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ee:	d14b      	bne.n	8004288 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_SPI_Transmit+0xf6>
 80041f8:	8afb      	ldrh	r3, [r7, #22]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d13e      	bne.n	800427c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	881a      	ldrh	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	1c9a      	adds	r2, r3, #2
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004222:	e02b      	b.n	800427c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d112      	bne.n	8004258 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	881a      	ldrh	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	1c9a      	adds	r2, r3, #2
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	86da      	strh	r2, [r3, #54]	; 0x36
 8004256:	e011      	b.n	800427c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004258:	f7fe f8ec 	bl	8002434 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d803      	bhi.n	8004270 <HAL_SPI_Transmit+0x168>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d102      	bne.n	8004276 <HAL_SPI_Transmit+0x16e>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	77fb      	strb	r3, [r7, #31]
          goto error;
 800427a:	e074      	b.n	8004366 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ce      	bne.n	8004224 <HAL_SPI_Transmit+0x11c>
 8004286:	e04c      	b.n	8004322 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_SPI_Transmit+0x18e>
 8004290:	8afb      	ldrh	r3, [r7, #22]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d140      	bne.n	8004318 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	7812      	ldrb	r2, [r2, #0]
 80042a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042bc:	e02c      	b.n	8004318 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d113      	bne.n	80042f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80042f2:	e011      	b.n	8004318 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f4:	f7fe f89e 	bl	8002434 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d803      	bhi.n	800430c <HAL_SPI_Transmit+0x204>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d102      	bne.n	8004312 <HAL_SPI_Transmit+0x20a>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004316:	e026      	b.n	8004366 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1cd      	bne.n	80042be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	6839      	ldr	r1, [r7, #0]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 f8b2 	bl	8004490 <SPI_EndRxTxTransaction>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	77fb      	strb	r3, [r7, #31]
 8004362:	e000      	b.n	8004366 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004364:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004376:	7ffb      	ldrb	r3, [r7, #31]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004390:	f7fe f850 	bl	8002434 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	4413      	add	r3, r2
 800439e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043a0:	f7fe f848 	bl	8002434 <HAL_GetTick>
 80043a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043a6:	4b39      	ldr	r3, [pc, #228]	; (800448c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	015b      	lsls	r3, r3, #5
 80043ac:	0d1b      	lsrs	r3, r3, #20
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	fb02 f303 	mul.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043b6:	e054      	b.n	8004462 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d050      	beq.n	8004462 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043c0:	f7fe f838 	bl	8002434 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d902      	bls.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d13d      	bne.n	8004452 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ee:	d111      	bne.n	8004414 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f8:	d004      	beq.n	8004404 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004402:	d107      	bne.n	8004414 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004412:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441c:	d10f      	bne.n	800443e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800443c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e017      	b.n	8004482 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3b01      	subs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4013      	ands	r3, r2
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	bf0c      	ite	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	2300      	movne	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	429a      	cmp	r2, r3
 800447e:	d19b      	bne.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000000 	.word	0x20000000

08004490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2200      	movs	r2, #0
 80044a4:	2180      	movs	r1, #128	; 0x80
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7ff ff6a 	bl	8004380 <SPI_WaitFlagStateUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e000      	b.n	80044c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d001      	beq.n	80044e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e032      	b.n	800454a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a18      	ldr	r2, [pc, #96]	; (8004554 <HAL_TIM_Base_Start+0x88>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_TIM_Base_Start+0x48>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d009      	beq.n	8004514 <HAL_TIM_Base_Start+0x48>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <HAL_TIM_Base_Start+0x8c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_TIM_Base_Start+0x48>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a13      	ldr	r2, [pc, #76]	; (800455c <HAL_TIM_Base_Start+0x90>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d111      	bne.n	8004538 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b06      	cmp	r3, #6
 8004524:	d010      	beq.n	8004548 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	e007      	b.n	8004548 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800

08004560 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e041      	b.n	80045f6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fd fe1c 	bl	80021c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f000 f886 	bl	80046b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004616:	2302      	movs	r3, #2
 8004618:	e046      	b.n	80046a8 <HAL_TIM_OC_ConfigChannel+0xa8>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d839      	bhi.n	800469c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_TIM_OC_ConfigChannel+0x30>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004665 	.word	0x08004665
 8004634:	0800469d 	.word	0x0800469d
 8004638:	0800469d 	.word	0x0800469d
 800463c:	0800469d 	.word	0x0800469d
 8004640:	08004673 	.word	0x08004673
 8004644:	0800469d 	.word	0x0800469d
 8004648:	0800469d 	.word	0x0800469d
 800464c:	0800469d 	.word	0x0800469d
 8004650:	08004681 	.word	0x08004681
 8004654:	0800469d 	.word	0x0800469d
 8004658:	0800469d 	.word	0x0800469d
 800465c:	0800469d 	.word	0x0800469d
 8004660:	0800468f 	.word	0x0800468f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f882 	bl	8004774 <TIM_OC1_SetConfig>
      break;
 8004670:	e015      	b.n	800469e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f8e1 	bl	8004840 <TIM_OC2_SetConfig>
      break;
 800467e:	e00e      	b.n	800469e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f944 	bl	8004914 <TIM_OC3_SetConfig>
      break;
 800468c:	e007      	b.n	800469e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f9a7 	bl	80049e8 <TIM_OC4_SetConfig>
      break;
 800469a:	e000      	b.n	800469e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800469c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a29      	ldr	r2, [pc, #164]	; (8004768 <TIM_Base_SetConfig+0xb8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_Base_SetConfig+0x30>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0x30>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a26      	ldr	r2, [pc, #152]	; (800476c <TIM_Base_SetConfig+0xbc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0x30>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a25      	ldr	r2, [pc, #148]	; (8004770 <TIM_Base_SetConfig+0xc0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d108      	bne.n	80046f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <TIM_Base_SetConfig+0xb8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00b      	beq.n	8004712 <TIM_Base_SetConfig+0x62>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004700:	d007      	beq.n	8004712 <TIM_Base_SetConfig+0x62>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <TIM_Base_SetConfig+0xbc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d003      	beq.n	8004712 <TIM_Base_SetConfig+0x62>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a18      	ldr	r2, [pc, #96]	; (8004770 <TIM_Base_SetConfig+0xc0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d108      	bne.n	8004724 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a07      	ldr	r2, [pc, #28]	; (8004768 <TIM_Base_SetConfig+0xb8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d103      	bne.n	8004758 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	615a      	str	r2, [r3, #20]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800

08004774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f023 0201 	bic.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f023 0302 	bic.w	r3, r3, #2
 80047bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a1c      	ldr	r2, [pc, #112]	; (800483c <TIM_OC1_SetConfig+0xc8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10c      	bne.n	80047ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0308 	bic.w	r3, r3, #8
 80047d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f023 0304 	bic.w	r3, r3, #4
 80047e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a13      	ldr	r2, [pc, #76]	; (800483c <TIM_OC1_SetConfig+0xc8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d111      	bne.n	8004816 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40012c00 	.word	0x40012c00

08004840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f023 0210 	bic.w	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f023 0320 	bic.w	r3, r3, #32
 800488a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <TIM_OC2_SetConfig+0xd0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d10d      	bne.n	80048bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a14      	ldr	r2, [pc, #80]	; (8004910 <TIM_OC2_SetConfig+0xd0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d113      	bne.n	80048ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	40012c00 	.word	0x40012c00

08004914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800495c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <TIM_OC3_SetConfig+0xd0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10d      	bne.n	800498e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800498c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <TIM_OC3_SetConfig+0xd0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d113      	bne.n	80049be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800499c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	621a      	str	r2, [r3, #32]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40012c00 	.word	0x40012c00

080049e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a0f      	ldr	r2, [pc, #60]	; (8004a80 <TIM_OC4_SetConfig+0x98>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d109      	bne.n	8004a5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	019b      	lsls	r3, r3, #6
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	621a      	str	r2, [r3, #32]
}
 8004a76:	bf00      	nop
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr
 8004a80:	40012c00 	.word	0x40012c00

08004a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e046      	b.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae8:	d009      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a10      	ldr	r2, [pc, #64]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10c      	bne.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800

08004b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e03f      	b.n	8004bd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fd fba8 	bl	80022bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2224      	movs	r2, #36	; 0x24
 8004b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f905 	bl	8004d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b08a      	sub	sp, #40	; 0x28
 8004bde:	af02      	add	r7, sp, #8
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d17c      	bne.n	8004cf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_UART_Transmit+0x2c>
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e075      	b.n	8004cf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_UART_Transmit+0x3e>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e06e      	b.n	8004cf6 <HAL_UART_Transmit+0x11c>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2221      	movs	r2, #33	; 0x21
 8004c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004c2e:	f7fd fc01 	bl	8002434 <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	88fa      	ldrh	r2, [r7, #6]
 8004c3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c48:	d108      	bne.n	8004c5c <HAL_UART_Transmit+0x82>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e003      	b.n	8004c64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004c6c:	e02a      	b.n	8004cc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f840 	bl	8004cfe <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e036      	b.n	8004cf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	e007      	b.n	8004cb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1cf      	bne.n	8004c6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2140      	movs	r1, #64	; 0x40
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f810 	bl	8004cfe <UART_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e006      	b.n	8004cf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	603b      	str	r3, [r7, #0]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0e:	e02c      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d028      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d1e:	f7fd fb89 	bl	8002434 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d21d      	bcs.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e00f      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4013      	ands	r3, r2
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d0c3      	beq.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004dce:	f023 030c 	bic.w	r3, r3, #12
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2c      	ldr	r2, [pc, #176]	; (8004ea8 <UART_SetConfig+0x114>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d103      	bne.n	8004e04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004dfc:	f7fe f9aa 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	e002      	b.n	8004e0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e04:	f7fe f992 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 8004e08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009a      	lsls	r2, r3, #2
 8004e14:	441a      	add	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	4a22      	ldr	r2, [pc, #136]	; (8004eac <UART_SetConfig+0x118>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	0119      	lsls	r1, r3, #4
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009a      	lsls	r2, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e40:	4b1a      	ldr	r3, [pc, #104]	; (8004eac <UART_SetConfig+0x118>)
 8004e42:	fba3 0302 	umull	r0, r3, r3, r2
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2064      	movs	r0, #100	; 0x64
 8004e4a:	fb00 f303 	mul.w	r3, r0, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	3332      	adds	r3, #50	; 0x32
 8004e54:	4a15      	ldr	r2, [pc, #84]	; (8004eac <UART_SetConfig+0x118>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e60:	4419      	add	r1, r3
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	009a      	lsls	r2, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <UART_SetConfig+0x118>)
 8004e7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	2064      	movs	r0, #100	; 0x64
 8004e82:	fb00 f303 	mul.w	r3, r0, r3
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	3332      	adds	r3, #50	; 0x32
 8004e8c:	4a07      	ldr	r2, [pc, #28]	; (8004eac <UART_SetConfig+0x118>)
 8004e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	f003 020f 	and.w	r2, r3, #15
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40013800 	.word	0x40013800
 8004eac:	51eb851f 	.word	0x51eb851f

08004eb0 <__errno>:
 8004eb0:	4b01      	ldr	r3, [pc, #4]	; (8004eb8 <__errno+0x8>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	2000000c 	.word	0x2000000c

08004ebc <__libc_init_array>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	2500      	movs	r5, #0
 8004ec0:	4e0c      	ldr	r6, [pc, #48]	; (8004ef4 <__libc_init_array+0x38>)
 8004ec2:	4c0d      	ldr	r4, [pc, #52]	; (8004ef8 <__libc_init_array+0x3c>)
 8004ec4:	1ba4      	subs	r4, r4, r6
 8004ec6:	10a4      	asrs	r4, r4, #2
 8004ec8:	42a5      	cmp	r5, r4
 8004eca:	d109      	bne.n	8004ee0 <__libc_init_array+0x24>
 8004ecc:	f002 f85e 	bl	8006f8c <_init>
 8004ed0:	2500      	movs	r5, #0
 8004ed2:	4e0a      	ldr	r6, [pc, #40]	; (8004efc <__libc_init_array+0x40>)
 8004ed4:	4c0a      	ldr	r4, [pc, #40]	; (8004f00 <__libc_init_array+0x44>)
 8004ed6:	1ba4      	subs	r4, r4, r6
 8004ed8:	10a4      	asrs	r4, r4, #2
 8004eda:	42a5      	cmp	r5, r4
 8004edc:	d105      	bne.n	8004eea <__libc_init_array+0x2e>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ee4:	4798      	blx	r3
 8004ee6:	3501      	adds	r5, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__libc_init_array+0xc>
 8004eea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eee:	4798      	blx	r3
 8004ef0:	3501      	adds	r5, #1
 8004ef2:	e7f2      	b.n	8004eda <__libc_init_array+0x1e>
 8004ef4:	08007468 	.word	0x08007468
 8004ef8:	08007468 	.word	0x08007468
 8004efc:	08007468 	.word	0x08007468
 8004f00:	0800746c 	.word	0x0800746c

08004f04 <memcpy>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	1e43      	subs	r3, r0, #1
 8004f08:	440a      	add	r2, r1
 8004f0a:	4291      	cmp	r1, r2
 8004f0c:	d100      	bne.n	8004f10 <memcpy+0xc>
 8004f0e:	bd10      	pop	{r4, pc}
 8004f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f18:	e7f7      	b.n	8004f0a <memcpy+0x6>

08004f1a <memset>:
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4402      	add	r2, r0
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d100      	bne.n	8004f24 <memset+0xa>
 8004f22:	4770      	bx	lr
 8004f24:	f803 1b01 	strb.w	r1, [r3], #1
 8004f28:	e7f9      	b.n	8004f1e <memset+0x4>

08004f2a <__cvt>:
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	461e      	mov	r6, r3
 8004f32:	bfbb      	ittet	lt
 8004f34:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004f38:	461e      	movlt	r6, r3
 8004f3a:	2300      	movge	r3, #0
 8004f3c:	232d      	movlt	r3, #45	; 0x2d
 8004f3e:	b088      	sub	sp, #32
 8004f40:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004f42:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004f46:	f027 0720 	bic.w	r7, r7, #32
 8004f4a:	2f46      	cmp	r7, #70	; 0x46
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004f50:	700b      	strb	r3, [r1, #0]
 8004f52:	d004      	beq.n	8004f5e <__cvt+0x34>
 8004f54:	2f45      	cmp	r7, #69	; 0x45
 8004f56:	d100      	bne.n	8004f5a <__cvt+0x30>
 8004f58:	3501      	adds	r5, #1
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e000      	b.n	8004f60 <__cvt+0x36>
 8004f5e:	2303      	movs	r3, #3
 8004f60:	aa07      	add	r2, sp, #28
 8004f62:	9204      	str	r2, [sp, #16]
 8004f64:	aa06      	add	r2, sp, #24
 8004f66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004f6a:	e9cd 3500 	strd	r3, r5, [sp]
 8004f6e:	4622      	mov	r2, r4
 8004f70:	4633      	mov	r3, r6
 8004f72:	f000 fcd9 	bl	8005928 <_dtoa_r>
 8004f76:	2f47      	cmp	r7, #71	; 0x47
 8004f78:	4680      	mov	r8, r0
 8004f7a:	d102      	bne.n	8004f82 <__cvt+0x58>
 8004f7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f7e:	07db      	lsls	r3, r3, #31
 8004f80:	d526      	bpl.n	8004fd0 <__cvt+0xa6>
 8004f82:	2f46      	cmp	r7, #70	; 0x46
 8004f84:	eb08 0905 	add.w	r9, r8, r5
 8004f88:	d111      	bne.n	8004fae <__cvt+0x84>
 8004f8a:	f898 3000 	ldrb.w	r3, [r8]
 8004f8e:	2b30      	cmp	r3, #48	; 0x30
 8004f90:	d10a      	bne.n	8004fa8 <__cvt+0x7e>
 8004f92:	2200      	movs	r2, #0
 8004f94:	2300      	movs	r3, #0
 8004f96:	4620      	mov	r0, r4
 8004f98:	4631      	mov	r1, r6
 8004f9a:	f7fb fd05 	bl	80009a8 <__aeabi_dcmpeq>
 8004f9e:	b918      	cbnz	r0, 8004fa8 <__cvt+0x7e>
 8004fa0:	f1c5 0501 	rsb	r5, r5, #1
 8004fa4:	f8ca 5000 	str.w	r5, [sl]
 8004fa8:	f8da 3000 	ldr.w	r3, [sl]
 8004fac:	4499      	add	r9, r3
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	f7fb fcf7 	bl	80009a8 <__aeabi_dcmpeq>
 8004fba:	b938      	cbnz	r0, 8004fcc <__cvt+0xa2>
 8004fbc:	2230      	movs	r2, #48	; 0x30
 8004fbe:	9b07      	ldr	r3, [sp, #28]
 8004fc0:	454b      	cmp	r3, r9
 8004fc2:	d205      	bcs.n	8004fd0 <__cvt+0xa6>
 8004fc4:	1c59      	adds	r1, r3, #1
 8004fc6:	9107      	str	r1, [sp, #28]
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e7f8      	b.n	8004fbe <__cvt+0x94>
 8004fcc:	f8cd 901c 	str.w	r9, [sp, #28]
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	9b07      	ldr	r3, [sp, #28]
 8004fd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004fd6:	eba3 0308 	sub.w	r3, r3, r8
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	b008      	add	sp, #32
 8004fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004fe2 <__exponent>:
 8004fe2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fe4:	2900      	cmp	r1, #0
 8004fe6:	bfb4      	ite	lt
 8004fe8:	232d      	movlt	r3, #45	; 0x2d
 8004fea:	232b      	movge	r3, #43	; 0x2b
 8004fec:	4604      	mov	r4, r0
 8004fee:	bfb8      	it	lt
 8004ff0:	4249      	neglt	r1, r1
 8004ff2:	2909      	cmp	r1, #9
 8004ff4:	f804 2b02 	strb.w	r2, [r4], #2
 8004ff8:	7043      	strb	r3, [r0, #1]
 8004ffa:	dd21      	ble.n	8005040 <__exponent+0x5e>
 8004ffc:	f10d 0307 	add.w	r3, sp, #7
 8005000:	461f      	mov	r7, r3
 8005002:	260a      	movs	r6, #10
 8005004:	fb91 f5f6 	sdiv	r5, r1, r6
 8005008:	fb06 1115 	mls	r1, r6, r5, r1
 800500c:	2d09      	cmp	r5, #9
 800500e:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005012:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005016:	f103 32ff 	add.w	r2, r3, #4294967295
 800501a:	4629      	mov	r1, r5
 800501c:	dc09      	bgt.n	8005032 <__exponent+0x50>
 800501e:	3130      	adds	r1, #48	; 0x30
 8005020:	3b02      	subs	r3, #2
 8005022:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005026:	42bb      	cmp	r3, r7
 8005028:	4622      	mov	r2, r4
 800502a:	d304      	bcc.n	8005036 <__exponent+0x54>
 800502c:	1a10      	subs	r0, r2, r0
 800502e:	b003      	add	sp, #12
 8005030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005032:	4613      	mov	r3, r2
 8005034:	e7e6      	b.n	8005004 <__exponent+0x22>
 8005036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800503a:	f804 2b01 	strb.w	r2, [r4], #1
 800503e:	e7f2      	b.n	8005026 <__exponent+0x44>
 8005040:	2330      	movs	r3, #48	; 0x30
 8005042:	4419      	add	r1, r3
 8005044:	7083      	strb	r3, [r0, #2]
 8005046:	1d02      	adds	r2, r0, #4
 8005048:	70c1      	strb	r1, [r0, #3]
 800504a:	e7ef      	b.n	800502c <__exponent+0x4a>

0800504c <_printf_float>:
 800504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005050:	b091      	sub	sp, #68	; 0x44
 8005052:	460c      	mov	r4, r1
 8005054:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005056:	4693      	mov	fp, r2
 8005058:	461e      	mov	r6, r3
 800505a:	4605      	mov	r5, r0
 800505c:	f001 fa18 	bl	8006490 <_localeconv_r>
 8005060:	6803      	ldr	r3, [r0, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	9309      	str	r3, [sp, #36]	; 0x24
 8005066:	f7fb f873 	bl	8000150 <strlen>
 800506a:	2300      	movs	r3, #0
 800506c:	930e      	str	r3, [sp, #56]	; 0x38
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	900a      	str	r0, [sp, #40]	; 0x28
 8005072:	3307      	adds	r3, #7
 8005074:	f023 0307 	bic.w	r3, r3, #7
 8005078:	f103 0208 	add.w	r2, r3, #8
 800507c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005080:	f8d4 a000 	ldr.w	sl, [r4]
 8005084:	603a      	str	r2, [r7, #0]
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800508e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005096:	930b      	str	r3, [sp, #44]	; 0x2c
 8005098:	f04f 32ff 	mov.w	r2, #4294967295
 800509c:	4ba6      	ldr	r3, [pc, #664]	; (8005338 <_printf_float+0x2ec>)
 800509e:	4638      	mov	r0, r7
 80050a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050a2:	f7fb fcb3 	bl	8000a0c <__aeabi_dcmpun>
 80050a6:	bb68      	cbnz	r0, 8005104 <_printf_float+0xb8>
 80050a8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ac:	4ba2      	ldr	r3, [pc, #648]	; (8005338 <_printf_float+0x2ec>)
 80050ae:	4638      	mov	r0, r7
 80050b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050b2:	f7fb fc8d 	bl	80009d0 <__aeabi_dcmple>
 80050b6:	bb28      	cbnz	r0, 8005104 <_printf_float+0xb8>
 80050b8:	2200      	movs	r2, #0
 80050ba:	2300      	movs	r3, #0
 80050bc:	4638      	mov	r0, r7
 80050be:	4649      	mov	r1, r9
 80050c0:	f7fb fc7c 	bl	80009bc <__aeabi_dcmplt>
 80050c4:	b110      	cbz	r0, 80050cc <_printf_float+0x80>
 80050c6:	232d      	movs	r3, #45	; 0x2d
 80050c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050cc:	4f9b      	ldr	r7, [pc, #620]	; (800533c <_printf_float+0x2f0>)
 80050ce:	4b9c      	ldr	r3, [pc, #624]	; (8005340 <_printf_float+0x2f4>)
 80050d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050d4:	bf98      	it	ls
 80050d6:	461f      	movls	r7, r3
 80050d8:	2303      	movs	r3, #3
 80050da:	f04f 0900 	mov.w	r9, #0
 80050de:	6123      	str	r3, [r4, #16]
 80050e0:	f02a 0304 	bic.w	r3, sl, #4
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	9600      	str	r6, [sp, #0]
 80050e8:	465b      	mov	r3, fp
 80050ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80050ec:	4621      	mov	r1, r4
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f9e2 	bl	80054b8 <_printf_common>
 80050f4:	3001      	adds	r0, #1
 80050f6:	f040 8090 	bne.w	800521a <_printf_float+0x1ce>
 80050fa:	f04f 30ff 	mov.w	r0, #4294967295
 80050fe:	b011      	add	sp, #68	; 0x44
 8005100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005104:	463a      	mov	r2, r7
 8005106:	464b      	mov	r3, r9
 8005108:	4638      	mov	r0, r7
 800510a:	4649      	mov	r1, r9
 800510c:	f7fb fc7e 	bl	8000a0c <__aeabi_dcmpun>
 8005110:	b110      	cbz	r0, 8005118 <_printf_float+0xcc>
 8005112:	4f8c      	ldr	r7, [pc, #560]	; (8005344 <_printf_float+0x2f8>)
 8005114:	4b8c      	ldr	r3, [pc, #560]	; (8005348 <_printf_float+0x2fc>)
 8005116:	e7db      	b.n	80050d0 <_printf_float+0x84>
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800511e:	1c59      	adds	r1, r3, #1
 8005120:	a80d      	add	r0, sp, #52	; 0x34
 8005122:	a90e      	add	r1, sp, #56	; 0x38
 8005124:	d140      	bne.n	80051a8 <_printf_float+0x15c>
 8005126:	2306      	movs	r3, #6
 8005128:	6063      	str	r3, [r4, #4]
 800512a:	f04f 0c00 	mov.w	ip, #0
 800512e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005132:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	6022      	str	r2, [r4, #0]
 800513a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	463a      	mov	r2, r7
 8005142:	464b      	mov	r3, r9
 8005144:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005148:	4628      	mov	r0, r5
 800514a:	f7ff feee 	bl	8004f2a <__cvt>
 800514e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005152:	2b47      	cmp	r3, #71	; 0x47
 8005154:	4607      	mov	r7, r0
 8005156:	d109      	bne.n	800516c <_printf_float+0x120>
 8005158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800515a:	1cd8      	adds	r0, r3, #3
 800515c:	db02      	blt.n	8005164 <_printf_float+0x118>
 800515e:	6862      	ldr	r2, [r4, #4]
 8005160:	4293      	cmp	r3, r2
 8005162:	dd47      	ble.n	80051f4 <_printf_float+0x1a8>
 8005164:	f1a8 0802 	sub.w	r8, r8, #2
 8005168:	fa5f f888 	uxtb.w	r8, r8
 800516c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005170:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005172:	d824      	bhi.n	80051be <_printf_float+0x172>
 8005174:	3901      	subs	r1, #1
 8005176:	4642      	mov	r2, r8
 8005178:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800517c:	910d      	str	r1, [sp, #52]	; 0x34
 800517e:	f7ff ff30 	bl	8004fe2 <__exponent>
 8005182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005184:	4681      	mov	r9, r0
 8005186:	1813      	adds	r3, r2, r0
 8005188:	2a01      	cmp	r2, #1
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	dc02      	bgt.n	8005194 <_printf_float+0x148>
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	07d1      	lsls	r1, r2, #31
 8005192:	d501      	bpl.n	8005198 <_printf_float+0x14c>
 8005194:	3301      	adds	r3, #1
 8005196:	6123      	str	r3, [r4, #16]
 8005198:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0a2      	beq.n	80050e6 <_printf_float+0x9a>
 80051a0:	232d      	movs	r3, #45	; 0x2d
 80051a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a6:	e79e      	b.n	80050e6 <_printf_float+0x9a>
 80051a8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80051ac:	f000 816e 	beq.w	800548c <_printf_float+0x440>
 80051b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051b4:	d1b9      	bne.n	800512a <_printf_float+0xde>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1b7      	bne.n	800512a <_printf_float+0xde>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e7b4      	b.n	8005128 <_printf_float+0xdc>
 80051be:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80051c2:	d119      	bne.n	80051f8 <_printf_float+0x1ac>
 80051c4:	2900      	cmp	r1, #0
 80051c6:	6863      	ldr	r3, [r4, #4]
 80051c8:	dd0c      	ble.n	80051e4 <_printf_float+0x198>
 80051ca:	6121      	str	r1, [r4, #16]
 80051cc:	b913      	cbnz	r3, 80051d4 <_printf_float+0x188>
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	07d2      	lsls	r2, r2, #31
 80051d2:	d502      	bpl.n	80051da <_printf_float+0x18e>
 80051d4:	3301      	adds	r3, #1
 80051d6:	440b      	add	r3, r1
 80051d8:	6123      	str	r3, [r4, #16]
 80051da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051dc:	f04f 0900 	mov.w	r9, #0
 80051e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80051e2:	e7d9      	b.n	8005198 <_printf_float+0x14c>
 80051e4:	b913      	cbnz	r3, 80051ec <_printf_float+0x1a0>
 80051e6:	6822      	ldr	r2, [r4, #0]
 80051e8:	07d0      	lsls	r0, r2, #31
 80051ea:	d501      	bpl.n	80051f0 <_printf_float+0x1a4>
 80051ec:	3302      	adds	r3, #2
 80051ee:	e7f3      	b.n	80051d8 <_printf_float+0x18c>
 80051f0:	2301      	movs	r3, #1
 80051f2:	e7f1      	b.n	80051d8 <_printf_float+0x18c>
 80051f4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80051f8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80051fc:	4293      	cmp	r3, r2
 80051fe:	db05      	blt.n	800520c <_printf_float+0x1c0>
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	07d1      	lsls	r1, r2, #31
 8005206:	d5e8      	bpl.n	80051da <_printf_float+0x18e>
 8005208:	3301      	adds	r3, #1
 800520a:	e7e5      	b.n	80051d8 <_printf_float+0x18c>
 800520c:	2b00      	cmp	r3, #0
 800520e:	bfcc      	ite	gt
 8005210:	2301      	movgt	r3, #1
 8005212:	f1c3 0302 	rsble	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	e7de      	b.n	80051d8 <_printf_float+0x18c>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	055a      	lsls	r2, r3, #21
 800521e:	d407      	bmi.n	8005230 <_printf_float+0x1e4>
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	463a      	mov	r2, r7
 8005224:	4659      	mov	r1, fp
 8005226:	4628      	mov	r0, r5
 8005228:	47b0      	blx	r6
 800522a:	3001      	adds	r0, #1
 800522c:	d129      	bne.n	8005282 <_printf_float+0x236>
 800522e:	e764      	b.n	80050fa <_printf_float+0xae>
 8005230:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005234:	f240 80d7 	bls.w	80053e6 <_printf_float+0x39a>
 8005238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	f7fb fbb2 	bl	80009a8 <__aeabi_dcmpeq>
 8005244:	b388      	cbz	r0, 80052aa <_printf_float+0x25e>
 8005246:	2301      	movs	r3, #1
 8005248:	4a40      	ldr	r2, [pc, #256]	; (800534c <_printf_float+0x300>)
 800524a:	4659      	mov	r1, fp
 800524c:	4628      	mov	r0, r5
 800524e:	47b0      	blx	r6
 8005250:	3001      	adds	r0, #1
 8005252:	f43f af52 	beq.w	80050fa <_printf_float+0xae>
 8005256:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800525a:	429a      	cmp	r2, r3
 800525c:	db02      	blt.n	8005264 <_printf_float+0x218>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	07d8      	lsls	r0, r3, #31
 8005262:	d50e      	bpl.n	8005282 <_printf_float+0x236>
 8005264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005268:	4659      	mov	r1, fp
 800526a:	4628      	mov	r0, r5
 800526c:	47b0      	blx	r6
 800526e:	3001      	adds	r0, #1
 8005270:	f43f af43 	beq.w	80050fa <_printf_float+0xae>
 8005274:	2700      	movs	r7, #0
 8005276:	f104 081a 	add.w	r8, r4, #26
 800527a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800527c:	3b01      	subs	r3, #1
 800527e:	42bb      	cmp	r3, r7
 8005280:	dc09      	bgt.n	8005296 <_printf_float+0x24a>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	079f      	lsls	r7, r3, #30
 8005286:	f100 80fd 	bmi.w	8005484 <_printf_float+0x438>
 800528a:	68e0      	ldr	r0, [r4, #12]
 800528c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800528e:	4298      	cmp	r0, r3
 8005290:	bfb8      	it	lt
 8005292:	4618      	movlt	r0, r3
 8005294:	e733      	b.n	80050fe <_printf_float+0xb2>
 8005296:	2301      	movs	r3, #1
 8005298:	4642      	mov	r2, r8
 800529a:	4659      	mov	r1, fp
 800529c:	4628      	mov	r0, r5
 800529e:	47b0      	blx	r6
 80052a0:	3001      	adds	r0, #1
 80052a2:	f43f af2a 	beq.w	80050fa <_printf_float+0xae>
 80052a6:	3701      	adds	r7, #1
 80052a8:	e7e7      	b.n	800527a <_printf_float+0x22e>
 80052aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	dc2b      	bgt.n	8005308 <_printf_float+0x2bc>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4a26      	ldr	r2, [pc, #152]	; (800534c <_printf_float+0x300>)
 80052b4:	4659      	mov	r1, fp
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b0      	blx	r6
 80052ba:	3001      	adds	r0, #1
 80052bc:	f43f af1d 	beq.w	80050fa <_printf_float+0xae>
 80052c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052c2:	b923      	cbnz	r3, 80052ce <_printf_float+0x282>
 80052c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052c6:	b913      	cbnz	r3, 80052ce <_printf_float+0x282>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	07d9      	lsls	r1, r3, #31
 80052cc:	d5d9      	bpl.n	8005282 <_printf_float+0x236>
 80052ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d2:	4659      	mov	r1, fp
 80052d4:	4628      	mov	r0, r5
 80052d6:	47b0      	blx	r6
 80052d8:	3001      	adds	r0, #1
 80052da:	f43f af0e 	beq.w	80050fa <_printf_float+0xae>
 80052de:	f04f 0800 	mov.w	r8, #0
 80052e2:	f104 091a 	add.w	r9, r4, #26
 80052e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052e8:	425b      	negs	r3, r3
 80052ea:	4543      	cmp	r3, r8
 80052ec:	dc01      	bgt.n	80052f2 <_printf_float+0x2a6>
 80052ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052f0:	e797      	b.n	8005222 <_printf_float+0x1d6>
 80052f2:	2301      	movs	r3, #1
 80052f4:	464a      	mov	r2, r9
 80052f6:	4659      	mov	r1, fp
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b0      	blx	r6
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f aefc 	beq.w	80050fa <_printf_float+0xae>
 8005302:	f108 0801 	add.w	r8, r8, #1
 8005306:	e7ee      	b.n	80052e6 <_printf_float+0x29a>
 8005308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800530a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800530c:	429a      	cmp	r2, r3
 800530e:	bfa8      	it	ge
 8005310:	461a      	movge	r2, r3
 8005312:	2a00      	cmp	r2, #0
 8005314:	4690      	mov	r8, r2
 8005316:	dd07      	ble.n	8005328 <_printf_float+0x2dc>
 8005318:	4613      	mov	r3, r2
 800531a:	4659      	mov	r1, fp
 800531c:	463a      	mov	r2, r7
 800531e:	4628      	mov	r0, r5
 8005320:	47b0      	blx	r6
 8005322:	3001      	adds	r0, #1
 8005324:	f43f aee9 	beq.w	80050fa <_printf_float+0xae>
 8005328:	f104 031a 	add.w	r3, r4, #26
 800532c:	f04f 0a00 	mov.w	sl, #0
 8005330:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005334:	930b      	str	r3, [sp, #44]	; 0x2c
 8005336:	e015      	b.n	8005364 <_printf_float+0x318>
 8005338:	7fefffff 	.word	0x7fefffff
 800533c:	08007210 	.word	0x08007210
 8005340:	0800720c 	.word	0x0800720c
 8005344:	08007218 	.word	0x08007218
 8005348:	08007214 	.word	0x08007214
 800534c:	0800721c 	.word	0x0800721c
 8005350:	2301      	movs	r3, #1
 8005352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005354:	4659      	mov	r1, fp
 8005356:	4628      	mov	r0, r5
 8005358:	47b0      	blx	r6
 800535a:	3001      	adds	r0, #1
 800535c:	f43f aecd 	beq.w	80050fa <_printf_float+0xae>
 8005360:	f10a 0a01 	add.w	sl, sl, #1
 8005364:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005368:	eba9 0308 	sub.w	r3, r9, r8
 800536c:	4553      	cmp	r3, sl
 800536e:	dcef      	bgt.n	8005350 <_printf_float+0x304>
 8005370:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005374:	429a      	cmp	r2, r3
 8005376:	444f      	add	r7, r9
 8005378:	db14      	blt.n	80053a4 <_printf_float+0x358>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	07da      	lsls	r2, r3, #31
 800537e:	d411      	bmi.n	80053a4 <_printf_float+0x358>
 8005380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005382:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005384:	eba3 0209 	sub.w	r2, r3, r9
 8005388:	eba3 0901 	sub.w	r9, r3, r1
 800538c:	4591      	cmp	r9, r2
 800538e:	bfa8      	it	ge
 8005390:	4691      	movge	r9, r2
 8005392:	f1b9 0f00 	cmp.w	r9, #0
 8005396:	dc0d      	bgt.n	80053b4 <_printf_float+0x368>
 8005398:	2700      	movs	r7, #0
 800539a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800539e:	f104 081a 	add.w	r8, r4, #26
 80053a2:	e018      	b.n	80053d6 <_printf_float+0x38a>
 80053a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053a8:	4659      	mov	r1, fp
 80053aa:	4628      	mov	r0, r5
 80053ac:	47b0      	blx	r6
 80053ae:	3001      	adds	r0, #1
 80053b0:	d1e6      	bne.n	8005380 <_printf_float+0x334>
 80053b2:	e6a2      	b.n	80050fa <_printf_float+0xae>
 80053b4:	464b      	mov	r3, r9
 80053b6:	463a      	mov	r2, r7
 80053b8:	4659      	mov	r1, fp
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b0      	blx	r6
 80053be:	3001      	adds	r0, #1
 80053c0:	d1ea      	bne.n	8005398 <_printf_float+0x34c>
 80053c2:	e69a      	b.n	80050fa <_printf_float+0xae>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4642      	mov	r2, r8
 80053c8:	4659      	mov	r1, fp
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b0      	blx	r6
 80053ce:	3001      	adds	r0, #1
 80053d0:	f43f ae93 	beq.w	80050fa <_printf_float+0xae>
 80053d4:	3701      	adds	r7, #1
 80053d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	eba3 0309 	sub.w	r3, r3, r9
 80053e0:	42bb      	cmp	r3, r7
 80053e2:	dcef      	bgt.n	80053c4 <_printf_float+0x378>
 80053e4:	e74d      	b.n	8005282 <_printf_float+0x236>
 80053e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053e8:	2a01      	cmp	r2, #1
 80053ea:	dc01      	bgt.n	80053f0 <_printf_float+0x3a4>
 80053ec:	07db      	lsls	r3, r3, #31
 80053ee:	d538      	bpl.n	8005462 <_printf_float+0x416>
 80053f0:	2301      	movs	r3, #1
 80053f2:	463a      	mov	r2, r7
 80053f4:	4659      	mov	r1, fp
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b0      	blx	r6
 80053fa:	3001      	adds	r0, #1
 80053fc:	f43f ae7d 	beq.w	80050fa <_printf_float+0xae>
 8005400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005404:	4659      	mov	r1, fp
 8005406:	4628      	mov	r0, r5
 8005408:	47b0      	blx	r6
 800540a:	3001      	adds	r0, #1
 800540c:	f107 0701 	add.w	r7, r7, #1
 8005410:	f43f ae73 	beq.w	80050fa <_printf_float+0xae>
 8005414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800541a:	2200      	movs	r2, #0
 800541c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005420:	2300      	movs	r3, #0
 8005422:	f7fb fac1 	bl	80009a8 <__aeabi_dcmpeq>
 8005426:	b9c0      	cbnz	r0, 800545a <_printf_float+0x40e>
 8005428:	4643      	mov	r3, r8
 800542a:	463a      	mov	r2, r7
 800542c:	4659      	mov	r1, fp
 800542e:	4628      	mov	r0, r5
 8005430:	47b0      	blx	r6
 8005432:	3001      	adds	r0, #1
 8005434:	d10d      	bne.n	8005452 <_printf_float+0x406>
 8005436:	e660      	b.n	80050fa <_printf_float+0xae>
 8005438:	2301      	movs	r3, #1
 800543a:	4642      	mov	r2, r8
 800543c:	4659      	mov	r1, fp
 800543e:	4628      	mov	r0, r5
 8005440:	47b0      	blx	r6
 8005442:	3001      	adds	r0, #1
 8005444:	f43f ae59 	beq.w	80050fa <_printf_float+0xae>
 8005448:	3701      	adds	r7, #1
 800544a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800544c:	3b01      	subs	r3, #1
 800544e:	42bb      	cmp	r3, r7
 8005450:	dcf2      	bgt.n	8005438 <_printf_float+0x3ec>
 8005452:	464b      	mov	r3, r9
 8005454:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005458:	e6e4      	b.n	8005224 <_printf_float+0x1d8>
 800545a:	2700      	movs	r7, #0
 800545c:	f104 081a 	add.w	r8, r4, #26
 8005460:	e7f3      	b.n	800544a <_printf_float+0x3fe>
 8005462:	2301      	movs	r3, #1
 8005464:	e7e1      	b.n	800542a <_printf_float+0x3de>
 8005466:	2301      	movs	r3, #1
 8005468:	4642      	mov	r2, r8
 800546a:	4659      	mov	r1, fp
 800546c:	4628      	mov	r0, r5
 800546e:	47b0      	blx	r6
 8005470:	3001      	adds	r0, #1
 8005472:	f43f ae42 	beq.w	80050fa <_printf_float+0xae>
 8005476:	3701      	adds	r7, #1
 8005478:	68e3      	ldr	r3, [r4, #12]
 800547a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	42bb      	cmp	r3, r7
 8005480:	dcf1      	bgt.n	8005466 <_printf_float+0x41a>
 8005482:	e702      	b.n	800528a <_printf_float+0x23e>
 8005484:	2700      	movs	r7, #0
 8005486:	f104 0819 	add.w	r8, r4, #25
 800548a:	e7f5      	b.n	8005478 <_printf_float+0x42c>
 800548c:	2b00      	cmp	r3, #0
 800548e:	f43f ae94 	beq.w	80051ba <_printf_float+0x16e>
 8005492:	f04f 0c00 	mov.w	ip, #0
 8005496:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800549a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800549e:	6022      	str	r2, [r4, #0]
 80054a0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80054a4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	463a      	mov	r2, r7
 80054ac:	464b      	mov	r3, r9
 80054ae:	4628      	mov	r0, r5
 80054b0:	f7ff fd3b 	bl	8004f2a <__cvt>
 80054b4:	4607      	mov	r7, r0
 80054b6:	e64f      	b.n	8005158 <_printf_float+0x10c>

080054b8 <_printf_common>:
 80054b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054bc:	4691      	mov	r9, r2
 80054be:	461f      	mov	r7, r3
 80054c0:	688a      	ldr	r2, [r1, #8]
 80054c2:	690b      	ldr	r3, [r1, #16]
 80054c4:	4606      	mov	r6, r0
 80054c6:	4293      	cmp	r3, r2
 80054c8:	bfb8      	it	lt
 80054ca:	4613      	movlt	r3, r2
 80054cc:	f8c9 3000 	str.w	r3, [r9]
 80054d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054d4:	460c      	mov	r4, r1
 80054d6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054da:	b112      	cbz	r2, 80054e2 <_printf_common+0x2a>
 80054dc:	3301      	adds	r3, #1
 80054de:	f8c9 3000 	str.w	r3, [r9]
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	0699      	lsls	r1, r3, #26
 80054e6:	bf42      	ittt	mi
 80054e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054ec:	3302      	addmi	r3, #2
 80054ee:	f8c9 3000 	strmi.w	r3, [r9]
 80054f2:	6825      	ldr	r5, [r4, #0]
 80054f4:	f015 0506 	ands.w	r5, r5, #6
 80054f8:	d107      	bne.n	800550a <_printf_common+0x52>
 80054fa:	f104 0a19 	add.w	sl, r4, #25
 80054fe:	68e3      	ldr	r3, [r4, #12]
 8005500:	f8d9 2000 	ldr.w	r2, [r9]
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	42ab      	cmp	r3, r5
 8005508:	dc29      	bgt.n	800555e <_printf_common+0xa6>
 800550a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	3300      	adds	r3, #0
 8005512:	bf18      	it	ne
 8005514:	2301      	movne	r3, #1
 8005516:	0692      	lsls	r2, r2, #26
 8005518:	d42e      	bmi.n	8005578 <_printf_common+0xc0>
 800551a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800551e:	4639      	mov	r1, r7
 8005520:	4630      	mov	r0, r6
 8005522:	47c0      	blx	r8
 8005524:	3001      	adds	r0, #1
 8005526:	d021      	beq.n	800556c <_printf_common+0xb4>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	68e5      	ldr	r5, [r4, #12]
 800552c:	f003 0306 	and.w	r3, r3, #6
 8005530:	2b04      	cmp	r3, #4
 8005532:	bf18      	it	ne
 8005534:	2500      	movne	r5, #0
 8005536:	f8d9 2000 	ldr.w	r2, [r9]
 800553a:	f04f 0900 	mov.w	r9, #0
 800553e:	bf08      	it	eq
 8005540:	1aad      	subeq	r5, r5, r2
 8005542:	68a3      	ldr	r3, [r4, #8]
 8005544:	6922      	ldr	r2, [r4, #16]
 8005546:	bf08      	it	eq
 8005548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800554c:	4293      	cmp	r3, r2
 800554e:	bfc4      	itt	gt
 8005550:	1a9b      	subgt	r3, r3, r2
 8005552:	18ed      	addgt	r5, r5, r3
 8005554:	341a      	adds	r4, #26
 8005556:	454d      	cmp	r5, r9
 8005558:	d11a      	bne.n	8005590 <_printf_common+0xd8>
 800555a:	2000      	movs	r0, #0
 800555c:	e008      	b.n	8005570 <_printf_common+0xb8>
 800555e:	2301      	movs	r3, #1
 8005560:	4652      	mov	r2, sl
 8005562:	4639      	mov	r1, r7
 8005564:	4630      	mov	r0, r6
 8005566:	47c0      	blx	r8
 8005568:	3001      	adds	r0, #1
 800556a:	d103      	bne.n	8005574 <_printf_common+0xbc>
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005574:	3501      	adds	r5, #1
 8005576:	e7c2      	b.n	80054fe <_printf_common+0x46>
 8005578:	2030      	movs	r0, #48	; 0x30
 800557a:	18e1      	adds	r1, r4, r3
 800557c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005586:	4422      	add	r2, r4
 8005588:	3302      	adds	r3, #2
 800558a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800558e:	e7c4      	b.n	800551a <_printf_common+0x62>
 8005590:	2301      	movs	r3, #1
 8005592:	4622      	mov	r2, r4
 8005594:	4639      	mov	r1, r7
 8005596:	4630      	mov	r0, r6
 8005598:	47c0      	blx	r8
 800559a:	3001      	adds	r0, #1
 800559c:	d0e6      	beq.n	800556c <_printf_common+0xb4>
 800559e:	f109 0901 	add.w	r9, r9, #1
 80055a2:	e7d8      	b.n	8005556 <_printf_common+0x9e>

080055a4 <_printf_i>:
 80055a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80055ac:	460c      	mov	r4, r1
 80055ae:	7e09      	ldrb	r1, [r1, #24]
 80055b0:	b085      	sub	sp, #20
 80055b2:	296e      	cmp	r1, #110	; 0x6e
 80055b4:	4617      	mov	r7, r2
 80055b6:	4606      	mov	r6, r0
 80055b8:	4698      	mov	r8, r3
 80055ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055bc:	f000 80b3 	beq.w	8005726 <_printf_i+0x182>
 80055c0:	d822      	bhi.n	8005608 <_printf_i+0x64>
 80055c2:	2963      	cmp	r1, #99	; 0x63
 80055c4:	d036      	beq.n	8005634 <_printf_i+0x90>
 80055c6:	d80a      	bhi.n	80055de <_printf_i+0x3a>
 80055c8:	2900      	cmp	r1, #0
 80055ca:	f000 80b9 	beq.w	8005740 <_printf_i+0x19c>
 80055ce:	2958      	cmp	r1, #88	; 0x58
 80055d0:	f000 8083 	beq.w	80056da <_printf_i+0x136>
 80055d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80055dc:	e032      	b.n	8005644 <_printf_i+0xa0>
 80055de:	2964      	cmp	r1, #100	; 0x64
 80055e0:	d001      	beq.n	80055e6 <_printf_i+0x42>
 80055e2:	2969      	cmp	r1, #105	; 0x69
 80055e4:	d1f6      	bne.n	80055d4 <_printf_i+0x30>
 80055e6:	6820      	ldr	r0, [r4, #0]
 80055e8:	6813      	ldr	r3, [r2, #0]
 80055ea:	0605      	lsls	r5, r0, #24
 80055ec:	f103 0104 	add.w	r1, r3, #4
 80055f0:	d52a      	bpl.n	8005648 <_printf_i+0xa4>
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6011      	str	r1, [r2, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	da03      	bge.n	8005602 <_printf_i+0x5e>
 80055fa:	222d      	movs	r2, #45	; 0x2d
 80055fc:	425b      	negs	r3, r3
 80055fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005602:	486f      	ldr	r0, [pc, #444]	; (80057c0 <_printf_i+0x21c>)
 8005604:	220a      	movs	r2, #10
 8005606:	e039      	b.n	800567c <_printf_i+0xd8>
 8005608:	2973      	cmp	r1, #115	; 0x73
 800560a:	f000 809d 	beq.w	8005748 <_printf_i+0x1a4>
 800560e:	d808      	bhi.n	8005622 <_printf_i+0x7e>
 8005610:	296f      	cmp	r1, #111	; 0x6f
 8005612:	d020      	beq.n	8005656 <_printf_i+0xb2>
 8005614:	2970      	cmp	r1, #112	; 0x70
 8005616:	d1dd      	bne.n	80055d4 <_printf_i+0x30>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	f043 0320 	orr.w	r3, r3, #32
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	e003      	b.n	800562a <_printf_i+0x86>
 8005622:	2975      	cmp	r1, #117	; 0x75
 8005624:	d017      	beq.n	8005656 <_printf_i+0xb2>
 8005626:	2978      	cmp	r1, #120	; 0x78
 8005628:	d1d4      	bne.n	80055d4 <_printf_i+0x30>
 800562a:	2378      	movs	r3, #120	; 0x78
 800562c:	4865      	ldr	r0, [pc, #404]	; (80057c4 <_printf_i+0x220>)
 800562e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005632:	e055      	b.n	80056e0 <_printf_i+0x13c>
 8005634:	6813      	ldr	r3, [r2, #0]
 8005636:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563a:	1d19      	adds	r1, r3, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6011      	str	r1, [r2, #0]
 8005640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005644:	2301      	movs	r3, #1
 8005646:	e08c      	b.n	8005762 <_printf_i+0x1be>
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800564e:	6011      	str	r1, [r2, #0]
 8005650:	bf18      	it	ne
 8005652:	b21b      	sxthne	r3, r3
 8005654:	e7cf      	b.n	80055f6 <_printf_i+0x52>
 8005656:	6813      	ldr	r3, [r2, #0]
 8005658:	6825      	ldr	r5, [r4, #0]
 800565a:	1d18      	adds	r0, r3, #4
 800565c:	6010      	str	r0, [r2, #0]
 800565e:	0628      	lsls	r0, r5, #24
 8005660:	d501      	bpl.n	8005666 <_printf_i+0xc2>
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	e002      	b.n	800566c <_printf_i+0xc8>
 8005666:	0668      	lsls	r0, r5, #25
 8005668:	d5fb      	bpl.n	8005662 <_printf_i+0xbe>
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	296f      	cmp	r1, #111	; 0x6f
 800566e:	bf14      	ite	ne
 8005670:	220a      	movne	r2, #10
 8005672:	2208      	moveq	r2, #8
 8005674:	4852      	ldr	r0, [pc, #328]	; (80057c0 <_printf_i+0x21c>)
 8005676:	2100      	movs	r1, #0
 8005678:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800567c:	6865      	ldr	r5, [r4, #4]
 800567e:	2d00      	cmp	r5, #0
 8005680:	60a5      	str	r5, [r4, #8]
 8005682:	f2c0 8095 	blt.w	80057b0 <_printf_i+0x20c>
 8005686:	6821      	ldr	r1, [r4, #0]
 8005688:	f021 0104 	bic.w	r1, r1, #4
 800568c:	6021      	str	r1, [r4, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d13d      	bne.n	800570e <_printf_i+0x16a>
 8005692:	2d00      	cmp	r5, #0
 8005694:	f040 808e 	bne.w	80057b4 <_printf_i+0x210>
 8005698:	4665      	mov	r5, ip
 800569a:	2a08      	cmp	r2, #8
 800569c:	d10b      	bne.n	80056b6 <_printf_i+0x112>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	07db      	lsls	r3, r3, #31
 80056a2:	d508      	bpl.n	80056b6 <_printf_i+0x112>
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	6862      	ldr	r2, [r4, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	bfde      	ittt	le
 80056ac:	2330      	movle	r3, #48	; 0x30
 80056ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056b6:	ebac 0305 	sub.w	r3, ip, r5
 80056ba:	6123      	str	r3, [r4, #16]
 80056bc:	f8cd 8000 	str.w	r8, [sp]
 80056c0:	463b      	mov	r3, r7
 80056c2:	aa03      	add	r2, sp, #12
 80056c4:	4621      	mov	r1, r4
 80056c6:	4630      	mov	r0, r6
 80056c8:	f7ff fef6 	bl	80054b8 <_printf_common>
 80056cc:	3001      	adds	r0, #1
 80056ce:	d14d      	bne.n	800576c <_printf_i+0x1c8>
 80056d0:	f04f 30ff 	mov.w	r0, #4294967295
 80056d4:	b005      	add	sp, #20
 80056d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056da:	4839      	ldr	r0, [pc, #228]	; (80057c0 <_printf_i+0x21c>)
 80056dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80056e0:	6813      	ldr	r3, [r2, #0]
 80056e2:	6821      	ldr	r1, [r4, #0]
 80056e4:	1d1d      	adds	r5, r3, #4
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6015      	str	r5, [r2, #0]
 80056ea:	060a      	lsls	r2, r1, #24
 80056ec:	d50b      	bpl.n	8005706 <_printf_i+0x162>
 80056ee:	07ca      	lsls	r2, r1, #31
 80056f0:	bf44      	itt	mi
 80056f2:	f041 0120 	orrmi.w	r1, r1, #32
 80056f6:	6021      	strmi	r1, [r4, #0]
 80056f8:	b91b      	cbnz	r3, 8005702 <_printf_i+0x15e>
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	f022 0220 	bic.w	r2, r2, #32
 8005700:	6022      	str	r2, [r4, #0]
 8005702:	2210      	movs	r2, #16
 8005704:	e7b7      	b.n	8005676 <_printf_i+0xd2>
 8005706:	064d      	lsls	r5, r1, #25
 8005708:	bf48      	it	mi
 800570a:	b29b      	uxthmi	r3, r3
 800570c:	e7ef      	b.n	80056ee <_printf_i+0x14a>
 800570e:	4665      	mov	r5, ip
 8005710:	fbb3 f1f2 	udiv	r1, r3, r2
 8005714:	fb02 3311 	mls	r3, r2, r1, r3
 8005718:	5cc3      	ldrb	r3, [r0, r3]
 800571a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800571e:	460b      	mov	r3, r1
 8005720:	2900      	cmp	r1, #0
 8005722:	d1f5      	bne.n	8005710 <_printf_i+0x16c>
 8005724:	e7b9      	b.n	800569a <_printf_i+0xf6>
 8005726:	6813      	ldr	r3, [r2, #0]
 8005728:	6825      	ldr	r5, [r4, #0]
 800572a:	1d18      	adds	r0, r3, #4
 800572c:	6961      	ldr	r1, [r4, #20]
 800572e:	6010      	str	r0, [r2, #0]
 8005730:	0628      	lsls	r0, r5, #24
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	d501      	bpl.n	800573a <_printf_i+0x196>
 8005736:	6019      	str	r1, [r3, #0]
 8005738:	e002      	b.n	8005740 <_printf_i+0x19c>
 800573a:	066a      	lsls	r2, r5, #25
 800573c:	d5fb      	bpl.n	8005736 <_printf_i+0x192>
 800573e:	8019      	strh	r1, [r3, #0]
 8005740:	2300      	movs	r3, #0
 8005742:	4665      	mov	r5, ip
 8005744:	6123      	str	r3, [r4, #16]
 8005746:	e7b9      	b.n	80056bc <_printf_i+0x118>
 8005748:	6813      	ldr	r3, [r2, #0]
 800574a:	1d19      	adds	r1, r3, #4
 800574c:	6011      	str	r1, [r2, #0]
 800574e:	681d      	ldr	r5, [r3, #0]
 8005750:	6862      	ldr	r2, [r4, #4]
 8005752:	2100      	movs	r1, #0
 8005754:	4628      	mov	r0, r5
 8005756:	f000 feb1 	bl	80064bc <memchr>
 800575a:	b108      	cbz	r0, 8005760 <_printf_i+0x1bc>
 800575c:	1b40      	subs	r0, r0, r5
 800575e:	6060      	str	r0, [r4, #4]
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	6123      	str	r3, [r4, #16]
 8005764:	2300      	movs	r3, #0
 8005766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800576a:	e7a7      	b.n	80056bc <_printf_i+0x118>
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	462a      	mov	r2, r5
 8005770:	4639      	mov	r1, r7
 8005772:	4630      	mov	r0, r6
 8005774:	47c0      	blx	r8
 8005776:	3001      	adds	r0, #1
 8005778:	d0aa      	beq.n	80056d0 <_printf_i+0x12c>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	079b      	lsls	r3, r3, #30
 800577e:	d413      	bmi.n	80057a8 <_printf_i+0x204>
 8005780:	68e0      	ldr	r0, [r4, #12]
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	4298      	cmp	r0, r3
 8005786:	bfb8      	it	lt
 8005788:	4618      	movlt	r0, r3
 800578a:	e7a3      	b.n	80056d4 <_printf_i+0x130>
 800578c:	2301      	movs	r3, #1
 800578e:	464a      	mov	r2, r9
 8005790:	4639      	mov	r1, r7
 8005792:	4630      	mov	r0, r6
 8005794:	47c0      	blx	r8
 8005796:	3001      	adds	r0, #1
 8005798:	d09a      	beq.n	80056d0 <_printf_i+0x12c>
 800579a:	3501      	adds	r5, #1
 800579c:	68e3      	ldr	r3, [r4, #12]
 800579e:	9a03      	ldr	r2, [sp, #12]
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	42ab      	cmp	r3, r5
 80057a4:	dcf2      	bgt.n	800578c <_printf_i+0x1e8>
 80057a6:	e7eb      	b.n	8005780 <_printf_i+0x1dc>
 80057a8:	2500      	movs	r5, #0
 80057aa:	f104 0919 	add.w	r9, r4, #25
 80057ae:	e7f5      	b.n	800579c <_printf_i+0x1f8>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1ac      	bne.n	800570e <_printf_i+0x16a>
 80057b4:	7803      	ldrb	r3, [r0, #0]
 80057b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057be:	e76c      	b.n	800569a <_printf_i+0xf6>
 80057c0:	0800721e 	.word	0x0800721e
 80057c4:	0800722f 	.word	0x0800722f

080057c8 <siprintf>:
 80057c8:	b40e      	push	{r1, r2, r3}
 80057ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057ce:	b500      	push	{lr}
 80057d0:	b09c      	sub	sp, #112	; 0x70
 80057d2:	ab1d      	add	r3, sp, #116	; 0x74
 80057d4:	9002      	str	r0, [sp, #8]
 80057d6:	9006      	str	r0, [sp, #24]
 80057d8:	9107      	str	r1, [sp, #28]
 80057da:	9104      	str	r1, [sp, #16]
 80057dc:	4808      	ldr	r0, [pc, #32]	; (8005800 <siprintf+0x38>)
 80057de:	4909      	ldr	r1, [pc, #36]	; (8005804 <siprintf+0x3c>)
 80057e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e4:	9105      	str	r1, [sp, #20]
 80057e6:	6800      	ldr	r0, [r0, #0]
 80057e8:	a902      	add	r1, sp, #8
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	f001 fa5e 	bl	8006cac <_svfiprintf_r>
 80057f0:	2200      	movs	r2, #0
 80057f2:	9b02      	ldr	r3, [sp, #8]
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	b01c      	add	sp, #112	; 0x70
 80057f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057fc:	b003      	add	sp, #12
 80057fe:	4770      	bx	lr
 8005800:	2000000c 	.word	0x2000000c
 8005804:	ffff0208 	.word	0xffff0208

08005808 <quorem>:
 8005808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580c:	6903      	ldr	r3, [r0, #16]
 800580e:	690c      	ldr	r4, [r1, #16]
 8005810:	4680      	mov	r8, r0
 8005812:	42a3      	cmp	r3, r4
 8005814:	f2c0 8084 	blt.w	8005920 <quorem+0x118>
 8005818:	3c01      	subs	r4, #1
 800581a:	f101 0714 	add.w	r7, r1, #20
 800581e:	f100 0614 	add.w	r6, r0, #20
 8005822:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005826:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800582a:	3501      	adds	r5, #1
 800582c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005830:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005834:	eb06 030c 	add.w	r3, r6, ip
 8005838:	eb07 090c 	add.w	r9, r7, ip
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	b39d      	cbz	r5, 80058a8 <quorem+0xa0>
 8005840:	f04f 0a00 	mov.w	sl, #0
 8005844:	4638      	mov	r0, r7
 8005846:	46b6      	mov	lr, r6
 8005848:	46d3      	mov	fp, sl
 800584a:	f850 2b04 	ldr.w	r2, [r0], #4
 800584e:	b293      	uxth	r3, r2
 8005850:	fb05 a303 	mla	r3, r5, r3, sl
 8005854:	0c12      	lsrs	r2, r2, #16
 8005856:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800585a:	fb05 a202 	mla	r2, r5, r2, sl
 800585e:	b29b      	uxth	r3, r3
 8005860:	ebab 0303 	sub.w	r3, fp, r3
 8005864:	f8de b000 	ldr.w	fp, [lr]
 8005868:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800586c:	fa1f fb8b 	uxth.w	fp, fp
 8005870:	445b      	add	r3, fp
 8005872:	fa1f fb82 	uxth.w	fp, r2
 8005876:	f8de 2000 	ldr.w	r2, [lr]
 800587a:	4581      	cmp	r9, r0
 800587c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005884:	b29b      	uxth	r3, r3
 8005886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800588a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800588e:	f84e 3b04 	str.w	r3, [lr], #4
 8005892:	d2da      	bcs.n	800584a <quorem+0x42>
 8005894:	f856 300c 	ldr.w	r3, [r6, ip]
 8005898:	b933      	cbnz	r3, 80058a8 <quorem+0xa0>
 800589a:	9b01      	ldr	r3, [sp, #4]
 800589c:	3b04      	subs	r3, #4
 800589e:	429e      	cmp	r6, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	d331      	bcc.n	8005908 <quorem+0x100>
 80058a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80058a8:	4640      	mov	r0, r8
 80058aa:	f001 f829 	bl	8006900 <__mcmp>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	db26      	blt.n	8005900 <quorem+0xf8>
 80058b2:	4630      	mov	r0, r6
 80058b4:	f04f 0c00 	mov.w	ip, #0
 80058b8:	3501      	adds	r5, #1
 80058ba:	f857 1b04 	ldr.w	r1, [r7], #4
 80058be:	f8d0 e000 	ldr.w	lr, [r0]
 80058c2:	b28b      	uxth	r3, r1
 80058c4:	ebac 0303 	sub.w	r3, ip, r3
 80058c8:	fa1f f28e 	uxth.w	r2, lr
 80058cc:	4413      	add	r3, r2
 80058ce:	0c0a      	lsrs	r2, r1, #16
 80058d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058de:	45b9      	cmp	r9, r7
 80058e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058e4:	f840 3b04 	str.w	r3, [r0], #4
 80058e8:	d2e7      	bcs.n	80058ba <quorem+0xb2>
 80058ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80058ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80058f2:	b92a      	cbnz	r2, 8005900 <quorem+0xf8>
 80058f4:	3b04      	subs	r3, #4
 80058f6:	429e      	cmp	r6, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	d30b      	bcc.n	8005914 <quorem+0x10c>
 80058fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8005900:	4628      	mov	r0, r5
 8005902:	b003      	add	sp, #12
 8005904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	3b04      	subs	r3, #4
 800590c:	2a00      	cmp	r2, #0
 800590e:	d1c9      	bne.n	80058a4 <quorem+0x9c>
 8005910:	3c01      	subs	r4, #1
 8005912:	e7c4      	b.n	800589e <quorem+0x96>
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	3b04      	subs	r3, #4
 8005918:	2a00      	cmp	r2, #0
 800591a:	d1ef      	bne.n	80058fc <quorem+0xf4>
 800591c:	3c01      	subs	r4, #1
 800591e:	e7ea      	b.n	80058f6 <quorem+0xee>
 8005920:	2000      	movs	r0, #0
 8005922:	e7ee      	b.n	8005902 <quorem+0xfa>
 8005924:	0000      	movs	r0, r0
	...

08005928 <_dtoa_r>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	4616      	mov	r6, r2
 800592e:	461f      	mov	r7, r3
 8005930:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005932:	b095      	sub	sp, #84	; 0x54
 8005934:	4604      	mov	r4, r0
 8005936:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800593a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800593e:	b93d      	cbnz	r5, 8005950 <_dtoa_r+0x28>
 8005940:	2010      	movs	r0, #16
 8005942:	f000 fdb3 	bl	80064ac <malloc>
 8005946:	6260      	str	r0, [r4, #36]	; 0x24
 8005948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800594c:	6005      	str	r5, [r0, #0]
 800594e:	60c5      	str	r5, [r0, #12]
 8005950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005952:	6819      	ldr	r1, [r3, #0]
 8005954:	b151      	cbz	r1, 800596c <_dtoa_r+0x44>
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	2301      	movs	r3, #1
 800595a:	4093      	lsls	r3, r2
 800595c:	604a      	str	r2, [r1, #4]
 800595e:	608b      	str	r3, [r1, #8]
 8005960:	4620      	mov	r0, r4
 8005962:	f000 fded 	bl	8006540 <_Bfree>
 8005966:	2200      	movs	r2, #0
 8005968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	1e3b      	subs	r3, r7, #0
 800596e:	bfaf      	iteee	ge
 8005970:	2300      	movge	r3, #0
 8005972:	2201      	movlt	r2, #1
 8005974:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005978:	9303      	strlt	r3, [sp, #12]
 800597a:	bfac      	ite	ge
 800597c:	f8c8 3000 	strge.w	r3, [r8]
 8005980:	f8c8 2000 	strlt.w	r2, [r8]
 8005984:	4bae      	ldr	r3, [pc, #696]	; (8005c40 <_dtoa_r+0x318>)
 8005986:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800598a:	ea33 0308 	bics.w	r3, r3, r8
 800598e:	d11b      	bne.n	80059c8 <_dtoa_r+0xa0>
 8005990:	f242 730f 	movw	r3, #9999	; 0x270f
 8005994:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	9b02      	ldr	r3, [sp, #8]
 800599a:	b923      	cbnz	r3, 80059a6 <_dtoa_r+0x7e>
 800599c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f000 8545 	beq.w	8006430 <_dtoa_r+0xb08>
 80059a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059a8:	b953      	cbnz	r3, 80059c0 <_dtoa_r+0x98>
 80059aa:	4ba6      	ldr	r3, [pc, #664]	; (8005c44 <_dtoa_r+0x31c>)
 80059ac:	e021      	b.n	80059f2 <_dtoa_r+0xca>
 80059ae:	4ba6      	ldr	r3, [pc, #664]	; (8005c48 <_dtoa_r+0x320>)
 80059b0:	9306      	str	r3, [sp, #24]
 80059b2:	3308      	adds	r3, #8
 80059b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	9806      	ldr	r0, [sp, #24]
 80059ba:	b015      	add	sp, #84	; 0x54
 80059bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c0:	4ba0      	ldr	r3, [pc, #640]	; (8005c44 <_dtoa_r+0x31c>)
 80059c2:	9306      	str	r3, [sp, #24]
 80059c4:	3303      	adds	r3, #3
 80059c6:	e7f5      	b.n	80059b4 <_dtoa_r+0x8c>
 80059c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059cc:	2200      	movs	r2, #0
 80059ce:	2300      	movs	r3, #0
 80059d0:	4630      	mov	r0, r6
 80059d2:	4639      	mov	r1, r7
 80059d4:	f7fa ffe8 	bl	80009a8 <__aeabi_dcmpeq>
 80059d8:	4682      	mov	sl, r0
 80059da:	b160      	cbz	r0, 80059f6 <_dtoa_r+0xce>
 80059dc:	2301      	movs	r3, #1
 80059de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8520 	beq.w	800642a <_dtoa_r+0xb02>
 80059ea:	4b98      	ldr	r3, [pc, #608]	; (8005c4c <_dtoa_r+0x324>)
 80059ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	9306      	str	r3, [sp, #24]
 80059f4:	e7e0      	b.n	80059b8 <_dtoa_r+0x90>
 80059f6:	ab12      	add	r3, sp, #72	; 0x48
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	ab13      	add	r3, sp, #76	; 0x4c
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	4632      	mov	r2, r6
 8005a00:	463b      	mov	r3, r7
 8005a02:	4620      	mov	r0, r4
 8005a04:	f000 fff4 	bl	80069f0 <__d2b>
 8005a08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005a0c:	4683      	mov	fp, r0
 8005a0e:	2d00      	cmp	r5, #0
 8005a10:	d07d      	beq.n	8005b0e <_dtoa_r+0x1e6>
 8005a12:	46b0      	mov	r8, r6
 8005a14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a18:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005a1c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005a20:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a24:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005a28:	2200      	movs	r2, #0
 8005a2a:	4b89      	ldr	r3, [pc, #548]	; (8005c50 <_dtoa_r+0x328>)
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	4649      	mov	r1, r9
 8005a30:	f7fa fb9a 	bl	8000168 <__aeabi_dsub>
 8005a34:	a37c      	add	r3, pc, #496	; (adr r3, 8005c28 <_dtoa_r+0x300>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	f7fa fd4d 	bl	80004d8 <__aeabi_dmul>
 8005a3e:	a37c      	add	r3, pc, #496	; (adr r3, 8005c30 <_dtoa_r+0x308>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f7fa fb92 	bl	800016c <__adddf3>
 8005a48:	4606      	mov	r6, r0
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	460f      	mov	r7, r1
 8005a4e:	f7fa fcd9 	bl	8000404 <__aeabi_i2d>
 8005a52:	a379      	add	r3, pc, #484	; (adr r3, 8005c38 <_dtoa_r+0x310>)
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f7fa fd3e 	bl	80004d8 <__aeabi_dmul>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4630      	mov	r0, r6
 8005a62:	4639      	mov	r1, r7
 8005a64:	f7fa fb82 	bl	800016c <__adddf3>
 8005a68:	4606      	mov	r6, r0
 8005a6a:	460f      	mov	r7, r1
 8005a6c:	f7fa ffe4 	bl	8000a38 <__aeabi_d2iz>
 8005a70:	2200      	movs	r2, #0
 8005a72:	4682      	mov	sl, r0
 8005a74:	2300      	movs	r3, #0
 8005a76:	4630      	mov	r0, r6
 8005a78:	4639      	mov	r1, r7
 8005a7a:	f7fa ff9f 	bl	80009bc <__aeabi_dcmplt>
 8005a7e:	b148      	cbz	r0, 8005a94 <_dtoa_r+0x16c>
 8005a80:	4650      	mov	r0, sl
 8005a82:	f7fa fcbf 	bl	8000404 <__aeabi_i2d>
 8005a86:	4632      	mov	r2, r6
 8005a88:	463b      	mov	r3, r7
 8005a8a:	f7fa ff8d 	bl	80009a8 <__aeabi_dcmpeq>
 8005a8e:	b908      	cbnz	r0, 8005a94 <_dtoa_r+0x16c>
 8005a90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a94:	f1ba 0f16 	cmp.w	sl, #22
 8005a98:	d85a      	bhi.n	8005b50 <_dtoa_r+0x228>
 8005a9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a9e:	496d      	ldr	r1, [pc, #436]	; (8005c54 <_dtoa_r+0x32c>)
 8005aa0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aa8:	f7fa ffa6 	bl	80009f8 <__aeabi_dcmpgt>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d051      	beq.n	8005b54 <_dtoa_r+0x22c>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ab6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005aba:	1b5d      	subs	r5, r3, r5
 8005abc:	1e6b      	subs	r3, r5, #1
 8005abe:	9307      	str	r3, [sp, #28]
 8005ac0:	bf43      	ittte	mi
 8005ac2:	2300      	movmi	r3, #0
 8005ac4:	f1c5 0901 	rsbmi	r9, r5, #1
 8005ac8:	9307      	strmi	r3, [sp, #28]
 8005aca:	f04f 0900 	movpl.w	r9, #0
 8005ace:	f1ba 0f00 	cmp.w	sl, #0
 8005ad2:	db41      	blt.n	8005b58 <_dtoa_r+0x230>
 8005ad4:	9b07      	ldr	r3, [sp, #28]
 8005ad6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005ada:	4453      	add	r3, sl
 8005adc:	9307      	str	r3, [sp, #28]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	9308      	str	r3, [sp, #32]
 8005ae2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ae4:	2b09      	cmp	r3, #9
 8005ae6:	f200 808f 	bhi.w	8005c08 <_dtoa_r+0x2e0>
 8005aea:	2b05      	cmp	r3, #5
 8005aec:	bfc4      	itt	gt
 8005aee:	3b04      	subgt	r3, #4
 8005af0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005af2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005af4:	bfc8      	it	gt
 8005af6:	2500      	movgt	r5, #0
 8005af8:	f1a3 0302 	sub.w	r3, r3, #2
 8005afc:	bfd8      	it	le
 8005afe:	2501      	movle	r5, #1
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	f200 808d 	bhi.w	8005c20 <_dtoa_r+0x2f8>
 8005b06:	e8df f003 	tbb	[pc, r3]
 8005b0a:	7d7b      	.short	0x7d7b
 8005b0c:	6f2f      	.short	0x6f2f
 8005b0e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005b12:	441d      	add	r5, r3
 8005b14:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005b18:	2820      	cmp	r0, #32
 8005b1a:	dd13      	ble.n	8005b44 <_dtoa_r+0x21c>
 8005b1c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005b20:	9b02      	ldr	r3, [sp, #8]
 8005b22:	fa08 f800 	lsl.w	r8, r8, r0
 8005b26:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005b2a:	fa23 f000 	lsr.w	r0, r3, r0
 8005b2e:	ea48 0000 	orr.w	r0, r8, r0
 8005b32:	f7fa fc57 	bl	80003e4 <__aeabi_ui2d>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4680      	mov	r8, r0
 8005b3a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005b3e:	3d01      	subs	r5, #1
 8005b40:	9310      	str	r3, [sp, #64]	; 0x40
 8005b42:	e771      	b.n	8005a28 <_dtoa_r+0x100>
 8005b44:	9b02      	ldr	r3, [sp, #8]
 8005b46:	f1c0 0020 	rsb	r0, r0, #32
 8005b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b4e:	e7f0      	b.n	8005b32 <_dtoa_r+0x20a>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e7b0      	b.n	8005ab6 <_dtoa_r+0x18e>
 8005b54:	900d      	str	r0, [sp, #52]	; 0x34
 8005b56:	e7af      	b.n	8005ab8 <_dtoa_r+0x190>
 8005b58:	f1ca 0300 	rsb	r3, sl, #0
 8005b5c:	9308      	str	r3, [sp, #32]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	eba9 090a 	sub.w	r9, r9, sl
 8005b64:	930c      	str	r3, [sp, #48]	; 0x30
 8005b66:	e7bc      	b.n	8005ae2 <_dtoa_r+0x1ba>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	dd74      	ble.n	8005c5c <_dtoa_r+0x334>
 8005b72:	4698      	mov	r8, r3
 8005b74:	9304      	str	r3, [sp, #16]
 8005b76:	2200      	movs	r2, #0
 8005b78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b7a:	6072      	str	r2, [r6, #4]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	f102 0014 	add.w	r0, r2, #20
 8005b82:	4298      	cmp	r0, r3
 8005b84:	6871      	ldr	r1, [r6, #4]
 8005b86:	d96e      	bls.n	8005c66 <_dtoa_r+0x33e>
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 fca5 	bl	80064d8 <_Balloc>
 8005b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b90:	6030      	str	r0, [r6, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f1b8 0f0e 	cmp.w	r8, #14
 8005b98:	9306      	str	r3, [sp, #24]
 8005b9a:	f200 80ed 	bhi.w	8005d78 <_dtoa_r+0x450>
 8005b9e:	2d00      	cmp	r5, #0
 8005ba0:	f000 80ea 	beq.w	8005d78 <_dtoa_r+0x450>
 8005ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ba8:	f1ba 0f00 	cmp.w	sl, #0
 8005bac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005bb0:	dd77      	ble.n	8005ca2 <_dtoa_r+0x37a>
 8005bb2:	4a28      	ldr	r2, [pc, #160]	; (8005c54 <_dtoa_r+0x32c>)
 8005bb4:	f00a 030f 	and.w	r3, sl, #15
 8005bb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005bbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005bc0:	06f0      	lsls	r0, r6, #27
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005bca:	d568      	bpl.n	8005c9e <_dtoa_r+0x376>
 8005bcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005bd0:	4b21      	ldr	r3, [pc, #132]	; (8005c58 <_dtoa_r+0x330>)
 8005bd2:	2503      	movs	r5, #3
 8005bd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bd8:	f7fa fda8 	bl	800072c <__aeabi_ddiv>
 8005bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005be0:	f006 060f 	and.w	r6, r6, #15
 8005be4:	4f1c      	ldr	r7, [pc, #112]	; (8005c58 <_dtoa_r+0x330>)
 8005be6:	e04f      	b.n	8005c88 <_dtoa_r+0x360>
 8005be8:	2301      	movs	r3, #1
 8005bea:	9309      	str	r3, [sp, #36]	; 0x24
 8005bec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bee:	4453      	add	r3, sl
 8005bf0:	f103 0801 	add.w	r8, r3, #1
 8005bf4:	9304      	str	r3, [sp, #16]
 8005bf6:	4643      	mov	r3, r8
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	bfb8      	it	lt
 8005bfc:	2301      	movlt	r3, #1
 8005bfe:	e7ba      	b.n	8005b76 <_dtoa_r+0x24e>
 8005c00:	2300      	movs	r3, #0
 8005c02:	e7b2      	b.n	8005b6a <_dtoa_r+0x242>
 8005c04:	2300      	movs	r3, #0
 8005c06:	e7f0      	b.n	8005bea <_dtoa_r+0x2c2>
 8005c08:	2501      	movs	r5, #1
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9509      	str	r5, [sp, #36]	; 0x24
 8005c0e:	931e      	str	r3, [sp, #120]	; 0x78
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
 8005c14:	2200      	movs	r2, #0
 8005c16:	9304      	str	r3, [sp, #16]
 8005c18:	4698      	mov	r8, r3
 8005c1a:	2312      	movs	r3, #18
 8005c1c:	921f      	str	r2, [sp, #124]	; 0x7c
 8005c1e:	e7aa      	b.n	8005b76 <_dtoa_r+0x24e>
 8005c20:	2301      	movs	r3, #1
 8005c22:	9309      	str	r3, [sp, #36]	; 0x24
 8005c24:	e7f4      	b.n	8005c10 <_dtoa_r+0x2e8>
 8005c26:	bf00      	nop
 8005c28:	636f4361 	.word	0x636f4361
 8005c2c:	3fd287a7 	.word	0x3fd287a7
 8005c30:	8b60c8b3 	.word	0x8b60c8b3
 8005c34:	3fc68a28 	.word	0x3fc68a28
 8005c38:	509f79fb 	.word	0x509f79fb
 8005c3c:	3fd34413 	.word	0x3fd34413
 8005c40:	7ff00000 	.word	0x7ff00000
 8005c44:	08007249 	.word	0x08007249
 8005c48:	08007240 	.word	0x08007240
 8005c4c:	0800721d 	.word	0x0800721d
 8005c50:	3ff80000 	.word	0x3ff80000
 8005c54:	08007278 	.word	0x08007278
 8005c58:	08007250 	.word	0x08007250
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	9304      	str	r3, [sp, #16]
 8005c60:	4698      	mov	r8, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	e7da      	b.n	8005c1c <_dtoa_r+0x2f4>
 8005c66:	3101      	adds	r1, #1
 8005c68:	6071      	str	r1, [r6, #4]
 8005c6a:	0052      	lsls	r2, r2, #1
 8005c6c:	e787      	b.n	8005b7e <_dtoa_r+0x256>
 8005c6e:	07f1      	lsls	r1, r6, #31
 8005c70:	d508      	bpl.n	8005c84 <_dtoa_r+0x35c>
 8005c72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c7a:	f7fa fc2d 	bl	80004d8 <__aeabi_dmul>
 8005c7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c82:	3501      	adds	r5, #1
 8005c84:	1076      	asrs	r6, r6, #1
 8005c86:	3708      	adds	r7, #8
 8005c88:	2e00      	cmp	r6, #0
 8005c8a:	d1f0      	bne.n	8005c6e <_dtoa_r+0x346>
 8005c8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c94:	f7fa fd4a 	bl	800072c <__aeabi_ddiv>
 8005c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c9c:	e01b      	b.n	8005cd6 <_dtoa_r+0x3ae>
 8005c9e:	2502      	movs	r5, #2
 8005ca0:	e7a0      	b.n	8005be4 <_dtoa_r+0x2bc>
 8005ca2:	f000 80a4 	beq.w	8005dee <_dtoa_r+0x4c6>
 8005ca6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005caa:	f1ca 0600 	rsb	r6, sl, #0
 8005cae:	4ba0      	ldr	r3, [pc, #640]	; (8005f30 <_dtoa_r+0x608>)
 8005cb0:	f006 020f 	and.w	r2, r6, #15
 8005cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f7fa fc0c 	bl	80004d8 <__aeabi_dmul>
 8005cc0:	2502      	movs	r5, #2
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cc8:	4f9a      	ldr	r7, [pc, #616]	; (8005f34 <_dtoa_r+0x60c>)
 8005cca:	1136      	asrs	r6, r6, #4
 8005ccc:	2e00      	cmp	r6, #0
 8005cce:	f040 8083 	bne.w	8005dd8 <_dtoa_r+0x4b0>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e0      	bne.n	8005c98 <_dtoa_r+0x370>
 8005cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 808a 	beq.w	8005df2 <_dtoa_r+0x4ca>
 8005cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ce2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cea:	2200      	movs	r2, #0
 8005cec:	4b92      	ldr	r3, [pc, #584]	; (8005f38 <_dtoa_r+0x610>)
 8005cee:	f7fa fe65 	bl	80009bc <__aeabi_dcmplt>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d07d      	beq.n	8005df2 <_dtoa_r+0x4ca>
 8005cf6:	f1b8 0f00 	cmp.w	r8, #0
 8005cfa:	d07a      	beq.n	8005df2 <_dtoa_r+0x4ca>
 8005cfc:	9b04      	ldr	r3, [sp, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dd36      	ble.n	8005d70 <_dtoa_r+0x448>
 8005d02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d06:	2200      	movs	r2, #0
 8005d08:	4b8c      	ldr	r3, [pc, #560]	; (8005f3c <_dtoa_r+0x614>)
 8005d0a:	f7fa fbe5 	bl	80004d8 <__aeabi_dmul>
 8005d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d12:	9e04      	ldr	r6, [sp, #16]
 8005d14:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005d18:	3501      	adds	r5, #1
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f7fa fb72 	bl	8000404 <__aeabi_i2d>
 8005d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d24:	f7fa fbd8 	bl	80004d8 <__aeabi_dmul>
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4b85      	ldr	r3, [pc, #532]	; (8005f40 <_dtoa_r+0x618>)
 8005d2c:	f7fa fa1e 	bl	800016c <__adddf3>
 8005d30:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005d34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d38:	950b      	str	r5, [sp, #44]	; 0x2c
 8005d3a:	2e00      	cmp	r6, #0
 8005d3c:	d15c      	bne.n	8005df8 <_dtoa_r+0x4d0>
 8005d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d42:	2200      	movs	r2, #0
 8005d44:	4b7f      	ldr	r3, [pc, #508]	; (8005f44 <_dtoa_r+0x61c>)
 8005d46:	f7fa fa0f 	bl	8000168 <__aeabi_dsub>
 8005d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d4c:	462b      	mov	r3, r5
 8005d4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d52:	f7fa fe51 	bl	80009f8 <__aeabi_dcmpgt>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	f040 8281 	bne.w	800625e <_dtoa_r+0x936>
 8005d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d62:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005d66:	f7fa fe29 	bl	80009bc <__aeabi_dcmplt>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	f040 8275 	bne.w	800625a <_dtoa_r+0x932>
 8005d70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f2c0 814b 	blt.w	8006016 <_dtoa_r+0x6ee>
 8005d80:	f1ba 0f0e 	cmp.w	sl, #14
 8005d84:	f300 8147 	bgt.w	8006016 <_dtoa_r+0x6ee>
 8005d88:	4b69      	ldr	r3, [pc, #420]	; (8005f30 <_dtoa_r+0x608>)
 8005d8a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f280 80d7 	bge.w	8005f4c <_dtoa_r+0x624>
 8005d9e:	f1b8 0f00 	cmp.w	r8, #0
 8005da2:	f300 80d3 	bgt.w	8005f4c <_dtoa_r+0x624>
 8005da6:	f040 8257 	bne.w	8006258 <_dtoa_r+0x930>
 8005daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dae:	2200      	movs	r2, #0
 8005db0:	4b64      	ldr	r3, [pc, #400]	; (8005f44 <_dtoa_r+0x61c>)
 8005db2:	f7fa fb91 	bl	80004d8 <__aeabi_dmul>
 8005db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dba:	f7fa fe13 	bl	80009e4 <__aeabi_dcmpge>
 8005dbe:	4646      	mov	r6, r8
 8005dc0:	4647      	mov	r7, r8
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	f040 822d 	bne.w	8006222 <_dtoa_r+0x8fa>
 8005dc8:	9b06      	ldr	r3, [sp, #24]
 8005dca:	9a06      	ldr	r2, [sp, #24]
 8005dcc:	1c5d      	adds	r5, r3, #1
 8005dce:	2331      	movs	r3, #49	; 0x31
 8005dd0:	f10a 0a01 	add.w	sl, sl, #1
 8005dd4:	7013      	strb	r3, [r2, #0]
 8005dd6:	e228      	b.n	800622a <_dtoa_r+0x902>
 8005dd8:	07f2      	lsls	r2, r6, #31
 8005dda:	d505      	bpl.n	8005de8 <_dtoa_r+0x4c0>
 8005ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005de0:	f7fa fb7a 	bl	80004d8 <__aeabi_dmul>
 8005de4:	2301      	movs	r3, #1
 8005de6:	3501      	adds	r5, #1
 8005de8:	1076      	asrs	r6, r6, #1
 8005dea:	3708      	adds	r7, #8
 8005dec:	e76e      	b.n	8005ccc <_dtoa_r+0x3a4>
 8005dee:	2502      	movs	r5, #2
 8005df0:	e771      	b.n	8005cd6 <_dtoa_r+0x3ae>
 8005df2:	4657      	mov	r7, sl
 8005df4:	4646      	mov	r6, r8
 8005df6:	e790      	b.n	8005d1a <_dtoa_r+0x3f2>
 8005df8:	4b4d      	ldr	r3, [pc, #308]	; (8005f30 <_dtoa_r+0x608>)
 8005dfa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005dfe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d048      	beq.n	8005e9a <_dtoa_r+0x572>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	494e      	ldr	r1, [pc, #312]	; (8005f48 <_dtoa_r+0x620>)
 8005e10:	f7fa fc8c 	bl	800072c <__aeabi_ddiv>
 8005e14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e18:	f7fa f9a6 	bl	8000168 <__aeabi_dsub>
 8005e1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e20:	9d06      	ldr	r5, [sp, #24]
 8005e22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e26:	f7fa fe07 	bl	8000a38 <__aeabi_d2iz>
 8005e2a:	9011      	str	r0, [sp, #68]	; 0x44
 8005e2c:	f7fa faea 	bl	8000404 <__aeabi_i2d>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e38:	f7fa f996 	bl	8000168 <__aeabi_dsub>
 8005e3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e42:	3330      	adds	r3, #48	; 0x30
 8005e44:	f805 3b01 	strb.w	r3, [r5], #1
 8005e48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e4c:	f7fa fdb6 	bl	80009bc <__aeabi_dcmplt>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d163      	bne.n	8005f1c <_dtoa_r+0x5f4>
 8005e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e58:	2000      	movs	r0, #0
 8005e5a:	4937      	ldr	r1, [pc, #220]	; (8005f38 <_dtoa_r+0x610>)
 8005e5c:	f7fa f984 	bl	8000168 <__aeabi_dsub>
 8005e60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e64:	f7fa fdaa 	bl	80009bc <__aeabi_dcmplt>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	f040 80b5 	bne.w	8005fd8 <_dtoa_r+0x6b0>
 8005e6e:	9b06      	ldr	r3, [sp, #24]
 8005e70:	1aeb      	subs	r3, r5, r3
 8005e72:	429e      	cmp	r6, r3
 8005e74:	f77f af7c 	ble.w	8005d70 <_dtoa_r+0x448>
 8005e78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4b2f      	ldr	r3, [pc, #188]	; (8005f3c <_dtoa_r+0x614>)
 8005e80:	f7fa fb2a 	bl	80004d8 <__aeabi_dmul>
 8005e84:	2200      	movs	r2, #0
 8005e86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e8e:	4b2b      	ldr	r3, [pc, #172]	; (8005f3c <_dtoa_r+0x614>)
 8005e90:	f7fa fb22 	bl	80004d8 <__aeabi_dmul>
 8005e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e98:	e7c3      	b.n	8005e22 <_dtoa_r+0x4fa>
 8005e9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e9e:	f7fa fb1b 	bl	80004d8 <__aeabi_dmul>
 8005ea2:	9b06      	ldr	r3, [sp, #24]
 8005ea4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ea8:	199d      	adds	r5, r3, r6
 8005eaa:	461e      	mov	r6, r3
 8005eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eb0:	f7fa fdc2 	bl	8000a38 <__aeabi_d2iz>
 8005eb4:	9011      	str	r0, [sp, #68]	; 0x44
 8005eb6:	f7fa faa5 	bl	8000404 <__aeabi_i2d>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ec2:	f7fa f951 	bl	8000168 <__aeabi_dsub>
 8005ec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ecc:	3330      	adds	r3, #48	; 0x30
 8005ece:	f806 3b01 	strb.w	r3, [r6], #1
 8005ed2:	42ae      	cmp	r6, r5
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	d124      	bne.n	8005f24 <_dtoa_r+0x5fc>
 8005eda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ede:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <_dtoa_r+0x620>)
 8005ee0:	f7fa f944 	bl	800016c <__adddf3>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eec:	f7fa fd84 	bl	80009f8 <__aeabi_dcmpgt>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d171      	bne.n	8005fd8 <_dtoa_r+0x6b0>
 8005ef4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ef8:	2000      	movs	r0, #0
 8005efa:	4913      	ldr	r1, [pc, #76]	; (8005f48 <_dtoa_r+0x620>)
 8005efc:	f7fa f934 	bl	8000168 <__aeabi_dsub>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f08:	f7fa fd58 	bl	80009bc <__aeabi_dcmplt>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	f43f af2f 	beq.w	8005d70 <_dtoa_r+0x448>
 8005f12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f16:	1e6a      	subs	r2, r5, #1
 8005f18:	2b30      	cmp	r3, #48	; 0x30
 8005f1a:	d001      	beq.n	8005f20 <_dtoa_r+0x5f8>
 8005f1c:	46ba      	mov	sl, r7
 8005f1e:	e04a      	b.n	8005fb6 <_dtoa_r+0x68e>
 8005f20:	4615      	mov	r5, r2
 8005f22:	e7f6      	b.n	8005f12 <_dtoa_r+0x5ea>
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <_dtoa_r+0x614>)
 8005f26:	f7fa fad7 	bl	80004d8 <__aeabi_dmul>
 8005f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f2e:	e7bd      	b.n	8005eac <_dtoa_r+0x584>
 8005f30:	08007278 	.word	0x08007278
 8005f34:	08007250 	.word	0x08007250
 8005f38:	3ff00000 	.word	0x3ff00000
 8005f3c:	40240000 	.word	0x40240000
 8005f40:	401c0000 	.word	0x401c0000
 8005f44:	40140000 	.word	0x40140000
 8005f48:	3fe00000 	.word	0x3fe00000
 8005f4c:	9d06      	ldr	r5, [sp, #24]
 8005f4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f56:	4630      	mov	r0, r6
 8005f58:	4639      	mov	r1, r7
 8005f5a:	f7fa fbe7 	bl	800072c <__aeabi_ddiv>
 8005f5e:	f7fa fd6b 	bl	8000a38 <__aeabi_d2iz>
 8005f62:	4681      	mov	r9, r0
 8005f64:	f7fa fa4e 	bl	8000404 <__aeabi_i2d>
 8005f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f6c:	f7fa fab4 	bl	80004d8 <__aeabi_dmul>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4630      	mov	r0, r6
 8005f76:	4639      	mov	r1, r7
 8005f78:	f7fa f8f6 	bl	8000168 <__aeabi_dsub>
 8005f7c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005f80:	f805 6b01 	strb.w	r6, [r5], #1
 8005f84:	9e06      	ldr	r6, [sp, #24]
 8005f86:	4602      	mov	r2, r0
 8005f88:	1bae      	subs	r6, r5, r6
 8005f8a:	45b0      	cmp	r8, r6
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	d135      	bne.n	8005ffc <_dtoa_r+0x6d4>
 8005f90:	f7fa f8ec 	bl	800016c <__adddf3>
 8005f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f98:	4606      	mov	r6, r0
 8005f9a:	460f      	mov	r7, r1
 8005f9c:	f7fa fd2c 	bl	80009f8 <__aeabi_dcmpgt>
 8005fa0:	b9c8      	cbnz	r0, 8005fd6 <_dtoa_r+0x6ae>
 8005fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	4639      	mov	r1, r7
 8005faa:	f7fa fcfd 	bl	80009a8 <__aeabi_dcmpeq>
 8005fae:	b110      	cbz	r0, 8005fb6 <_dtoa_r+0x68e>
 8005fb0:	f019 0f01 	tst.w	r9, #1
 8005fb4:	d10f      	bne.n	8005fd6 <_dtoa_r+0x6ae>
 8005fb6:	4659      	mov	r1, fp
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 fac1 	bl	8006540 <_Bfree>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fc2:	702b      	strb	r3, [r5, #0]
 8005fc4:	f10a 0301 	add.w	r3, sl, #1
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f43f acf3 	beq.w	80059b8 <_dtoa_r+0x90>
 8005fd2:	601d      	str	r5, [r3, #0]
 8005fd4:	e4f0      	b.n	80059b8 <_dtoa_r+0x90>
 8005fd6:	4657      	mov	r7, sl
 8005fd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005fdc:	1e6b      	subs	r3, r5, #1
 8005fde:	2a39      	cmp	r2, #57	; 0x39
 8005fe0:	d106      	bne.n	8005ff0 <_dtoa_r+0x6c8>
 8005fe2:	9a06      	ldr	r2, [sp, #24]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d107      	bne.n	8005ff8 <_dtoa_r+0x6d0>
 8005fe8:	2330      	movs	r3, #48	; 0x30
 8005fea:	7013      	strb	r3, [r2, #0]
 8005fec:	4613      	mov	r3, r2
 8005fee:	3701      	adds	r7, #1
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	3201      	adds	r2, #1
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	e791      	b.n	8005f1c <_dtoa_r+0x5f4>
 8005ff8:	461d      	mov	r5, r3
 8005ffa:	e7ed      	b.n	8005fd8 <_dtoa_r+0x6b0>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4b99      	ldr	r3, [pc, #612]	; (8006264 <_dtoa_r+0x93c>)
 8006000:	f7fa fa6a 	bl	80004d8 <__aeabi_dmul>
 8006004:	2200      	movs	r2, #0
 8006006:	2300      	movs	r3, #0
 8006008:	4606      	mov	r6, r0
 800600a:	460f      	mov	r7, r1
 800600c:	f7fa fccc 	bl	80009a8 <__aeabi_dcmpeq>
 8006010:	2800      	cmp	r0, #0
 8006012:	d09e      	beq.n	8005f52 <_dtoa_r+0x62a>
 8006014:	e7cf      	b.n	8005fb6 <_dtoa_r+0x68e>
 8006016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006018:	2a00      	cmp	r2, #0
 800601a:	f000 8088 	beq.w	800612e <_dtoa_r+0x806>
 800601e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006020:	2a01      	cmp	r2, #1
 8006022:	dc6d      	bgt.n	8006100 <_dtoa_r+0x7d8>
 8006024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006026:	2a00      	cmp	r2, #0
 8006028:	d066      	beq.n	80060f8 <_dtoa_r+0x7d0>
 800602a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800602e:	464d      	mov	r5, r9
 8006030:	9e08      	ldr	r6, [sp, #32]
 8006032:	9a07      	ldr	r2, [sp, #28]
 8006034:	2101      	movs	r1, #1
 8006036:	441a      	add	r2, r3
 8006038:	4620      	mov	r0, r4
 800603a:	4499      	add	r9, r3
 800603c:	9207      	str	r2, [sp, #28]
 800603e:	f000 fb1f 	bl	8006680 <__i2b>
 8006042:	4607      	mov	r7, r0
 8006044:	2d00      	cmp	r5, #0
 8006046:	dd0b      	ble.n	8006060 <_dtoa_r+0x738>
 8006048:	9b07      	ldr	r3, [sp, #28]
 800604a:	2b00      	cmp	r3, #0
 800604c:	dd08      	ble.n	8006060 <_dtoa_r+0x738>
 800604e:	42ab      	cmp	r3, r5
 8006050:	bfa8      	it	ge
 8006052:	462b      	movge	r3, r5
 8006054:	9a07      	ldr	r2, [sp, #28]
 8006056:	eba9 0903 	sub.w	r9, r9, r3
 800605a:	1aed      	subs	r5, r5, r3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	9307      	str	r3, [sp, #28]
 8006060:	9b08      	ldr	r3, [sp, #32]
 8006062:	b1eb      	cbz	r3, 80060a0 <_dtoa_r+0x778>
 8006064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006066:	2b00      	cmp	r3, #0
 8006068:	d065      	beq.n	8006136 <_dtoa_r+0x80e>
 800606a:	b18e      	cbz	r6, 8006090 <_dtoa_r+0x768>
 800606c:	4639      	mov	r1, r7
 800606e:	4632      	mov	r2, r6
 8006070:	4620      	mov	r0, r4
 8006072:	f000 fba3 	bl	80067bc <__pow5mult>
 8006076:	465a      	mov	r2, fp
 8006078:	4601      	mov	r1, r0
 800607a:	4607      	mov	r7, r0
 800607c:	4620      	mov	r0, r4
 800607e:	f000 fb08 	bl	8006692 <__multiply>
 8006082:	4659      	mov	r1, fp
 8006084:	900a      	str	r0, [sp, #40]	; 0x28
 8006086:	4620      	mov	r0, r4
 8006088:	f000 fa5a 	bl	8006540 <_Bfree>
 800608c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608e:	469b      	mov	fp, r3
 8006090:	9b08      	ldr	r3, [sp, #32]
 8006092:	1b9a      	subs	r2, r3, r6
 8006094:	d004      	beq.n	80060a0 <_dtoa_r+0x778>
 8006096:	4659      	mov	r1, fp
 8006098:	4620      	mov	r0, r4
 800609a:	f000 fb8f 	bl	80067bc <__pow5mult>
 800609e:	4683      	mov	fp, r0
 80060a0:	2101      	movs	r1, #1
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 faec 	bl	8006680 <__i2b>
 80060a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060aa:	4606      	mov	r6, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 81c6 	beq.w	800643e <_dtoa_r+0xb16>
 80060b2:	461a      	mov	r2, r3
 80060b4:	4601      	mov	r1, r0
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 fb80 	bl	80067bc <__pow5mult>
 80060bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060be:	4606      	mov	r6, r0
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	dc3e      	bgt.n	8006142 <_dtoa_r+0x81a>
 80060c4:	9b02      	ldr	r3, [sp, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d137      	bne.n	800613a <_dtoa_r+0x812>
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d134      	bne.n	800613e <_dtoa_r+0x816>
 80060d4:	9b03      	ldr	r3, [sp, #12]
 80060d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060da:	0d1b      	lsrs	r3, r3, #20
 80060dc:	051b      	lsls	r3, r3, #20
 80060de:	b12b      	cbz	r3, 80060ec <_dtoa_r+0x7c4>
 80060e0:	9b07      	ldr	r3, [sp, #28]
 80060e2:	f109 0901 	add.w	r9, r9, #1
 80060e6:	3301      	adds	r3, #1
 80060e8:	9307      	str	r3, [sp, #28]
 80060ea:	2301      	movs	r3, #1
 80060ec:	9308      	str	r3, [sp, #32]
 80060ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d128      	bne.n	8006146 <_dtoa_r+0x81e>
 80060f4:	2001      	movs	r0, #1
 80060f6:	e02e      	b.n	8006156 <_dtoa_r+0x82e>
 80060f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060fe:	e796      	b.n	800602e <_dtoa_r+0x706>
 8006100:	9b08      	ldr	r3, [sp, #32]
 8006102:	f108 36ff 	add.w	r6, r8, #4294967295
 8006106:	42b3      	cmp	r3, r6
 8006108:	bfb7      	itett	lt
 800610a:	9b08      	ldrlt	r3, [sp, #32]
 800610c:	1b9e      	subge	r6, r3, r6
 800610e:	1af2      	sublt	r2, r6, r3
 8006110:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006112:	bfbf      	itttt	lt
 8006114:	9608      	strlt	r6, [sp, #32]
 8006116:	189b      	addlt	r3, r3, r2
 8006118:	930c      	strlt	r3, [sp, #48]	; 0x30
 800611a:	2600      	movlt	r6, #0
 800611c:	f1b8 0f00 	cmp.w	r8, #0
 8006120:	bfb9      	ittee	lt
 8006122:	eba9 0508 	sublt.w	r5, r9, r8
 8006126:	2300      	movlt	r3, #0
 8006128:	464d      	movge	r5, r9
 800612a:	4643      	movge	r3, r8
 800612c:	e781      	b.n	8006032 <_dtoa_r+0x70a>
 800612e:	9e08      	ldr	r6, [sp, #32]
 8006130:	464d      	mov	r5, r9
 8006132:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006134:	e786      	b.n	8006044 <_dtoa_r+0x71c>
 8006136:	9a08      	ldr	r2, [sp, #32]
 8006138:	e7ad      	b.n	8006096 <_dtoa_r+0x76e>
 800613a:	2300      	movs	r3, #0
 800613c:	e7d6      	b.n	80060ec <_dtoa_r+0x7c4>
 800613e:	9b02      	ldr	r3, [sp, #8]
 8006140:	e7d4      	b.n	80060ec <_dtoa_r+0x7c4>
 8006142:	2300      	movs	r3, #0
 8006144:	9308      	str	r3, [sp, #32]
 8006146:	6933      	ldr	r3, [r6, #16]
 8006148:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800614c:	6918      	ldr	r0, [r3, #16]
 800614e:	f000 fa49 	bl	80065e4 <__hi0bits>
 8006152:	f1c0 0020 	rsb	r0, r0, #32
 8006156:	9b07      	ldr	r3, [sp, #28]
 8006158:	4418      	add	r0, r3
 800615a:	f010 001f 	ands.w	r0, r0, #31
 800615e:	d047      	beq.n	80061f0 <_dtoa_r+0x8c8>
 8006160:	f1c0 0320 	rsb	r3, r0, #32
 8006164:	2b04      	cmp	r3, #4
 8006166:	dd3b      	ble.n	80061e0 <_dtoa_r+0x8b8>
 8006168:	9b07      	ldr	r3, [sp, #28]
 800616a:	f1c0 001c 	rsb	r0, r0, #28
 800616e:	4481      	add	r9, r0
 8006170:	4405      	add	r5, r0
 8006172:	4403      	add	r3, r0
 8006174:	9307      	str	r3, [sp, #28]
 8006176:	f1b9 0f00 	cmp.w	r9, #0
 800617a:	dd05      	ble.n	8006188 <_dtoa_r+0x860>
 800617c:	4659      	mov	r1, fp
 800617e:	464a      	mov	r2, r9
 8006180:	4620      	mov	r0, r4
 8006182:	f000 fb69 	bl	8006858 <__lshift>
 8006186:	4683      	mov	fp, r0
 8006188:	9b07      	ldr	r3, [sp, #28]
 800618a:	2b00      	cmp	r3, #0
 800618c:	dd05      	ble.n	800619a <_dtoa_r+0x872>
 800618e:	4631      	mov	r1, r6
 8006190:	461a      	mov	r2, r3
 8006192:	4620      	mov	r0, r4
 8006194:	f000 fb60 	bl	8006858 <__lshift>
 8006198:	4606      	mov	r6, r0
 800619a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800619c:	b353      	cbz	r3, 80061f4 <_dtoa_r+0x8cc>
 800619e:	4631      	mov	r1, r6
 80061a0:	4658      	mov	r0, fp
 80061a2:	f000 fbad 	bl	8006900 <__mcmp>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	da24      	bge.n	80061f4 <_dtoa_r+0x8cc>
 80061aa:	2300      	movs	r3, #0
 80061ac:	4659      	mov	r1, fp
 80061ae:	220a      	movs	r2, #10
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 f9dc 	bl	800656e <__multadd>
 80061b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061bc:	4683      	mov	fp, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8144 	beq.w	800644c <_dtoa_r+0xb24>
 80061c4:	2300      	movs	r3, #0
 80061c6:	4639      	mov	r1, r7
 80061c8:	220a      	movs	r2, #10
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 f9cf 	bl	800656e <__multadd>
 80061d0:	9b04      	ldr	r3, [sp, #16]
 80061d2:	4607      	mov	r7, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	dc4d      	bgt.n	8006274 <_dtoa_r+0x94c>
 80061d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061da:	2b02      	cmp	r3, #2
 80061dc:	dd4a      	ble.n	8006274 <_dtoa_r+0x94c>
 80061de:	e011      	b.n	8006204 <_dtoa_r+0x8dc>
 80061e0:	d0c9      	beq.n	8006176 <_dtoa_r+0x84e>
 80061e2:	9a07      	ldr	r2, [sp, #28]
 80061e4:	331c      	adds	r3, #28
 80061e6:	441a      	add	r2, r3
 80061e8:	4499      	add	r9, r3
 80061ea:	441d      	add	r5, r3
 80061ec:	4613      	mov	r3, r2
 80061ee:	e7c1      	b.n	8006174 <_dtoa_r+0x84c>
 80061f0:	4603      	mov	r3, r0
 80061f2:	e7f6      	b.n	80061e2 <_dtoa_r+0x8ba>
 80061f4:	f1b8 0f00 	cmp.w	r8, #0
 80061f8:	dc36      	bgt.n	8006268 <_dtoa_r+0x940>
 80061fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	dd33      	ble.n	8006268 <_dtoa_r+0x940>
 8006200:	f8cd 8010 	str.w	r8, [sp, #16]
 8006204:	9b04      	ldr	r3, [sp, #16]
 8006206:	b963      	cbnz	r3, 8006222 <_dtoa_r+0x8fa>
 8006208:	4631      	mov	r1, r6
 800620a:	2205      	movs	r2, #5
 800620c:	4620      	mov	r0, r4
 800620e:	f000 f9ae 	bl	800656e <__multadd>
 8006212:	4601      	mov	r1, r0
 8006214:	4606      	mov	r6, r0
 8006216:	4658      	mov	r0, fp
 8006218:	f000 fb72 	bl	8006900 <__mcmp>
 800621c:	2800      	cmp	r0, #0
 800621e:	f73f add3 	bgt.w	8005dc8 <_dtoa_r+0x4a0>
 8006222:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006224:	9d06      	ldr	r5, [sp, #24]
 8006226:	ea6f 0a03 	mvn.w	sl, r3
 800622a:	f04f 0900 	mov.w	r9, #0
 800622e:	4631      	mov	r1, r6
 8006230:	4620      	mov	r0, r4
 8006232:	f000 f985 	bl	8006540 <_Bfree>
 8006236:	2f00      	cmp	r7, #0
 8006238:	f43f aebd 	beq.w	8005fb6 <_dtoa_r+0x68e>
 800623c:	f1b9 0f00 	cmp.w	r9, #0
 8006240:	d005      	beq.n	800624e <_dtoa_r+0x926>
 8006242:	45b9      	cmp	r9, r7
 8006244:	d003      	beq.n	800624e <_dtoa_r+0x926>
 8006246:	4649      	mov	r1, r9
 8006248:	4620      	mov	r0, r4
 800624a:	f000 f979 	bl	8006540 <_Bfree>
 800624e:	4639      	mov	r1, r7
 8006250:	4620      	mov	r0, r4
 8006252:	f000 f975 	bl	8006540 <_Bfree>
 8006256:	e6ae      	b.n	8005fb6 <_dtoa_r+0x68e>
 8006258:	2600      	movs	r6, #0
 800625a:	4637      	mov	r7, r6
 800625c:	e7e1      	b.n	8006222 <_dtoa_r+0x8fa>
 800625e:	46ba      	mov	sl, r7
 8006260:	4637      	mov	r7, r6
 8006262:	e5b1      	b.n	8005dc8 <_dtoa_r+0x4a0>
 8006264:	40240000 	.word	0x40240000
 8006268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626a:	f8cd 8010 	str.w	r8, [sp, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80f3 	beq.w	800645a <_dtoa_r+0xb32>
 8006274:	2d00      	cmp	r5, #0
 8006276:	dd05      	ble.n	8006284 <_dtoa_r+0x95c>
 8006278:	4639      	mov	r1, r7
 800627a:	462a      	mov	r2, r5
 800627c:	4620      	mov	r0, r4
 800627e:	f000 faeb 	bl	8006858 <__lshift>
 8006282:	4607      	mov	r7, r0
 8006284:	9b08      	ldr	r3, [sp, #32]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d04c      	beq.n	8006324 <_dtoa_r+0x9fc>
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4620      	mov	r0, r4
 800628e:	f000 f923 	bl	80064d8 <_Balloc>
 8006292:	4605      	mov	r5, r0
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	f107 010c 	add.w	r1, r7, #12
 800629a:	3202      	adds	r2, #2
 800629c:	0092      	lsls	r2, r2, #2
 800629e:	300c      	adds	r0, #12
 80062a0:	f7fe fe30 	bl	8004f04 <memcpy>
 80062a4:	2201      	movs	r2, #1
 80062a6:	4629      	mov	r1, r5
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 fad5 	bl	8006858 <__lshift>
 80062ae:	46b9      	mov	r9, r7
 80062b0:	4607      	mov	r7, r0
 80062b2:	9b06      	ldr	r3, [sp, #24]
 80062b4:	9307      	str	r3, [sp, #28]
 80062b6:	9b02      	ldr	r3, [sp, #8]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	9308      	str	r3, [sp, #32]
 80062be:	4631      	mov	r1, r6
 80062c0:	4658      	mov	r0, fp
 80062c2:	f7ff faa1 	bl	8005808 <quorem>
 80062c6:	4649      	mov	r1, r9
 80062c8:	4605      	mov	r5, r0
 80062ca:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80062ce:	4658      	mov	r0, fp
 80062d0:	f000 fb16 	bl	8006900 <__mcmp>
 80062d4:	463a      	mov	r2, r7
 80062d6:	9002      	str	r0, [sp, #8]
 80062d8:	4631      	mov	r1, r6
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 fb2a 	bl	8006934 <__mdiff>
 80062e0:	68c3      	ldr	r3, [r0, #12]
 80062e2:	4602      	mov	r2, r0
 80062e4:	bb03      	cbnz	r3, 8006328 <_dtoa_r+0xa00>
 80062e6:	4601      	mov	r1, r0
 80062e8:	9009      	str	r0, [sp, #36]	; 0x24
 80062ea:	4658      	mov	r0, fp
 80062ec:	f000 fb08 	bl	8006900 <__mcmp>
 80062f0:	4603      	mov	r3, r0
 80062f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f4:	4611      	mov	r1, r2
 80062f6:	4620      	mov	r0, r4
 80062f8:	9309      	str	r3, [sp, #36]	; 0x24
 80062fa:	f000 f921 	bl	8006540 <_Bfree>
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	b9a3      	cbnz	r3, 800632c <_dtoa_r+0xa04>
 8006302:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006304:	b992      	cbnz	r2, 800632c <_dtoa_r+0xa04>
 8006306:	9a08      	ldr	r2, [sp, #32]
 8006308:	b982      	cbnz	r2, 800632c <_dtoa_r+0xa04>
 800630a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800630e:	d029      	beq.n	8006364 <_dtoa_r+0xa3c>
 8006310:	9b02      	ldr	r3, [sp, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	dd01      	ble.n	800631a <_dtoa_r+0x9f2>
 8006316:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800631a:	9b07      	ldr	r3, [sp, #28]
 800631c:	1c5d      	adds	r5, r3, #1
 800631e:	f883 8000 	strb.w	r8, [r3]
 8006322:	e784      	b.n	800622e <_dtoa_r+0x906>
 8006324:	4638      	mov	r0, r7
 8006326:	e7c2      	b.n	80062ae <_dtoa_r+0x986>
 8006328:	2301      	movs	r3, #1
 800632a:	e7e3      	b.n	80062f4 <_dtoa_r+0x9cc>
 800632c:	9a02      	ldr	r2, [sp, #8]
 800632e:	2a00      	cmp	r2, #0
 8006330:	db04      	blt.n	800633c <_dtoa_r+0xa14>
 8006332:	d123      	bne.n	800637c <_dtoa_r+0xa54>
 8006334:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006336:	bb0a      	cbnz	r2, 800637c <_dtoa_r+0xa54>
 8006338:	9a08      	ldr	r2, [sp, #32]
 800633a:	b9fa      	cbnz	r2, 800637c <_dtoa_r+0xa54>
 800633c:	2b00      	cmp	r3, #0
 800633e:	ddec      	ble.n	800631a <_dtoa_r+0x9f2>
 8006340:	4659      	mov	r1, fp
 8006342:	2201      	movs	r2, #1
 8006344:	4620      	mov	r0, r4
 8006346:	f000 fa87 	bl	8006858 <__lshift>
 800634a:	4631      	mov	r1, r6
 800634c:	4683      	mov	fp, r0
 800634e:	f000 fad7 	bl	8006900 <__mcmp>
 8006352:	2800      	cmp	r0, #0
 8006354:	dc03      	bgt.n	800635e <_dtoa_r+0xa36>
 8006356:	d1e0      	bne.n	800631a <_dtoa_r+0x9f2>
 8006358:	f018 0f01 	tst.w	r8, #1
 800635c:	d0dd      	beq.n	800631a <_dtoa_r+0x9f2>
 800635e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006362:	d1d8      	bne.n	8006316 <_dtoa_r+0x9ee>
 8006364:	9b07      	ldr	r3, [sp, #28]
 8006366:	9a07      	ldr	r2, [sp, #28]
 8006368:	1c5d      	adds	r5, r3, #1
 800636a:	2339      	movs	r3, #57	; 0x39
 800636c:	7013      	strb	r3, [r2, #0]
 800636e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006372:	1e6a      	subs	r2, r5, #1
 8006374:	2b39      	cmp	r3, #57	; 0x39
 8006376:	d04d      	beq.n	8006414 <_dtoa_r+0xaec>
 8006378:	3301      	adds	r3, #1
 800637a:	e052      	b.n	8006422 <_dtoa_r+0xafa>
 800637c:	9a07      	ldr	r2, [sp, #28]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f102 0501 	add.w	r5, r2, #1
 8006384:	dd06      	ble.n	8006394 <_dtoa_r+0xa6c>
 8006386:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800638a:	d0eb      	beq.n	8006364 <_dtoa_r+0xa3c>
 800638c:	f108 0801 	add.w	r8, r8, #1
 8006390:	9b07      	ldr	r3, [sp, #28]
 8006392:	e7c4      	b.n	800631e <_dtoa_r+0x9f6>
 8006394:	9b06      	ldr	r3, [sp, #24]
 8006396:	9a04      	ldr	r2, [sp, #16]
 8006398:	1aeb      	subs	r3, r5, r3
 800639a:	4293      	cmp	r3, r2
 800639c:	f805 8c01 	strb.w	r8, [r5, #-1]
 80063a0:	d021      	beq.n	80063e6 <_dtoa_r+0xabe>
 80063a2:	4659      	mov	r1, fp
 80063a4:	2300      	movs	r3, #0
 80063a6:	220a      	movs	r2, #10
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 f8e0 	bl	800656e <__multadd>
 80063ae:	45b9      	cmp	r9, r7
 80063b0:	4683      	mov	fp, r0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	f04f 020a 	mov.w	r2, #10
 80063ba:	4649      	mov	r1, r9
 80063bc:	4620      	mov	r0, r4
 80063be:	d105      	bne.n	80063cc <_dtoa_r+0xaa4>
 80063c0:	f000 f8d5 	bl	800656e <__multadd>
 80063c4:	4681      	mov	r9, r0
 80063c6:	4607      	mov	r7, r0
 80063c8:	9507      	str	r5, [sp, #28]
 80063ca:	e778      	b.n	80062be <_dtoa_r+0x996>
 80063cc:	f000 f8cf 	bl	800656e <__multadd>
 80063d0:	4639      	mov	r1, r7
 80063d2:	4681      	mov	r9, r0
 80063d4:	2300      	movs	r3, #0
 80063d6:	220a      	movs	r2, #10
 80063d8:	4620      	mov	r0, r4
 80063da:	f000 f8c8 	bl	800656e <__multadd>
 80063de:	4607      	mov	r7, r0
 80063e0:	e7f2      	b.n	80063c8 <_dtoa_r+0xaa0>
 80063e2:	f04f 0900 	mov.w	r9, #0
 80063e6:	4659      	mov	r1, fp
 80063e8:	2201      	movs	r2, #1
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 fa34 	bl	8006858 <__lshift>
 80063f0:	4631      	mov	r1, r6
 80063f2:	4683      	mov	fp, r0
 80063f4:	f000 fa84 	bl	8006900 <__mcmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	dcb8      	bgt.n	800636e <_dtoa_r+0xa46>
 80063fc:	d102      	bne.n	8006404 <_dtoa_r+0xadc>
 80063fe:	f018 0f01 	tst.w	r8, #1
 8006402:	d1b4      	bne.n	800636e <_dtoa_r+0xa46>
 8006404:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006408:	1e6a      	subs	r2, r5, #1
 800640a:	2b30      	cmp	r3, #48	; 0x30
 800640c:	f47f af0f 	bne.w	800622e <_dtoa_r+0x906>
 8006410:	4615      	mov	r5, r2
 8006412:	e7f7      	b.n	8006404 <_dtoa_r+0xadc>
 8006414:	9b06      	ldr	r3, [sp, #24]
 8006416:	4293      	cmp	r3, r2
 8006418:	d105      	bne.n	8006426 <_dtoa_r+0xafe>
 800641a:	2331      	movs	r3, #49	; 0x31
 800641c:	9a06      	ldr	r2, [sp, #24]
 800641e:	f10a 0a01 	add.w	sl, sl, #1
 8006422:	7013      	strb	r3, [r2, #0]
 8006424:	e703      	b.n	800622e <_dtoa_r+0x906>
 8006426:	4615      	mov	r5, r2
 8006428:	e7a1      	b.n	800636e <_dtoa_r+0xa46>
 800642a:	4b17      	ldr	r3, [pc, #92]	; (8006488 <_dtoa_r+0xb60>)
 800642c:	f7ff bae1 	b.w	80059f2 <_dtoa_r+0xca>
 8006430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006432:	2b00      	cmp	r3, #0
 8006434:	f47f aabb 	bne.w	80059ae <_dtoa_r+0x86>
 8006438:	4b14      	ldr	r3, [pc, #80]	; (800648c <_dtoa_r+0xb64>)
 800643a:	f7ff bada 	b.w	80059f2 <_dtoa_r+0xca>
 800643e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006440:	2b01      	cmp	r3, #1
 8006442:	f77f ae3f 	ble.w	80060c4 <_dtoa_r+0x79c>
 8006446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006448:	9308      	str	r3, [sp, #32]
 800644a:	e653      	b.n	80060f4 <_dtoa_r+0x7cc>
 800644c:	9b04      	ldr	r3, [sp, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	dc03      	bgt.n	800645a <_dtoa_r+0xb32>
 8006452:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006454:	2b02      	cmp	r3, #2
 8006456:	f73f aed5 	bgt.w	8006204 <_dtoa_r+0x8dc>
 800645a:	9d06      	ldr	r5, [sp, #24]
 800645c:	4631      	mov	r1, r6
 800645e:	4658      	mov	r0, fp
 8006460:	f7ff f9d2 	bl	8005808 <quorem>
 8006464:	9b06      	ldr	r3, [sp, #24]
 8006466:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800646a:	f805 8b01 	strb.w	r8, [r5], #1
 800646e:	9a04      	ldr	r2, [sp, #16]
 8006470:	1aeb      	subs	r3, r5, r3
 8006472:	429a      	cmp	r2, r3
 8006474:	ddb5      	ble.n	80063e2 <_dtoa_r+0xaba>
 8006476:	4659      	mov	r1, fp
 8006478:	2300      	movs	r3, #0
 800647a:	220a      	movs	r2, #10
 800647c:	4620      	mov	r0, r4
 800647e:	f000 f876 	bl	800656e <__multadd>
 8006482:	4683      	mov	fp, r0
 8006484:	e7ea      	b.n	800645c <_dtoa_r+0xb34>
 8006486:	bf00      	nop
 8006488:	0800721c 	.word	0x0800721c
 800648c:	08007240 	.word	0x08007240

08006490 <_localeconv_r>:
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <_localeconv_r+0x14>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a18      	ldr	r0, [r3, #32]
 8006496:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <_localeconv_r+0x18>)
 8006498:	2800      	cmp	r0, #0
 800649a:	bf08      	it	eq
 800649c:	4618      	moveq	r0, r3
 800649e:	30f0      	adds	r0, #240	; 0xf0
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	2000000c 	.word	0x2000000c
 80064a8:	20000070 	.word	0x20000070

080064ac <malloc>:
 80064ac:	4b02      	ldr	r3, [pc, #8]	; (80064b8 <malloc+0xc>)
 80064ae:	4601      	mov	r1, r0
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	f000 bb47 	b.w	8006b44 <_malloc_r>
 80064b6:	bf00      	nop
 80064b8:	2000000c 	.word	0x2000000c

080064bc <memchr>:
 80064bc:	b510      	push	{r4, lr}
 80064be:	b2c9      	uxtb	r1, r1
 80064c0:	4402      	add	r2, r0
 80064c2:	4290      	cmp	r0, r2
 80064c4:	4603      	mov	r3, r0
 80064c6:	d101      	bne.n	80064cc <memchr+0x10>
 80064c8:	2300      	movs	r3, #0
 80064ca:	e003      	b.n	80064d4 <memchr+0x18>
 80064cc:	781c      	ldrb	r4, [r3, #0]
 80064ce:	3001      	adds	r0, #1
 80064d0:	428c      	cmp	r4, r1
 80064d2:	d1f6      	bne.n	80064c2 <memchr+0x6>
 80064d4:	4618      	mov	r0, r3
 80064d6:	bd10      	pop	{r4, pc}

080064d8 <_Balloc>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064dc:	4604      	mov	r4, r0
 80064de:	460e      	mov	r6, r1
 80064e0:	b93d      	cbnz	r5, 80064f2 <_Balloc+0x1a>
 80064e2:	2010      	movs	r0, #16
 80064e4:	f7ff ffe2 	bl	80064ac <malloc>
 80064e8:	6260      	str	r0, [r4, #36]	; 0x24
 80064ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064ee:	6005      	str	r5, [r0, #0]
 80064f0:	60c5      	str	r5, [r0, #12]
 80064f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80064f4:	68eb      	ldr	r3, [r5, #12]
 80064f6:	b183      	cbz	r3, 800651a <_Balloc+0x42>
 80064f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006500:	b9b8      	cbnz	r0, 8006532 <_Balloc+0x5a>
 8006502:	2101      	movs	r1, #1
 8006504:	fa01 f506 	lsl.w	r5, r1, r6
 8006508:	1d6a      	adds	r2, r5, #5
 800650a:	0092      	lsls	r2, r2, #2
 800650c:	4620      	mov	r0, r4
 800650e:	f000 fabe 	bl	8006a8e <_calloc_r>
 8006512:	b160      	cbz	r0, 800652e <_Balloc+0x56>
 8006514:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006518:	e00e      	b.n	8006538 <_Balloc+0x60>
 800651a:	2221      	movs	r2, #33	; 0x21
 800651c:	2104      	movs	r1, #4
 800651e:	4620      	mov	r0, r4
 8006520:	f000 fab5 	bl	8006a8e <_calloc_r>
 8006524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006526:	60e8      	str	r0, [r5, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e4      	bne.n	80064f8 <_Balloc+0x20>
 800652e:	2000      	movs	r0, #0
 8006530:	bd70      	pop	{r4, r5, r6, pc}
 8006532:	6802      	ldr	r2, [r0, #0]
 8006534:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006538:	2300      	movs	r3, #0
 800653a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800653e:	e7f7      	b.n	8006530 <_Balloc+0x58>

08006540 <_Bfree>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006544:	4606      	mov	r6, r0
 8006546:	460d      	mov	r5, r1
 8006548:	b93c      	cbnz	r4, 800655a <_Bfree+0x1a>
 800654a:	2010      	movs	r0, #16
 800654c:	f7ff ffae 	bl	80064ac <malloc>
 8006550:	6270      	str	r0, [r6, #36]	; 0x24
 8006552:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006556:	6004      	str	r4, [r0, #0]
 8006558:	60c4      	str	r4, [r0, #12]
 800655a:	b13d      	cbz	r5, 800656c <_Bfree+0x2c>
 800655c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800655e:	686a      	ldr	r2, [r5, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006566:	6029      	str	r1, [r5, #0]
 8006568:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800656c:	bd70      	pop	{r4, r5, r6, pc}

0800656e <__multadd>:
 800656e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006572:	461f      	mov	r7, r3
 8006574:	4606      	mov	r6, r0
 8006576:	460c      	mov	r4, r1
 8006578:	2300      	movs	r3, #0
 800657a:	690d      	ldr	r5, [r1, #16]
 800657c:	f101 0c14 	add.w	ip, r1, #20
 8006580:	f8dc 0000 	ldr.w	r0, [ip]
 8006584:	3301      	adds	r3, #1
 8006586:	b281      	uxth	r1, r0
 8006588:	fb02 7101 	mla	r1, r2, r1, r7
 800658c:	0c00      	lsrs	r0, r0, #16
 800658e:	0c0f      	lsrs	r7, r1, #16
 8006590:	fb02 7000 	mla	r0, r2, r0, r7
 8006594:	b289      	uxth	r1, r1
 8006596:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800659a:	429d      	cmp	r5, r3
 800659c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80065a0:	f84c 1b04 	str.w	r1, [ip], #4
 80065a4:	dcec      	bgt.n	8006580 <__multadd+0x12>
 80065a6:	b1d7      	cbz	r7, 80065de <__multadd+0x70>
 80065a8:	68a3      	ldr	r3, [r4, #8]
 80065aa:	42ab      	cmp	r3, r5
 80065ac:	dc12      	bgt.n	80065d4 <__multadd+0x66>
 80065ae:	6861      	ldr	r1, [r4, #4]
 80065b0:	4630      	mov	r0, r6
 80065b2:	3101      	adds	r1, #1
 80065b4:	f7ff ff90 	bl	80064d8 <_Balloc>
 80065b8:	4680      	mov	r8, r0
 80065ba:	6922      	ldr	r2, [r4, #16]
 80065bc:	f104 010c 	add.w	r1, r4, #12
 80065c0:	3202      	adds	r2, #2
 80065c2:	0092      	lsls	r2, r2, #2
 80065c4:	300c      	adds	r0, #12
 80065c6:	f7fe fc9d 	bl	8004f04 <memcpy>
 80065ca:	4621      	mov	r1, r4
 80065cc:	4630      	mov	r0, r6
 80065ce:	f7ff ffb7 	bl	8006540 <_Bfree>
 80065d2:	4644      	mov	r4, r8
 80065d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065d8:	3501      	adds	r5, #1
 80065da:	615f      	str	r7, [r3, #20]
 80065dc:	6125      	str	r5, [r4, #16]
 80065de:	4620      	mov	r0, r4
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080065e4 <__hi0bits>:
 80065e4:	0c02      	lsrs	r2, r0, #16
 80065e6:	0412      	lsls	r2, r2, #16
 80065e8:	4603      	mov	r3, r0
 80065ea:	b9b2      	cbnz	r2, 800661a <__hi0bits+0x36>
 80065ec:	0403      	lsls	r3, r0, #16
 80065ee:	2010      	movs	r0, #16
 80065f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80065f4:	bf04      	itt	eq
 80065f6:	021b      	lsleq	r3, r3, #8
 80065f8:	3008      	addeq	r0, #8
 80065fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80065fe:	bf04      	itt	eq
 8006600:	011b      	lsleq	r3, r3, #4
 8006602:	3004      	addeq	r0, #4
 8006604:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006608:	bf04      	itt	eq
 800660a:	009b      	lsleq	r3, r3, #2
 800660c:	3002      	addeq	r0, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	db06      	blt.n	8006620 <__hi0bits+0x3c>
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	d503      	bpl.n	800661e <__hi0bits+0x3a>
 8006616:	3001      	adds	r0, #1
 8006618:	4770      	bx	lr
 800661a:	2000      	movs	r0, #0
 800661c:	e7e8      	b.n	80065f0 <__hi0bits+0xc>
 800661e:	2020      	movs	r0, #32
 8006620:	4770      	bx	lr

08006622 <__lo0bits>:
 8006622:	6803      	ldr	r3, [r0, #0]
 8006624:	4601      	mov	r1, r0
 8006626:	f013 0207 	ands.w	r2, r3, #7
 800662a:	d00b      	beq.n	8006644 <__lo0bits+0x22>
 800662c:	07da      	lsls	r2, r3, #31
 800662e:	d423      	bmi.n	8006678 <__lo0bits+0x56>
 8006630:	0798      	lsls	r0, r3, #30
 8006632:	bf49      	itett	mi
 8006634:	085b      	lsrmi	r3, r3, #1
 8006636:	089b      	lsrpl	r3, r3, #2
 8006638:	2001      	movmi	r0, #1
 800663a:	600b      	strmi	r3, [r1, #0]
 800663c:	bf5c      	itt	pl
 800663e:	600b      	strpl	r3, [r1, #0]
 8006640:	2002      	movpl	r0, #2
 8006642:	4770      	bx	lr
 8006644:	b298      	uxth	r0, r3
 8006646:	b9a8      	cbnz	r0, 8006674 <__lo0bits+0x52>
 8006648:	2010      	movs	r0, #16
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006650:	bf04      	itt	eq
 8006652:	0a1b      	lsreq	r3, r3, #8
 8006654:	3008      	addeq	r0, #8
 8006656:	071a      	lsls	r2, r3, #28
 8006658:	bf04      	itt	eq
 800665a:	091b      	lsreq	r3, r3, #4
 800665c:	3004      	addeq	r0, #4
 800665e:	079a      	lsls	r2, r3, #30
 8006660:	bf04      	itt	eq
 8006662:	089b      	lsreq	r3, r3, #2
 8006664:	3002      	addeq	r0, #2
 8006666:	07da      	lsls	r2, r3, #31
 8006668:	d402      	bmi.n	8006670 <__lo0bits+0x4e>
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	d006      	beq.n	800667c <__lo0bits+0x5a>
 800666e:	3001      	adds	r0, #1
 8006670:	600b      	str	r3, [r1, #0]
 8006672:	4770      	bx	lr
 8006674:	4610      	mov	r0, r2
 8006676:	e7e9      	b.n	800664c <__lo0bits+0x2a>
 8006678:	2000      	movs	r0, #0
 800667a:	4770      	bx	lr
 800667c:	2020      	movs	r0, #32
 800667e:	4770      	bx	lr

08006680 <__i2b>:
 8006680:	b510      	push	{r4, lr}
 8006682:	460c      	mov	r4, r1
 8006684:	2101      	movs	r1, #1
 8006686:	f7ff ff27 	bl	80064d8 <_Balloc>
 800668a:	2201      	movs	r2, #1
 800668c:	6144      	str	r4, [r0, #20]
 800668e:	6102      	str	r2, [r0, #16]
 8006690:	bd10      	pop	{r4, pc}

08006692 <__multiply>:
 8006692:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006696:	4614      	mov	r4, r2
 8006698:	690a      	ldr	r2, [r1, #16]
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	4688      	mov	r8, r1
 800669e:	429a      	cmp	r2, r3
 80066a0:	bfbe      	ittt	lt
 80066a2:	460b      	movlt	r3, r1
 80066a4:	46a0      	movlt	r8, r4
 80066a6:	461c      	movlt	r4, r3
 80066a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80066ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80066b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80066b8:	eb07 0609 	add.w	r6, r7, r9
 80066bc:	42b3      	cmp	r3, r6
 80066be:	bfb8      	it	lt
 80066c0:	3101      	addlt	r1, #1
 80066c2:	f7ff ff09 	bl	80064d8 <_Balloc>
 80066c6:	f100 0514 	add.w	r5, r0, #20
 80066ca:	462b      	mov	r3, r5
 80066cc:	2200      	movs	r2, #0
 80066ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80066d2:	4573      	cmp	r3, lr
 80066d4:	d316      	bcc.n	8006704 <__multiply+0x72>
 80066d6:	f104 0214 	add.w	r2, r4, #20
 80066da:	f108 0114 	add.w	r1, r8, #20
 80066de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80066e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	9b00      	ldr	r3, [sp, #0]
 80066ea:	9201      	str	r2, [sp, #4]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d80c      	bhi.n	800670a <__multiply+0x78>
 80066f0:	2e00      	cmp	r6, #0
 80066f2:	dd03      	ble.n	80066fc <__multiply+0x6a>
 80066f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d05d      	beq.n	80067b8 <__multiply+0x126>
 80066fc:	6106      	str	r6, [r0, #16]
 80066fe:	b003      	add	sp, #12
 8006700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006704:	f843 2b04 	str.w	r2, [r3], #4
 8006708:	e7e3      	b.n	80066d2 <__multiply+0x40>
 800670a:	f8b2 b000 	ldrh.w	fp, [r2]
 800670e:	f1bb 0f00 	cmp.w	fp, #0
 8006712:	d023      	beq.n	800675c <__multiply+0xca>
 8006714:	4689      	mov	r9, r1
 8006716:	46ac      	mov	ip, r5
 8006718:	f04f 0800 	mov.w	r8, #0
 800671c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006720:	f8dc a000 	ldr.w	sl, [ip]
 8006724:	b2a3      	uxth	r3, r4
 8006726:	fa1f fa8a 	uxth.w	sl, sl
 800672a:	fb0b a303 	mla	r3, fp, r3, sl
 800672e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006732:	f8dc 4000 	ldr.w	r4, [ip]
 8006736:	4443      	add	r3, r8
 8006738:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800673c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006740:	46e2      	mov	sl, ip
 8006742:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006746:	b29b      	uxth	r3, r3
 8006748:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800674c:	454f      	cmp	r7, r9
 800674e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006752:	f84a 3b04 	str.w	r3, [sl], #4
 8006756:	d82b      	bhi.n	80067b0 <__multiply+0x11e>
 8006758:	f8cc 8004 	str.w	r8, [ip, #4]
 800675c:	9b01      	ldr	r3, [sp, #4]
 800675e:	3204      	adds	r2, #4
 8006760:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006764:	f1ba 0f00 	cmp.w	sl, #0
 8006768:	d020      	beq.n	80067ac <__multiply+0x11a>
 800676a:	4689      	mov	r9, r1
 800676c:	46a8      	mov	r8, r5
 800676e:	f04f 0b00 	mov.w	fp, #0
 8006772:	682b      	ldr	r3, [r5, #0]
 8006774:	f8b9 c000 	ldrh.w	ip, [r9]
 8006778:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800677c:	b29b      	uxth	r3, r3
 800677e:	fb0a 440c 	mla	r4, sl, ip, r4
 8006782:	46c4      	mov	ip, r8
 8006784:	445c      	add	r4, fp
 8006786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800678a:	f84c 3b04 	str.w	r3, [ip], #4
 800678e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006792:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006796:	0c1b      	lsrs	r3, r3, #16
 8006798:	fb0a b303 	mla	r3, sl, r3, fp
 800679c:	454f      	cmp	r7, r9
 800679e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80067a2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80067a6:	d805      	bhi.n	80067b4 <__multiply+0x122>
 80067a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80067ac:	3504      	adds	r5, #4
 80067ae:	e79b      	b.n	80066e8 <__multiply+0x56>
 80067b0:	46d4      	mov	ip, sl
 80067b2:	e7b3      	b.n	800671c <__multiply+0x8a>
 80067b4:	46e0      	mov	r8, ip
 80067b6:	e7dd      	b.n	8006774 <__multiply+0xe2>
 80067b8:	3e01      	subs	r6, #1
 80067ba:	e799      	b.n	80066f0 <__multiply+0x5e>

080067bc <__pow5mult>:
 80067bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067c0:	4615      	mov	r5, r2
 80067c2:	f012 0203 	ands.w	r2, r2, #3
 80067c6:	4606      	mov	r6, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	d007      	beq.n	80067dc <__pow5mult+0x20>
 80067cc:	4c21      	ldr	r4, [pc, #132]	; (8006854 <__pow5mult+0x98>)
 80067ce:	3a01      	subs	r2, #1
 80067d0:	2300      	movs	r3, #0
 80067d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067d6:	f7ff feca 	bl	800656e <__multadd>
 80067da:	4607      	mov	r7, r0
 80067dc:	10ad      	asrs	r5, r5, #2
 80067de:	d035      	beq.n	800684c <__pow5mult+0x90>
 80067e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067e2:	b93c      	cbnz	r4, 80067f4 <__pow5mult+0x38>
 80067e4:	2010      	movs	r0, #16
 80067e6:	f7ff fe61 	bl	80064ac <malloc>
 80067ea:	6270      	str	r0, [r6, #36]	; 0x24
 80067ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067f0:	6004      	str	r4, [r0, #0]
 80067f2:	60c4      	str	r4, [r0, #12]
 80067f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067fc:	b94c      	cbnz	r4, 8006812 <__pow5mult+0x56>
 80067fe:	f240 2171 	movw	r1, #625	; 0x271
 8006802:	4630      	mov	r0, r6
 8006804:	f7ff ff3c 	bl	8006680 <__i2b>
 8006808:	2300      	movs	r3, #0
 800680a:	4604      	mov	r4, r0
 800680c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006810:	6003      	str	r3, [r0, #0]
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	07eb      	lsls	r3, r5, #31
 8006818:	d50a      	bpl.n	8006830 <__pow5mult+0x74>
 800681a:	4639      	mov	r1, r7
 800681c:	4622      	mov	r2, r4
 800681e:	4630      	mov	r0, r6
 8006820:	f7ff ff37 	bl	8006692 <__multiply>
 8006824:	4681      	mov	r9, r0
 8006826:	4639      	mov	r1, r7
 8006828:	4630      	mov	r0, r6
 800682a:	f7ff fe89 	bl	8006540 <_Bfree>
 800682e:	464f      	mov	r7, r9
 8006830:	106d      	asrs	r5, r5, #1
 8006832:	d00b      	beq.n	800684c <__pow5mult+0x90>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	b938      	cbnz	r0, 8006848 <__pow5mult+0x8c>
 8006838:	4622      	mov	r2, r4
 800683a:	4621      	mov	r1, r4
 800683c:	4630      	mov	r0, r6
 800683e:	f7ff ff28 	bl	8006692 <__multiply>
 8006842:	6020      	str	r0, [r4, #0]
 8006844:	f8c0 8000 	str.w	r8, [r0]
 8006848:	4604      	mov	r4, r0
 800684a:	e7e4      	b.n	8006816 <__pow5mult+0x5a>
 800684c:	4638      	mov	r0, r7
 800684e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006852:	bf00      	nop
 8006854:	08007340 	.word	0x08007340

08006858 <__lshift>:
 8006858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	460c      	mov	r4, r1
 800685e:	4607      	mov	r7, r0
 8006860:	4616      	mov	r6, r2
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006868:	eb0a 0903 	add.w	r9, sl, r3
 800686c:	6849      	ldr	r1, [r1, #4]
 800686e:	68a3      	ldr	r3, [r4, #8]
 8006870:	f109 0501 	add.w	r5, r9, #1
 8006874:	42ab      	cmp	r3, r5
 8006876:	db32      	blt.n	80068de <__lshift+0x86>
 8006878:	4638      	mov	r0, r7
 800687a:	f7ff fe2d 	bl	80064d8 <_Balloc>
 800687e:	2300      	movs	r3, #0
 8006880:	4680      	mov	r8, r0
 8006882:	461a      	mov	r2, r3
 8006884:	f100 0114 	add.w	r1, r0, #20
 8006888:	4553      	cmp	r3, sl
 800688a:	db2b      	blt.n	80068e4 <__lshift+0x8c>
 800688c:	6920      	ldr	r0, [r4, #16]
 800688e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006892:	f104 0314 	add.w	r3, r4, #20
 8006896:	f016 021f 	ands.w	r2, r6, #31
 800689a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800689e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068a2:	d025      	beq.n	80068f0 <__lshift+0x98>
 80068a4:	2000      	movs	r0, #0
 80068a6:	f1c2 0e20 	rsb	lr, r2, #32
 80068aa:	468a      	mov	sl, r1
 80068ac:	681e      	ldr	r6, [r3, #0]
 80068ae:	4096      	lsls	r6, r2
 80068b0:	4330      	orrs	r0, r6
 80068b2:	f84a 0b04 	str.w	r0, [sl], #4
 80068b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80068ba:	459c      	cmp	ip, r3
 80068bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80068c0:	d814      	bhi.n	80068ec <__lshift+0x94>
 80068c2:	6048      	str	r0, [r1, #4]
 80068c4:	b108      	cbz	r0, 80068ca <__lshift+0x72>
 80068c6:	f109 0502 	add.w	r5, r9, #2
 80068ca:	3d01      	subs	r5, #1
 80068cc:	4638      	mov	r0, r7
 80068ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80068d2:	4621      	mov	r1, r4
 80068d4:	f7ff fe34 	bl	8006540 <_Bfree>
 80068d8:	4640      	mov	r0, r8
 80068da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068de:	3101      	adds	r1, #1
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	e7c7      	b.n	8006874 <__lshift+0x1c>
 80068e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80068e8:	3301      	adds	r3, #1
 80068ea:	e7cd      	b.n	8006888 <__lshift+0x30>
 80068ec:	4651      	mov	r1, sl
 80068ee:	e7dc      	b.n	80068aa <__lshift+0x52>
 80068f0:	3904      	subs	r1, #4
 80068f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f6:	459c      	cmp	ip, r3
 80068f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80068fc:	d8f9      	bhi.n	80068f2 <__lshift+0x9a>
 80068fe:	e7e4      	b.n	80068ca <__lshift+0x72>

08006900 <__mcmp>:
 8006900:	6903      	ldr	r3, [r0, #16]
 8006902:	690a      	ldr	r2, [r1, #16]
 8006904:	b530      	push	{r4, r5, lr}
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	d10c      	bne.n	8006924 <__mcmp+0x24>
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	3014      	adds	r0, #20
 800690e:	3114      	adds	r1, #20
 8006910:	1884      	adds	r4, r0, r2
 8006912:	4411      	add	r1, r2
 8006914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800691c:	4295      	cmp	r5, r2
 800691e:	d003      	beq.n	8006928 <__mcmp+0x28>
 8006920:	d305      	bcc.n	800692e <__mcmp+0x2e>
 8006922:	2301      	movs	r3, #1
 8006924:	4618      	mov	r0, r3
 8006926:	bd30      	pop	{r4, r5, pc}
 8006928:	42a0      	cmp	r0, r4
 800692a:	d3f3      	bcc.n	8006914 <__mcmp+0x14>
 800692c:	e7fa      	b.n	8006924 <__mcmp+0x24>
 800692e:	f04f 33ff 	mov.w	r3, #4294967295
 8006932:	e7f7      	b.n	8006924 <__mcmp+0x24>

08006934 <__mdiff>:
 8006934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006938:	460d      	mov	r5, r1
 800693a:	4607      	mov	r7, r0
 800693c:	4611      	mov	r1, r2
 800693e:	4628      	mov	r0, r5
 8006940:	4614      	mov	r4, r2
 8006942:	f7ff ffdd 	bl	8006900 <__mcmp>
 8006946:	1e06      	subs	r6, r0, #0
 8006948:	d108      	bne.n	800695c <__mdiff+0x28>
 800694a:	4631      	mov	r1, r6
 800694c:	4638      	mov	r0, r7
 800694e:	f7ff fdc3 	bl	80064d8 <_Balloc>
 8006952:	2301      	movs	r3, #1
 8006954:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695c:	bfa4      	itt	ge
 800695e:	4623      	movge	r3, r4
 8006960:	462c      	movge	r4, r5
 8006962:	4638      	mov	r0, r7
 8006964:	6861      	ldr	r1, [r4, #4]
 8006966:	bfa6      	itte	ge
 8006968:	461d      	movge	r5, r3
 800696a:	2600      	movge	r6, #0
 800696c:	2601      	movlt	r6, #1
 800696e:	f7ff fdb3 	bl	80064d8 <_Balloc>
 8006972:	f04f 0e00 	mov.w	lr, #0
 8006976:	60c6      	str	r6, [r0, #12]
 8006978:	692b      	ldr	r3, [r5, #16]
 800697a:	6926      	ldr	r6, [r4, #16]
 800697c:	f104 0214 	add.w	r2, r4, #20
 8006980:	f105 0914 	add.w	r9, r5, #20
 8006984:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006988:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800698c:	f100 0114 	add.w	r1, r0, #20
 8006990:	f852 ab04 	ldr.w	sl, [r2], #4
 8006994:	f859 5b04 	ldr.w	r5, [r9], #4
 8006998:	fa1f f38a 	uxth.w	r3, sl
 800699c:	4473      	add	r3, lr
 800699e:	b2ac      	uxth	r4, r5
 80069a0:	1b1b      	subs	r3, r3, r4
 80069a2:	0c2c      	lsrs	r4, r5, #16
 80069a4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80069a8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80069b2:	45c8      	cmp	r8, r9
 80069b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80069b8:	4694      	mov	ip, r2
 80069ba:	f841 4b04 	str.w	r4, [r1], #4
 80069be:	d8e7      	bhi.n	8006990 <__mdiff+0x5c>
 80069c0:	45bc      	cmp	ip, r7
 80069c2:	d304      	bcc.n	80069ce <__mdiff+0x9a>
 80069c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80069c8:	b183      	cbz	r3, 80069ec <__mdiff+0xb8>
 80069ca:	6106      	str	r6, [r0, #16]
 80069cc:	e7c4      	b.n	8006958 <__mdiff+0x24>
 80069ce:	f85c 4b04 	ldr.w	r4, [ip], #4
 80069d2:	b2a2      	uxth	r2, r4
 80069d4:	4472      	add	r2, lr
 80069d6:	1413      	asrs	r3, r2, #16
 80069d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80069dc:	b292      	uxth	r2, r2
 80069de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069e2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80069e6:	f841 2b04 	str.w	r2, [r1], #4
 80069ea:	e7e9      	b.n	80069c0 <__mdiff+0x8c>
 80069ec:	3e01      	subs	r6, #1
 80069ee:	e7e9      	b.n	80069c4 <__mdiff+0x90>

080069f0 <__d2b>:
 80069f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80069f4:	461c      	mov	r4, r3
 80069f6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80069fa:	2101      	movs	r1, #1
 80069fc:	4690      	mov	r8, r2
 80069fe:	f7ff fd6b 	bl	80064d8 <_Balloc>
 8006a02:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006a06:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	bb34      	cbnz	r4, 8006a5c <__d2b+0x6c>
 8006a0e:	9201      	str	r2, [sp, #4]
 8006a10:	f1b8 0200 	subs.w	r2, r8, #0
 8006a14:	d027      	beq.n	8006a66 <__d2b+0x76>
 8006a16:	a802      	add	r0, sp, #8
 8006a18:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006a1c:	f7ff fe01 	bl	8006622 <__lo0bits>
 8006a20:	9900      	ldr	r1, [sp, #0]
 8006a22:	b1f0      	cbz	r0, 8006a62 <__d2b+0x72>
 8006a24:	9a01      	ldr	r2, [sp, #4]
 8006a26:	f1c0 0320 	rsb	r3, r0, #32
 8006a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	40c2      	lsrs	r2, r0
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	9201      	str	r2, [sp, #4]
 8006a36:	9b01      	ldr	r3, [sp, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bf14      	ite	ne
 8006a3c:	2102      	movne	r1, #2
 8006a3e:	2101      	moveq	r1, #1
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	6139      	str	r1, [r7, #16]
 8006a44:	b1c4      	cbz	r4, 8006a78 <__d2b+0x88>
 8006a46:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006a4a:	4404      	add	r4, r0
 8006a4c:	6034      	str	r4, [r6, #0]
 8006a4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a52:	6028      	str	r0, [r5, #0]
 8006a54:	4638      	mov	r0, r7
 8006a56:	b002      	add	sp, #8
 8006a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a60:	e7d5      	b.n	8006a0e <__d2b+0x1e>
 8006a62:	6179      	str	r1, [r7, #20]
 8006a64:	e7e7      	b.n	8006a36 <__d2b+0x46>
 8006a66:	a801      	add	r0, sp, #4
 8006a68:	f7ff fddb 	bl	8006622 <__lo0bits>
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	9b01      	ldr	r3, [sp, #4]
 8006a70:	6139      	str	r1, [r7, #16]
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	3020      	adds	r0, #32
 8006a76:	e7e5      	b.n	8006a44 <__d2b+0x54>
 8006a78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006a80:	6030      	str	r0, [r6, #0]
 8006a82:	6918      	ldr	r0, [r3, #16]
 8006a84:	f7ff fdae 	bl	80065e4 <__hi0bits>
 8006a88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006a8c:	e7e1      	b.n	8006a52 <__d2b+0x62>

08006a8e <_calloc_r>:
 8006a8e:	b538      	push	{r3, r4, r5, lr}
 8006a90:	fb02 f401 	mul.w	r4, r2, r1
 8006a94:	4621      	mov	r1, r4
 8006a96:	f000 f855 	bl	8006b44 <_malloc_r>
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	b118      	cbz	r0, 8006aa6 <_calloc_r+0x18>
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	f7fe fa3a 	bl	8004f1a <memset>
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	bd38      	pop	{r3, r4, r5, pc}
	...

08006aac <_free_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	4605      	mov	r5, r0
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	d043      	beq.n	8006b3c <_free_r+0x90>
 8006ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab8:	1f0c      	subs	r4, r1, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	bfb8      	it	lt
 8006abe:	18e4      	addlt	r4, r4, r3
 8006ac0:	f000 fa27 	bl	8006f12 <__malloc_lock>
 8006ac4:	4a1e      	ldr	r2, [pc, #120]	; (8006b40 <_free_r+0x94>)
 8006ac6:	6813      	ldr	r3, [r2, #0]
 8006ac8:	4610      	mov	r0, r2
 8006aca:	b933      	cbnz	r3, 8006ada <_free_r+0x2e>
 8006acc:	6063      	str	r3, [r4, #4]
 8006ace:	6014      	str	r4, [r2, #0]
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ad6:	f000 ba1d 	b.w	8006f14 <__malloc_unlock>
 8006ada:	42a3      	cmp	r3, r4
 8006adc:	d90b      	bls.n	8006af6 <_free_r+0x4a>
 8006ade:	6821      	ldr	r1, [r4, #0]
 8006ae0:	1862      	adds	r2, r4, r1
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	bf01      	itttt	eq
 8006ae6:	681a      	ldreq	r2, [r3, #0]
 8006ae8:	685b      	ldreq	r3, [r3, #4]
 8006aea:	1852      	addeq	r2, r2, r1
 8006aec:	6022      	streq	r2, [r4, #0]
 8006aee:	6063      	str	r3, [r4, #4]
 8006af0:	6004      	str	r4, [r0, #0]
 8006af2:	e7ed      	b.n	8006ad0 <_free_r+0x24>
 8006af4:	4613      	mov	r3, r2
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	b10a      	cbz	r2, 8006afe <_free_r+0x52>
 8006afa:	42a2      	cmp	r2, r4
 8006afc:	d9fa      	bls.n	8006af4 <_free_r+0x48>
 8006afe:	6819      	ldr	r1, [r3, #0]
 8006b00:	1858      	adds	r0, r3, r1
 8006b02:	42a0      	cmp	r0, r4
 8006b04:	d10b      	bne.n	8006b1e <_free_r+0x72>
 8006b06:	6820      	ldr	r0, [r4, #0]
 8006b08:	4401      	add	r1, r0
 8006b0a:	1858      	adds	r0, r3, r1
 8006b0c:	4282      	cmp	r2, r0
 8006b0e:	6019      	str	r1, [r3, #0]
 8006b10:	d1de      	bne.n	8006ad0 <_free_r+0x24>
 8006b12:	6810      	ldr	r0, [r2, #0]
 8006b14:	6852      	ldr	r2, [r2, #4]
 8006b16:	4401      	add	r1, r0
 8006b18:	6019      	str	r1, [r3, #0]
 8006b1a:	605a      	str	r2, [r3, #4]
 8006b1c:	e7d8      	b.n	8006ad0 <_free_r+0x24>
 8006b1e:	d902      	bls.n	8006b26 <_free_r+0x7a>
 8006b20:	230c      	movs	r3, #12
 8006b22:	602b      	str	r3, [r5, #0]
 8006b24:	e7d4      	b.n	8006ad0 <_free_r+0x24>
 8006b26:	6820      	ldr	r0, [r4, #0]
 8006b28:	1821      	adds	r1, r4, r0
 8006b2a:	428a      	cmp	r2, r1
 8006b2c:	bf01      	itttt	eq
 8006b2e:	6811      	ldreq	r1, [r2, #0]
 8006b30:	6852      	ldreq	r2, [r2, #4]
 8006b32:	1809      	addeq	r1, r1, r0
 8006b34:	6021      	streq	r1, [r4, #0]
 8006b36:	6062      	str	r2, [r4, #4]
 8006b38:	605c      	str	r4, [r3, #4]
 8006b3a:	e7c9      	b.n	8006ad0 <_free_r+0x24>
 8006b3c:	bd38      	pop	{r3, r4, r5, pc}
 8006b3e:	bf00      	nop
 8006b40:	200003f8 	.word	0x200003f8

08006b44 <_malloc_r>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	1ccd      	adds	r5, r1, #3
 8006b48:	f025 0503 	bic.w	r5, r5, #3
 8006b4c:	3508      	adds	r5, #8
 8006b4e:	2d0c      	cmp	r5, #12
 8006b50:	bf38      	it	cc
 8006b52:	250c      	movcc	r5, #12
 8006b54:	2d00      	cmp	r5, #0
 8006b56:	4606      	mov	r6, r0
 8006b58:	db01      	blt.n	8006b5e <_malloc_r+0x1a>
 8006b5a:	42a9      	cmp	r1, r5
 8006b5c:	d903      	bls.n	8006b66 <_malloc_r+0x22>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	6033      	str	r3, [r6, #0]
 8006b62:	2000      	movs	r0, #0
 8006b64:	bd70      	pop	{r4, r5, r6, pc}
 8006b66:	f000 f9d4 	bl	8006f12 <__malloc_lock>
 8006b6a:	4a21      	ldr	r2, [pc, #132]	; (8006bf0 <_malloc_r+0xac>)
 8006b6c:	6814      	ldr	r4, [r2, #0]
 8006b6e:	4621      	mov	r1, r4
 8006b70:	b991      	cbnz	r1, 8006b98 <_malloc_r+0x54>
 8006b72:	4c20      	ldr	r4, [pc, #128]	; (8006bf4 <_malloc_r+0xb0>)
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	b91b      	cbnz	r3, 8006b80 <_malloc_r+0x3c>
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f000 f98f 	bl	8006e9c <_sbrk_r>
 8006b7e:	6020      	str	r0, [r4, #0]
 8006b80:	4629      	mov	r1, r5
 8006b82:	4630      	mov	r0, r6
 8006b84:	f000 f98a 	bl	8006e9c <_sbrk_r>
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	d124      	bne.n	8006bd6 <_malloc_r+0x92>
 8006b8c:	230c      	movs	r3, #12
 8006b8e:	4630      	mov	r0, r6
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	f000 f9bf 	bl	8006f14 <__malloc_unlock>
 8006b96:	e7e4      	b.n	8006b62 <_malloc_r+0x1e>
 8006b98:	680b      	ldr	r3, [r1, #0]
 8006b9a:	1b5b      	subs	r3, r3, r5
 8006b9c:	d418      	bmi.n	8006bd0 <_malloc_r+0x8c>
 8006b9e:	2b0b      	cmp	r3, #11
 8006ba0:	d90f      	bls.n	8006bc2 <_malloc_r+0x7e>
 8006ba2:	600b      	str	r3, [r1, #0]
 8006ba4:	18cc      	adds	r4, r1, r3
 8006ba6:	50cd      	str	r5, [r1, r3]
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f000 f9b3 	bl	8006f14 <__malloc_unlock>
 8006bae:	f104 000b 	add.w	r0, r4, #11
 8006bb2:	1d23      	adds	r3, r4, #4
 8006bb4:	f020 0007 	bic.w	r0, r0, #7
 8006bb8:	1ac3      	subs	r3, r0, r3
 8006bba:	d0d3      	beq.n	8006b64 <_malloc_r+0x20>
 8006bbc:	425a      	negs	r2, r3
 8006bbe:	50e2      	str	r2, [r4, r3]
 8006bc0:	e7d0      	b.n	8006b64 <_malloc_r+0x20>
 8006bc2:	684b      	ldr	r3, [r1, #4]
 8006bc4:	428c      	cmp	r4, r1
 8006bc6:	bf16      	itet	ne
 8006bc8:	6063      	strne	r3, [r4, #4]
 8006bca:	6013      	streq	r3, [r2, #0]
 8006bcc:	460c      	movne	r4, r1
 8006bce:	e7eb      	b.n	8006ba8 <_malloc_r+0x64>
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	6849      	ldr	r1, [r1, #4]
 8006bd4:	e7cc      	b.n	8006b70 <_malloc_r+0x2c>
 8006bd6:	1cc4      	adds	r4, r0, #3
 8006bd8:	f024 0403 	bic.w	r4, r4, #3
 8006bdc:	42a0      	cmp	r0, r4
 8006bde:	d005      	beq.n	8006bec <_malloc_r+0xa8>
 8006be0:	1a21      	subs	r1, r4, r0
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 f95a 	bl	8006e9c <_sbrk_r>
 8006be8:	3001      	adds	r0, #1
 8006bea:	d0cf      	beq.n	8006b8c <_malloc_r+0x48>
 8006bec:	6025      	str	r5, [r4, #0]
 8006bee:	e7db      	b.n	8006ba8 <_malloc_r+0x64>
 8006bf0:	200003f8 	.word	0x200003f8
 8006bf4:	200003fc 	.word	0x200003fc

08006bf8 <__ssputs_r>:
 8006bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	688e      	ldr	r6, [r1, #8]
 8006bfe:	4682      	mov	sl, r0
 8006c00:	429e      	cmp	r6, r3
 8006c02:	460c      	mov	r4, r1
 8006c04:	4690      	mov	r8, r2
 8006c06:	4699      	mov	r9, r3
 8006c08:	d837      	bhi.n	8006c7a <__ssputs_r+0x82>
 8006c0a:	898a      	ldrh	r2, [r1, #12]
 8006c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c10:	d031      	beq.n	8006c76 <__ssputs_r+0x7e>
 8006c12:	2302      	movs	r3, #2
 8006c14:	6825      	ldr	r5, [r4, #0]
 8006c16:	6909      	ldr	r1, [r1, #16]
 8006c18:	1a6f      	subs	r7, r5, r1
 8006c1a:	6965      	ldr	r5, [r4, #20]
 8006c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c20:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c24:	f109 0301 	add.w	r3, r9, #1
 8006c28:	443b      	add	r3, r7
 8006c2a:	429d      	cmp	r5, r3
 8006c2c:	bf38      	it	cc
 8006c2e:	461d      	movcc	r5, r3
 8006c30:	0553      	lsls	r3, r2, #21
 8006c32:	d530      	bpl.n	8006c96 <__ssputs_r+0x9e>
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7ff ff85 	bl	8006b44 <_malloc_r>
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	b950      	cbnz	r0, 8006c54 <__ssputs_r+0x5c>
 8006c3e:	230c      	movs	r3, #12
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	f8ca 3000 	str.w	r3, [sl]
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	463a      	mov	r2, r7
 8006c56:	6921      	ldr	r1, [r4, #16]
 8006c58:	f7fe f954 	bl	8004f04 <memcpy>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c66:	81a3      	strh	r3, [r4, #12]
 8006c68:	6126      	str	r6, [r4, #16]
 8006c6a:	443e      	add	r6, r7
 8006c6c:	6026      	str	r6, [r4, #0]
 8006c6e:	464e      	mov	r6, r9
 8006c70:	6165      	str	r5, [r4, #20]
 8006c72:	1bed      	subs	r5, r5, r7
 8006c74:	60a5      	str	r5, [r4, #8]
 8006c76:	454e      	cmp	r6, r9
 8006c78:	d900      	bls.n	8006c7c <__ssputs_r+0x84>
 8006c7a:	464e      	mov	r6, r9
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	4641      	mov	r1, r8
 8006c80:	6820      	ldr	r0, [r4, #0]
 8006c82:	f000 f92d 	bl	8006ee0 <memmove>
 8006c86:	68a3      	ldr	r3, [r4, #8]
 8006c88:	2000      	movs	r0, #0
 8006c8a:	1b9b      	subs	r3, r3, r6
 8006c8c:	60a3      	str	r3, [r4, #8]
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	441e      	add	r6, r3
 8006c92:	6026      	str	r6, [r4, #0]
 8006c94:	e7dc      	b.n	8006c50 <__ssputs_r+0x58>
 8006c96:	462a      	mov	r2, r5
 8006c98:	f000 f93d 	bl	8006f16 <_realloc_r>
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d1e2      	bne.n	8006c68 <__ssputs_r+0x70>
 8006ca2:	6921      	ldr	r1, [r4, #16]
 8006ca4:	4650      	mov	r0, sl
 8006ca6:	f7ff ff01 	bl	8006aac <_free_r>
 8006caa:	e7c8      	b.n	8006c3e <__ssputs_r+0x46>

08006cac <_svfiprintf_r>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	461d      	mov	r5, r3
 8006cb2:	898b      	ldrh	r3, [r1, #12]
 8006cb4:	b09d      	sub	sp, #116	; 0x74
 8006cb6:	061f      	lsls	r7, r3, #24
 8006cb8:	4680      	mov	r8, r0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	4616      	mov	r6, r2
 8006cbe:	d50f      	bpl.n	8006ce0 <_svfiprintf_r+0x34>
 8006cc0:	690b      	ldr	r3, [r1, #16]
 8006cc2:	b96b      	cbnz	r3, 8006ce0 <_svfiprintf_r+0x34>
 8006cc4:	2140      	movs	r1, #64	; 0x40
 8006cc6:	f7ff ff3d 	bl	8006b44 <_malloc_r>
 8006cca:	6020      	str	r0, [r4, #0]
 8006ccc:	6120      	str	r0, [r4, #16]
 8006cce:	b928      	cbnz	r0, 8006cdc <_svfiprintf_r+0x30>
 8006cd0:	230c      	movs	r3, #12
 8006cd2:	f8c8 3000 	str.w	r3, [r8]
 8006cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cda:	e0c8      	b.n	8006e6e <_svfiprintf_r+0x1c2>
 8006cdc:	2340      	movs	r3, #64	; 0x40
 8006cde:	6163      	str	r3, [r4, #20]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce4:	2320      	movs	r3, #32
 8006ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cea:	2330      	movs	r3, #48	; 0x30
 8006cec:	f04f 0b01 	mov.w	fp, #1
 8006cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cf4:	9503      	str	r5, [sp, #12]
 8006cf6:	4637      	mov	r7, r6
 8006cf8:	463d      	mov	r5, r7
 8006cfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cfe:	b10b      	cbz	r3, 8006d04 <_svfiprintf_r+0x58>
 8006d00:	2b25      	cmp	r3, #37	; 0x25
 8006d02:	d13e      	bne.n	8006d82 <_svfiprintf_r+0xd6>
 8006d04:	ebb7 0a06 	subs.w	sl, r7, r6
 8006d08:	d00b      	beq.n	8006d22 <_svfiprintf_r+0x76>
 8006d0a:	4653      	mov	r3, sl
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4640      	mov	r0, r8
 8006d12:	f7ff ff71 	bl	8006bf8 <__ssputs_r>
 8006d16:	3001      	adds	r0, #1
 8006d18:	f000 80a4 	beq.w	8006e64 <_svfiprintf_r+0x1b8>
 8006d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d1e:	4453      	add	r3, sl
 8006d20:	9309      	str	r3, [sp, #36]	; 0x24
 8006d22:	783b      	ldrb	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 809d 	beq.w	8006e64 <_svfiprintf_r+0x1b8>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d34:	9304      	str	r3, [sp, #16]
 8006d36:	9307      	str	r3, [sp, #28]
 8006d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d3e:	462f      	mov	r7, r5
 8006d40:	2205      	movs	r2, #5
 8006d42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d46:	4850      	ldr	r0, [pc, #320]	; (8006e88 <_svfiprintf_r+0x1dc>)
 8006d48:	f7ff fbb8 	bl	80064bc <memchr>
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	b9d0      	cbnz	r0, 8006d86 <_svfiprintf_r+0xda>
 8006d50:	06d9      	lsls	r1, r3, #27
 8006d52:	bf44      	itt	mi
 8006d54:	2220      	movmi	r2, #32
 8006d56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d5a:	071a      	lsls	r2, r3, #28
 8006d5c:	bf44      	itt	mi
 8006d5e:	222b      	movmi	r2, #43	; 0x2b
 8006d60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d64:	782a      	ldrb	r2, [r5, #0]
 8006d66:	2a2a      	cmp	r2, #42	; 0x2a
 8006d68:	d015      	beq.n	8006d96 <_svfiprintf_r+0xea>
 8006d6a:	462f      	mov	r7, r5
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	250a      	movs	r5, #10
 8006d70:	9a07      	ldr	r2, [sp, #28]
 8006d72:	4639      	mov	r1, r7
 8006d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d78:	3b30      	subs	r3, #48	; 0x30
 8006d7a:	2b09      	cmp	r3, #9
 8006d7c:	d94d      	bls.n	8006e1a <_svfiprintf_r+0x16e>
 8006d7e:	b1b8      	cbz	r0, 8006db0 <_svfiprintf_r+0x104>
 8006d80:	e00f      	b.n	8006da2 <_svfiprintf_r+0xf6>
 8006d82:	462f      	mov	r7, r5
 8006d84:	e7b8      	b.n	8006cf8 <_svfiprintf_r+0x4c>
 8006d86:	4a40      	ldr	r2, [pc, #256]	; (8006e88 <_svfiprintf_r+0x1dc>)
 8006d88:	463d      	mov	r5, r7
 8006d8a:	1a80      	subs	r0, r0, r2
 8006d8c:	fa0b f000 	lsl.w	r0, fp, r0
 8006d90:	4318      	orrs	r0, r3
 8006d92:	9004      	str	r0, [sp, #16]
 8006d94:	e7d3      	b.n	8006d3e <_svfiprintf_r+0x92>
 8006d96:	9a03      	ldr	r2, [sp, #12]
 8006d98:	1d11      	adds	r1, r2, #4
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	9103      	str	r1, [sp, #12]
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	db01      	blt.n	8006da6 <_svfiprintf_r+0xfa>
 8006da2:	9207      	str	r2, [sp, #28]
 8006da4:	e004      	b.n	8006db0 <_svfiprintf_r+0x104>
 8006da6:	4252      	negs	r2, r2
 8006da8:	f043 0302 	orr.w	r3, r3, #2
 8006dac:	9207      	str	r2, [sp, #28]
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	783b      	ldrb	r3, [r7, #0]
 8006db2:	2b2e      	cmp	r3, #46	; 0x2e
 8006db4:	d10c      	bne.n	8006dd0 <_svfiprintf_r+0x124>
 8006db6:	787b      	ldrb	r3, [r7, #1]
 8006db8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dba:	d133      	bne.n	8006e24 <_svfiprintf_r+0x178>
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	3702      	adds	r7, #2
 8006dc0:	1d1a      	adds	r2, r3, #4
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	9203      	str	r2, [sp, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	bfb8      	it	lt
 8006dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dce:	9305      	str	r3, [sp, #20]
 8006dd0:	4d2e      	ldr	r5, [pc, #184]	; (8006e8c <_svfiprintf_r+0x1e0>)
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	7839      	ldrb	r1, [r7, #0]
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f7ff fb70 	bl	80064bc <memchr>
 8006ddc:	b138      	cbz	r0, 8006dee <_svfiprintf_r+0x142>
 8006dde:	2340      	movs	r3, #64	; 0x40
 8006de0:	1b40      	subs	r0, r0, r5
 8006de2:	fa03 f000 	lsl.w	r0, r3, r0
 8006de6:	9b04      	ldr	r3, [sp, #16]
 8006de8:	3701      	adds	r7, #1
 8006dea:	4303      	orrs	r3, r0
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	7839      	ldrb	r1, [r7, #0]
 8006df0:	2206      	movs	r2, #6
 8006df2:	4827      	ldr	r0, [pc, #156]	; (8006e90 <_svfiprintf_r+0x1e4>)
 8006df4:	1c7e      	adds	r6, r7, #1
 8006df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dfa:	f7ff fb5f 	bl	80064bc <memchr>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d038      	beq.n	8006e74 <_svfiprintf_r+0x1c8>
 8006e02:	4b24      	ldr	r3, [pc, #144]	; (8006e94 <_svfiprintf_r+0x1e8>)
 8006e04:	bb13      	cbnz	r3, 8006e4c <_svfiprintf_r+0x1a0>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	3307      	adds	r3, #7
 8006e0a:	f023 0307 	bic.w	r3, r3, #7
 8006e0e:	3308      	adds	r3, #8
 8006e10:	9303      	str	r3, [sp, #12]
 8006e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e14:	444b      	add	r3, r9
 8006e16:	9309      	str	r3, [sp, #36]	; 0x24
 8006e18:	e76d      	b.n	8006cf6 <_svfiprintf_r+0x4a>
 8006e1a:	fb05 3202 	mla	r2, r5, r2, r3
 8006e1e:	2001      	movs	r0, #1
 8006e20:	460f      	mov	r7, r1
 8006e22:	e7a6      	b.n	8006d72 <_svfiprintf_r+0xc6>
 8006e24:	2300      	movs	r3, #0
 8006e26:	250a      	movs	r5, #10
 8006e28:	4619      	mov	r1, r3
 8006e2a:	3701      	adds	r7, #1
 8006e2c:	9305      	str	r3, [sp, #20]
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e34:	3a30      	subs	r2, #48	; 0x30
 8006e36:	2a09      	cmp	r2, #9
 8006e38:	d903      	bls.n	8006e42 <_svfiprintf_r+0x196>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0c8      	beq.n	8006dd0 <_svfiprintf_r+0x124>
 8006e3e:	9105      	str	r1, [sp, #20]
 8006e40:	e7c6      	b.n	8006dd0 <_svfiprintf_r+0x124>
 8006e42:	fb05 2101 	mla	r1, r5, r1, r2
 8006e46:	2301      	movs	r3, #1
 8006e48:	4607      	mov	r7, r0
 8006e4a:	e7f0      	b.n	8006e2e <_svfiprintf_r+0x182>
 8006e4c:	ab03      	add	r3, sp, #12
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	4622      	mov	r2, r4
 8006e52:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <_svfiprintf_r+0x1ec>)
 8006e54:	a904      	add	r1, sp, #16
 8006e56:	4640      	mov	r0, r8
 8006e58:	f7fe f8f8 	bl	800504c <_printf_float>
 8006e5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e60:	4681      	mov	r9, r0
 8006e62:	d1d6      	bne.n	8006e12 <_svfiprintf_r+0x166>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	065b      	lsls	r3, r3, #25
 8006e68:	f53f af35 	bmi.w	8006cd6 <_svfiprintf_r+0x2a>
 8006e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e6e:	b01d      	add	sp, #116	; 0x74
 8006e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e74:	ab03      	add	r3, sp, #12
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4622      	mov	r2, r4
 8006e7a:	4b07      	ldr	r3, [pc, #28]	; (8006e98 <_svfiprintf_r+0x1ec>)
 8006e7c:	a904      	add	r1, sp, #16
 8006e7e:	4640      	mov	r0, r8
 8006e80:	f7fe fb90 	bl	80055a4 <_printf_i>
 8006e84:	e7ea      	b.n	8006e5c <_svfiprintf_r+0x1b0>
 8006e86:	bf00      	nop
 8006e88:	0800734c 	.word	0x0800734c
 8006e8c:	08007352 	.word	0x08007352
 8006e90:	08007356 	.word	0x08007356
 8006e94:	0800504d 	.word	0x0800504d
 8006e98:	08006bf9 	.word	0x08006bf9

08006e9c <_sbrk_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	4c05      	ldr	r4, [pc, #20]	; (8006eb8 <_sbrk_r+0x1c>)
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	f7fb f8fa 	bl	80020a0 <_sbrk>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_sbrk_r+0x1a>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_sbrk_r+0x1a>
 8006eb4:	602b      	str	r3, [r5, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	20000590 	.word	0x20000590

08006ebc <__ascii_mbtowc>:
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	b901      	cbnz	r1, 8006ec2 <__ascii_mbtowc+0x6>
 8006ec0:	a901      	add	r1, sp, #4
 8006ec2:	b142      	cbz	r2, 8006ed6 <__ascii_mbtowc+0x1a>
 8006ec4:	b14b      	cbz	r3, 8006eda <__ascii_mbtowc+0x1e>
 8006ec6:	7813      	ldrb	r3, [r2, #0]
 8006ec8:	600b      	str	r3, [r1, #0]
 8006eca:	7812      	ldrb	r2, [r2, #0]
 8006ecc:	1c10      	adds	r0, r2, #0
 8006ece:	bf18      	it	ne
 8006ed0:	2001      	movne	r0, #1
 8006ed2:	b002      	add	sp, #8
 8006ed4:	4770      	bx	lr
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	e7fb      	b.n	8006ed2 <__ascii_mbtowc+0x16>
 8006eda:	f06f 0001 	mvn.w	r0, #1
 8006ede:	e7f8      	b.n	8006ed2 <__ascii_mbtowc+0x16>

08006ee0 <memmove>:
 8006ee0:	4288      	cmp	r0, r1
 8006ee2:	b510      	push	{r4, lr}
 8006ee4:	eb01 0302 	add.w	r3, r1, r2
 8006ee8:	d807      	bhi.n	8006efa <memmove+0x1a>
 8006eea:	1e42      	subs	r2, r0, #1
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d00a      	beq.n	8006f06 <memmove+0x26>
 8006ef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006ef8:	e7f8      	b.n	8006eec <memmove+0xc>
 8006efa:	4283      	cmp	r3, r0
 8006efc:	d9f5      	bls.n	8006eea <memmove+0xa>
 8006efe:	1881      	adds	r1, r0, r2
 8006f00:	1ad2      	subs	r2, r2, r3
 8006f02:	42d3      	cmn	r3, r2
 8006f04:	d100      	bne.n	8006f08 <memmove+0x28>
 8006f06:	bd10      	pop	{r4, pc}
 8006f08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f10:	e7f7      	b.n	8006f02 <memmove+0x22>

08006f12 <__malloc_lock>:
 8006f12:	4770      	bx	lr

08006f14 <__malloc_unlock>:
 8006f14:	4770      	bx	lr

08006f16 <_realloc_r>:
 8006f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f18:	4607      	mov	r7, r0
 8006f1a:	4614      	mov	r4, r2
 8006f1c:	460e      	mov	r6, r1
 8006f1e:	b921      	cbnz	r1, 8006f2a <_realloc_r+0x14>
 8006f20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f24:	4611      	mov	r1, r2
 8006f26:	f7ff be0d 	b.w	8006b44 <_malloc_r>
 8006f2a:	b922      	cbnz	r2, 8006f36 <_realloc_r+0x20>
 8006f2c:	f7ff fdbe 	bl	8006aac <_free_r>
 8006f30:	4625      	mov	r5, r4
 8006f32:	4628      	mov	r0, r5
 8006f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f36:	f000 f821 	bl	8006f7c <_malloc_usable_size_r>
 8006f3a:	42a0      	cmp	r0, r4
 8006f3c:	d20f      	bcs.n	8006f5e <_realloc_r+0x48>
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4638      	mov	r0, r7
 8006f42:	f7ff fdff 	bl	8006b44 <_malloc_r>
 8006f46:	4605      	mov	r5, r0
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d0f2      	beq.n	8006f32 <_realloc_r+0x1c>
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4622      	mov	r2, r4
 8006f50:	f7fd ffd8 	bl	8004f04 <memcpy>
 8006f54:	4631      	mov	r1, r6
 8006f56:	4638      	mov	r0, r7
 8006f58:	f7ff fda8 	bl	8006aac <_free_r>
 8006f5c:	e7e9      	b.n	8006f32 <_realloc_r+0x1c>
 8006f5e:	4635      	mov	r5, r6
 8006f60:	e7e7      	b.n	8006f32 <_realloc_r+0x1c>

08006f62 <__ascii_wctomb>:
 8006f62:	b149      	cbz	r1, 8006f78 <__ascii_wctomb+0x16>
 8006f64:	2aff      	cmp	r2, #255	; 0xff
 8006f66:	bf8b      	itete	hi
 8006f68:	238a      	movhi	r3, #138	; 0x8a
 8006f6a:	700a      	strbls	r2, [r1, #0]
 8006f6c:	6003      	strhi	r3, [r0, #0]
 8006f6e:	2001      	movls	r0, #1
 8006f70:	bf88      	it	hi
 8006f72:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f76:	4770      	bx	lr
 8006f78:	4608      	mov	r0, r1
 8006f7a:	4770      	bx	lr

08006f7c <_malloc_usable_size_r>:
 8006f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f80:	1f18      	subs	r0, r3, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bfbc      	itt	lt
 8006f86:	580b      	ldrlt	r3, [r1, r0]
 8006f88:	18c0      	addlt	r0, r0, r3
 8006f8a:	4770      	bx	lr

08006f8c <_init>:
 8006f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8e:	bf00      	nop
 8006f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f92:	bc08      	pop	{r3}
 8006f94:	469e      	mov	lr, r3
 8006f96:	4770      	bx	lr

08006f98 <_fini>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr
