
DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08007040  08007040  00017040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007508  08007508  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007508  08007508  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007508  08007508  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200001e4  080076f4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  080076f4  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010da9  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d48  00000000  00000000  00030fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001130  00000000  00000000  00033d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  00034e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f05  00000000  00000000  00035dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f97e  00000000  00000000  0004fcc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ecae  00000000  00000000  0005f643  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee2f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff0  00000000  00000000  000ee36c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007024 	.word	0x08007024

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007024 	.word	0x08007024

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000f48:	4806      	ldr	r0, [pc, #24]	; (8000f64 <DS18B20_StartAll+0x20>)
 8000f4a:	f000 fd3c 	bl	80019c6 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8000f4e:	21cc      	movs	r1, #204	; 0xcc
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <DS18B20_StartAll+0x20>)
 8000f52:	f000 fdbb 	bl	8001acc <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000f56:	2144      	movs	r1, #68	; 0x44
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <DS18B20_StartAll+0x20>)
 8000f5a:	f000 fdb7 	bl	8001acc <OneWire_WriteByte>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000044c 	.word	0x2000044c

08000f68 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000f74:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <DS18B20_Read+0x14c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d301      	bcc.n	8000f82 <DS18B20_Read+0x1a>
		return 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e094      	b.n	80010ac <DS18B20_Read+0x144>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif

	
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <DS18B20_Read+0x150>)
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f93e 	bl	8001210 <DS18B20_Is>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <DS18B20_Read+0x36>
		return 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e086      	b.n	80010ac <DS18B20_Read+0x144>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8000f9e:	4847      	ldr	r0, [pc, #284]	; (80010bc <DS18B20_Read+0x154>)
 8000fa0:	f000 fd6a 	bl	8001a78 <OneWire_ReadBit>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000faa:	2300      	movs	r3, #0
 8000fac:	e07e      	b.n	80010ac <DS18B20_Read+0x144>

	OneWire_Reset(&OneWire); // Reset the bus
 8000fae:	4843      	ldr	r0, [pc, #268]	; (80010bc <DS18B20_Read+0x154>)
 8000fb0:	f000 fd09 	bl	80019c6 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <DS18B20_Read+0x150>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	483f      	ldr	r0, [pc, #252]	; (80010bc <DS18B20_Read+0x154>)
 8000fc0:	f000 feb7 	bl	8001d32 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000fc4:	21be      	movs	r1, #190	; 0xbe
 8000fc6:	483d      	ldr	r0, [pc, #244]	; (80010bc <DS18B20_Read+0x154>)
 8000fc8:	f000 fd80 	bl	8001acc <OneWire_WriteByte>
	
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000fcc:	2300      	movs	r3, #0
 8000fce:	74fb      	strb	r3, [r7, #19]
 8000fd0:	e00d      	b.n	8000fee <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000fd2:	7cfc      	ldrb	r4, [r7, #19]
 8000fd4:	4839      	ldr	r0, [pc, #228]	; (80010bc <DS18B20_Read+0x154>)
 8000fd6:	f000 fd96 	bl	8001b06 <OneWire_ReadByte>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	4423      	add	r3, r4
 8000fe4:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000fe8:	7cfb      	ldrb	r3, [r7, #19]
 8000fea:	3301      	adds	r3, #1
 8000fec:	74fb      	strb	r3, [r7, #19]
 8000fee:	7cfb      	ldrb	r3, [r7, #19]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d9ee      	bls.n	8000fd2 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000ff4:	7a3b      	ldrb	r3, [r7, #8]
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	7a7b      	ldrb	r3, [r7, #9]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8001004:	482d      	ldr	r0, [pc, #180]	; (80010bc <DS18B20_Read+0x154>)
 8001006:	f000 fcde 	bl	80019c6 <OneWire_Reset>
	
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	115b      	asrs	r3, r3, #5
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	3309      	adds	r3, #9
 8001018:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	3b09      	subs	r3, #9
 800101e:	2b03      	cmp	r3, #3
 8001020:	d83e      	bhi.n	80010a0 <DS18B20_Read+0x138>
 8001022:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <DS18B20_Read+0xc0>)
 8001024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001028:	08001039 	.word	0x08001039
 800102c:	08001053 	.word	0x08001053
 8001030:	0800106d 	.word	0x0800106d
 8001034:	08001087 	.word	0x08001087
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8001038:	8a3b      	ldrh	r3, [r7, #16]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fdde 	bl	8000bfc <__aeabi_i2f>
 8001040:	4603      	mov	r3, r0
 8001042:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fe2c 	bl	8000ca4 <__aeabi_fmul>
 800104c:	4603      	mov	r3, r0
 800104e:	617b      	str	r3, [r7, #20]
		break;
 8001050:	e028      	b.n	80010a4 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8001052:	8a3b      	ldrh	r3, [r7, #16]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fdd1 	bl	8000bfc <__aeabi_i2f>
 800105a:	4603      	mov	r3, r0
 800105c:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe1f 	bl	8000ca4 <__aeabi_fmul>
 8001066:	4603      	mov	r3, r0
 8001068:	617b      	str	r3, [r7, #20]
		 break;
 800106a:	e01b      	b.n	80010a4 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 800106c:	8a3b      	ldrh	r3, [r7, #16]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fdc4 	bl	8000bfc <__aeabi_i2f>
 8001074:	4603      	mov	r3, r0
 8001076:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe12 	bl	8000ca4 <__aeabi_fmul>
 8001080:	4603      	mov	r3, r0
 8001082:	617b      	str	r3, [r7, #20]
		break;
 8001084:	e00e      	b.n	80010a4 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8001086:	8a3b      	ldrh	r3, [r7, #16]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fdb7 	bl	8000bfc <__aeabi_i2f>
 800108e:	4603      	mov	r3, r0
 8001090:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe05 	bl	8000ca4 <__aeabi_fmul>
 800109a:	4603      	mov	r3, r0
 800109c:	617b      	str	r3, [r7, #20]
		 break;
 800109e:	e001      	b.n	80010a4 <DS18B20_Read+0x13c>
		default: 
			result = 0xFF;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <DS18B20_Read+0x158>)
 80010a2:	617b      	str	r3, [r7, #20]
	}
	
	*destination = result;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	601a      	str	r2, [r3, #0]
	
	return 1; //temperature valid
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	20000200 	.word	0x20000200
 80010b8:	2000040c 	.word	0x2000040c
 80010bc:	2000044c 	.word	0x2000044c
 80010c0:	437f0000 	.word	0x437f0000

080010c4 <DS18B20_SetResolution>:
	
	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 80010d4:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <DS18B20_SetResolution+0x140>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	79fa      	ldrb	r2, [r7, #7]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d301      	bcc.n	80010e2 <DS18B20_SetResolution+0x1e>
		return 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	e08c      	b.n	80011fc <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	4a48      	ldr	r2, [pc, #288]	; (8001208 <DS18B20_SetResolution+0x144>)
 80010e8:	4413      	add	r3, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f890 	bl	8001210 <DS18B20_Is>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <DS18B20_SetResolution+0x36>
		return 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e080      	b.n	80011fc <DS18B20_SetResolution+0x138>
	
	OneWire_Reset(&OneWire); // Reset the bus
 80010fa:	4844      	ldr	r0, [pc, #272]	; (800120c <DS18B20_SetResolution+0x148>)
 80010fc:	f000 fc63 	bl	80019c6 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4a40      	ldr	r2, [pc, #256]	; (8001208 <DS18B20_SetResolution+0x144>)
 8001106:	4413      	add	r3, r2
 8001108:	4619      	mov	r1, r3
 800110a:	4840      	ldr	r0, [pc, #256]	; (800120c <DS18B20_SetResolution+0x148>)
 800110c:	f000 fe11 	bl	8001d32 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001110:	21be      	movs	r1, #190	; 0xbe
 8001112:	483e      	ldr	r0, [pc, #248]	; (800120c <DS18B20_SetResolution+0x148>)
 8001114:	f000 fcda 	bl	8001acc <OneWire_WriteByte>
	
	OneWire_ReadByte(&OneWire);
 8001118:	483c      	ldr	r0, [pc, #240]	; (800120c <DS18B20_SetResolution+0x148>)
 800111a:	f000 fcf4 	bl	8001b06 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 800111e:	483b      	ldr	r0, [pc, #236]	; (800120c <DS18B20_SetResolution+0x148>)
 8001120:	f000 fcf1 	bl	8001b06 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8001124:	4839      	ldr	r0, [pc, #228]	; (800120c <DS18B20_SetResolution+0x148>)
 8001126:	f000 fcee 	bl	8001b06 <OneWire_ReadByte>
 800112a:	4603      	mov	r3, r0
 800112c:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 800112e:	4837      	ldr	r0, [pc, #220]	; (800120c <DS18B20_SetResolution+0x148>)
 8001130:	f000 fce9 	bl	8001b06 <OneWire_ReadByte>
 8001134:	4603      	mov	r3, r0
 8001136:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001138:	4834      	ldr	r0, [pc, #208]	; (800120c <DS18B20_SetResolution+0x148>)
 800113a:	f000 fce4 	bl	8001b06 <OneWire_ReadByte>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
	
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	2b09      	cmp	r3, #9
 8001146:	d108      	bne.n	800115a <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800114e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f023 0320 	bic.w	r3, r3, #32
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e022      	b.n	80011a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	2b0a      	cmp	r3, #10
 800115e:	d108      	bne.n	8001172 <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001166:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e016      	b.n	80011a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b0b      	cmp	r3, #11
 8001176:	d108      	bne.n	800118a <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800117e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	f023 0320 	bic.w	r3, r3, #32
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e00a      	b.n	80011a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	2b0c      	cmp	r3, #12
 800118e:	d107      	bne.n	80011a0 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001196:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	73fb      	strb	r3, [r7, #15]
	}
	
	OneWire_Reset(&OneWire); // Reset the bus
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <DS18B20_SetResolution+0x148>)
 80011a2:	f000 fc10 	bl	80019c6 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <DS18B20_SetResolution+0x144>)
 80011ac:	4413      	add	r3, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	4816      	ldr	r0, [pc, #88]	; (800120c <DS18B20_SetResolution+0x148>)
 80011b2:	f000 fdbe 	bl	8001d32 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 80011b6:	214e      	movs	r1, #78	; 0x4e
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <DS18B20_SetResolution+0x148>)
 80011ba:	f000 fc87 	bl	8001acc <OneWire_WriteByte>
	
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4812      	ldr	r0, [pc, #72]	; (800120c <DS18B20_SetResolution+0x148>)
 80011c4:	f000 fc82 	bl	8001acc <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 80011c8:	7b7b      	ldrb	r3, [r7, #13]
 80011ca:	4619      	mov	r1, r3
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <DS18B20_SetResolution+0x148>)
 80011ce:	f000 fc7d 	bl	8001acc <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	4619      	mov	r1, r3
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <DS18B20_SetResolution+0x148>)
 80011d8:	f000 fc78 	bl	8001acc <OneWire_WriteByte>
	
	OneWire_Reset(&OneWire); // Reset the bus
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <DS18B20_SetResolution+0x148>)
 80011de:	f000 fbf2 	bl	80019c6 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <DS18B20_SetResolution+0x144>)
 80011e8:	4413      	add	r3, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <DS18B20_SetResolution+0x148>)
 80011ee:	f000 fda0 	bl	8001d32 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80011f2:	2148      	movs	r1, #72	; 0x48
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <DS18B20_SetResolution+0x148>)
 80011f6:	f000 fc69 	bl	8001acc <OneWire_WriteByte>
	
	return 1;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000200 	.word	0x20000200
 8001208:	2000040c 	.word	0x2000040c
 800120c:	2000044c 	.word	0x2000044c

08001210 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b28      	cmp	r3, #40	; 0x28
 800121e:	d101      	bne.n	8001224 <DS18B20_Is+0x14>
		return 1;
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <DS18B20_Is+0x16>
	return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <DS18B20_AllDone+0x10>)
 8001236:	f000 fc1f 	bl	8001a78 <OneWire_ReadBit>
 800123a:	4603      	mov	r3, r0
}
 800123c:	4618      	mov	r0, r3
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000044c 	.word	0x2000044c

08001244 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 800124a:	f7ff fff1 	bl	8001230 <DS18B20_AllDone>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d02e      	beq.n	80012b2 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001254:	2300      	movs	r3, #0
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	e026      	b.n	80012a8 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <DS18B20_ReadAll+0x78>)
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4413      	add	r3, r2
 8001262:	330c      	adds	r3, #12
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4a13      	ldr	r2, [pc, #76]	; (80012bc <DS18B20_ReadAll+0x78>)
 800126e:	4413      	add	r3, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffcd 	bl	8001210 <DS18B20_Is>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d012      	beq.n	80012a2 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	3308      	adds	r3, #8
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <DS18B20_ReadAll+0x78>)
 8001284:	441a      	add	r2, r3
 8001286:	79fc      	ldrb	r4, [r7, #7]
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe6b 	bl	8000f68 <DS18B20_Read>
 8001292:	4603      	mov	r3, r0
 8001294:	4619      	mov	r1, r3
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <DS18B20_ReadAll+0x78>)
 8001298:	0123      	lsls	r3, r4, #4
 800129a:	4413      	add	r3, r2
 800129c:	330c      	adds	r3, #12
 800129e:	460a      	mov	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	3301      	adds	r3, #1
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <DS18B20_ReadAll+0x7c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d3d3      	bcc.n	800125a <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000040c 	.word	0x2000040c
 80012c0:	20000200 	.word	0x20000200

080012c4 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	return TempSensorCount;
 80012c8:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <DS18B20_Quantity+0x10>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	20000200 	.word	0x20000200

080012d8 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <DS18B20_GetTemperature+0x3c>)
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4413      	add	r3, r2
 80012ec:	330c      	adds	r3, #12
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <DS18B20_GetTemperature+0x20>
		return 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e008      	b.n	800130a <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4a06      	ldr	r2, [pc, #24]	; (8001314 <DS18B20_GetTemperature+0x3c>)
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	3308      	adds	r3, #8
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]
	return 1;
 8001308:	2301      	movs	r3, #1

}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	2000040c 	.word	0x2000040c

08001318 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	2300      	movs	r3, #0
 8001328:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 800132a:	2210      	movs	r2, #16
 800132c:	491e      	ldr	r1, [pc, #120]	; (80013a8 <DS18B20_Init+0x90>)
 800132e:	481f      	ldr	r0, [pc, #124]	; (80013ac <DS18B20_Init+0x94>)
 8001330:	f000 fd38 	bl	8001da4 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8001334:	481d      	ldr	r0, [pc, #116]	; (80013ac <DS18B20_Init+0x94>)
 8001336:	f000 fcdf 	bl	8001cf8 <OneWire_First>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
	while(next)
 800133e:	e018      	b.n	8001372 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <DS18B20_Init+0x98>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <DS18B20_Init+0x98>)
 800134a:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	73ba      	strb	r2, [r7, #14]
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <DS18B20_Init+0x9c>)
 8001356:	4413      	add	r3, r2
 8001358:	4619      	mov	r1, r3
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <DS18B20_Init+0x94>)
 800135c:	f000 fd07 	bl	8001d6e <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8001360:	4812      	ldr	r0, [pc, #72]	; (80013ac <DS18B20_Init+0x94>)
 8001362:	f000 fcd9 	bl	8001d18 <OneWire_Next>
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <DS18B20_Init+0x98>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d803      	bhi.n	800137a <DS18B20_Init+0x62>
	while(next)
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1e3      	bne.n	8001340 <DS18B20_Init+0x28>
 8001378:	e000      	b.n	800137c <DS18B20_Init+0x64>
			break;
 800137a:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 800137c:	2300      	movs	r3, #0
 800137e:	737b      	strb	r3, [r7, #13]
 8001380:	e00a      	b.n	8001398 <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8001382:	79fa      	ldrb	r2, [r7, #7]
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe9b 	bl	80010c4 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 800138e:	f7ff fdd9 	bl	8000f44 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	3301      	adds	r3, #1
 8001396:	737b      	strb	r3, [r7, #13]
 8001398:	7b7a      	ldrb	r2, [r7, #13]
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	429a      	cmp	r2, r3
 800139e:	d3f0      	bcc.n	8001382 <DS18B20_Init+0x6a>
	}
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	2000044c 	.word	0x2000044c
 80013b0:	20000200 	.word	0x20000200
 80013b4:	2000040c 	.word	0x2000040c

080013b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013cc:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <MX_GPIO_Init+0x118>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a3f      	ldr	r2, [pc, #252]	; (80014d0 <MX_GPIO_Init+0x118>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <MX_GPIO_Init+0x118>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e4:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <MX_GPIO_Init+0x118>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a39      	ldr	r2, [pc, #228]	; (80014d0 <MX_GPIO_Init+0x118>)
 80013ea:	f043 0320 	orr.w	r3, r3, #32
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <MX_GPIO_Init+0x118>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0320 	and.w	r3, r3, #32
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <MX_GPIO_Init+0x118>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <MX_GPIO_Init+0x118>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <MX_GPIO_Init+0x118>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <MX_GPIO_Init+0x118>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a2d      	ldr	r2, [pc, #180]	; (80014d0 <MX_GPIO_Init+0x118>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <MX_GPIO_Init+0x118>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CE_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2161      	movs	r1, #97	; 0x61
 8001430:	4828      	ldr	r0, [pc, #160]	; (80014d4 <MX_GPIO_Init+0x11c>)
 8001432:	f001 faac 	bl	800298e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2120      	movs	r1, #32
 800143a:	4827      	ldr	r0, [pc, #156]	; (80014d8 <MX_GPIO_Init+0x120>)
 800143c:	f001 faa7 	bl	800298e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_GPIO_Port, Backlight_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2140      	movs	r1, #64	; 0x40
 8001444:	4825      	ldr	r0, [pc, #148]	; (80014dc <MX_GPIO_Init+0x124>)
 8001446:	f001 faa2 	bl	800298e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <MX_GPIO_Init+0x128>)
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	481d      	ldr	r0, [pc, #116]	; (80014d4 <MX_GPIO_Init+0x11c>)
 8001460:	f001 f924 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_CE_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001464:	2361      	movs	r3, #97	; 0x61
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2302      	movs	r3, #2
 8001472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	4816      	ldr	r0, [pc, #88]	; (80014d4 <MX_GPIO_Init+0x11c>)
 800147c:	f001 f916 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001480:	2320      	movs	r3, #32
 8001482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2302      	movs	r3, #2
 800148e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4619      	mov	r1, r3
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <MX_GPIO_Init+0x120>)
 8001498:	f001 f908 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Backlight_Pin;
 800149c:	2340      	movs	r3, #64	; 0x40
 800149e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Backlight_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4619      	mov	r1, r3
 80014b2:	480a      	ldr	r0, [pc, #40]	; (80014dc <MX_GPIO_Init+0x124>)
 80014b4:	f001 f8fa 	bl	80026ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2028      	movs	r0, #40	; 0x28
 80014be:	f001 f8be 	bl	800263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014c2:	2028      	movs	r0, #40	; 0x28
 80014c4:	f001 f8d7 	bl	8002676 <HAL_NVIC_EnableIRQ>

}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00
 80014e0:	10110000 	.word	0x10110000

080014e4 <lcd_cmd>:
#define LCD_BUFFER_SIZE			(84 * 48 / 8)

static uint8_t lcd_buffer[LCD_BUFFER_SIZE];

void lcd_cmd(uint8_t cmd)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CE_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2121      	movs	r1, #33	; 0x21
 80014f2:	4809      	ldr	r0, [pc, #36]	; (8001518 <lcd_cmd+0x34>)
 80014f4:	f001 fa4b 	bl	800298e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80014f8:	1df9      	adds	r1, r7, #7
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	2201      	movs	r2, #1
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <lcd_cmd+0x38>)
 8001502:	f002 fe4f 	bl	80041a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CE_CS_Pin | LCD_DC_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2121      	movs	r1, #33	; 0x21
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <lcd_cmd+0x34>)
 800150c:	f001 fa3f 	bl	800298e <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40011000 	.word	0x40011000
 800151c:	200004b4 	.word	0x200004b4

08001520 <lcd_setup>:

void lcd_setup(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <lcd_setup+0x3c>)
 800152a:	f001 fa30 	bl	800298e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2140      	movs	r1, #64	; 0x40
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <lcd_setup+0x3c>)
 8001534:	f001 fa2b 	bl	800298e <HAL_GPIO_WritePin>

	lcd_cmd(PCD8544_FUNCTION_SET | 1);
 8001538:	2021      	movs	r0, #33	; 0x21
 800153a:	f7ff ffd3 	bl	80014e4 <lcd_cmd>
	lcd_cmd(PCD8544_H_BIAS | 4);
 800153e:	2014      	movs	r0, #20
 8001540:	f7ff ffd0 	bl	80014e4 <lcd_cmd>
	lcd_cmd(PCD8544_H_VOP | 0x3f);
 8001544:	20bf      	movs	r0, #191	; 0xbf
 8001546:	f7ff ffcd 	bl	80014e4 <lcd_cmd>
	lcd_cmd(PCD8544_FUNCTION_SET);
 800154a:	2020      	movs	r0, #32
 800154c:	f7ff ffca 	bl	80014e4 <lcd_cmd>
	lcd_cmd(PCD8544_DISP_NORMAL);
 8001550:	200c      	movs	r0, #12
 8001552:	f7ff ffc7 	bl	80014e4 <lcd_cmd>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40011000 	.word	0x40011000

08001560 <lcd_deinit>:

void lcd_deinit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2140      	movs	r1, #64	; 0x40
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <lcd_deinit+0x14>)
 800156a:	f001 fa10 	bl	800298e <HAL_GPIO_WritePin>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40011000 	.word	0x40011000

08001578 <lcd_draw_text>:
{
	memcpy(lcd_buffer, data, LCD_BUFFER_SIZE);
}

void lcd_draw_text(int row, int col, const char* text)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t* pbuf = &lcd_buffer[row * 84 + col];
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2254      	movs	r2, #84	; 0x54
 8001588:	fb02 f203 	mul.w	r2, r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <lcd_draw_text+0x84>)
 8001592:	4413      	add	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 8001596:	e023      	b.n	80015e0 <lcd_draw_text+0x68>
		int ch = *text++;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	613b      	str	r3, [r7, #16]
		const uint8_t* font = &font_ASCII[ch - ' '][0];
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	f1a3 0220 	sub.w	r2, r3, #32
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	4a14      	ldr	r2, [pc, #80]	; (8001600 <lcd_draw_text+0x88>)
 80015b0:	4413      	add	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 5; i++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	e00a      	b.n	80015d0 <lcd_draw_text+0x58>
			*pbuf++ = *font++;
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	1c53      	adds	r3, r2, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	1c59      	adds	r1, r3, #1
 80015c4:	61b9      	str	r1, [r7, #24]
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 5; i++) {
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	ddf1      	ble.n	80015ba <lcd_draw_text+0x42>
		}
		*pbuf++ = 0;
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	61ba      	str	r2, [r7, #24]
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <lcd_draw_text+0x78>
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	4a06      	ldr	r2, [pc, #24]	; (8001604 <lcd_draw_text+0x8c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d3d3      	bcc.n	8001598 <lcd_draw_text+0x20>
	}
}
 80015f0:	bf00      	nop
 80015f2:	3724      	adds	r7, #36	; 0x24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000204 	.word	0x20000204
 8001600:	080070b4 	.word	0x080070b4
 8001604:	200003f6 	.word	0x200003f6

08001608 <lcd_copy>:
        }
    }
}

void lcd_copy(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2120      	movs	r1, #32
 8001610:	480b      	ldr	r0, [pc, #44]	; (8001640 <lcd_copy+0x38>)
 8001612:	f001 f9bc 	bl	800298e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_CE_CS_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2101      	movs	r1, #1
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <lcd_copy+0x38>)
 800161c:	f001 f9b7 	bl	800298e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, lcd_buffer, LCD_BUFFER_SIZE, HAL_MAX_DELAY);
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001628:	4906      	ldr	r1, [pc, #24]	; (8001644 <lcd_copy+0x3c>)
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <lcd_copy+0x40>)
 800162c:	f002 fdba 	bl	80041a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CE_CS_Pin, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2101      	movs	r1, #1
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <lcd_copy+0x38>)
 8001636:	f001 f9aa 	bl	800298e <HAL_GPIO_WritePin>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40011000 	.word	0x40011000
 8001644:	20000204 	.word	0x20000204
 8001648:	200004b4 	.word	0x200004b4

0800164c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b085      	sub	sp, #20
 8001650:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001652:	f000 fe99 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001656:	f000 f8ef 	bl	8001838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165a:	f7ff fead 	bl	80013b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800165e:	f000 fe05 	bl	800226c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001662:	f000 fd5b 	bl	800211c <MX_TIM3_Init>
  MX_SPI2_Init();
 8001666:	f000 fc37 	bl	8001ed8 <MX_SPI2_Init>
  MX_RTC_Init();
 800166a:	f000 fbc7 	bl	8001dfc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //-----------INICJALIZACJA PARAMETRÓW DS18B20-----------------
  DS18B20_Init(DS18B20_Resolution_12bits);	//rozdzielczość 10 bit (dokładność 0,25 C)
 800166e:	200c      	movs	r0, #12
 8001670:	f7ff fe52 	bl	8001318 <DS18B20_Init>



  lcd_setup();
 8001674:	f7ff ff54 	bl	8001520 <lcd_setup>
  lcd_copy();
 8001678:	f7ff ffc6 	bl	8001608 <lcd_copy>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800167c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001680:	485b      	ldr	r0, [pc, #364]	; (80017f0 <main+0x1a4>)
 8001682:	f001 f96d 	bl	8002960 <HAL_GPIO_ReadPin>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f7      	bne.n	800167c <main+0x30>
	  {
		  HAL_Delay(200);
 800168c:	20c8      	movs	r0, #200	; 0xc8
 800168e:	f000 fedd 	bl	800244c <HAL_Delay>
		  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001696:	4856      	ldr	r0, [pc, #344]	; (80017f0 <main+0x1a4>)
 8001698:	f001 f962 	bl	8002960 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ec      	bne.n	800167c <main+0x30>
		  {
			  HAL_GPIO_WritePin(Backlight_GPIO_Port, Backlight_Pin, GPIO_PIN_SET);	//włączenie podświetlenia
 80016a2:	2201      	movs	r2, #1
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	4853      	ldr	r0, [pc, #332]	; (80017f4 <main+0x1a8>)
 80016a8:	f001 f971 	bl	800298e <HAL_GPIO_WritePin>

			  //----------------------------------------------
			  //==============================================
			  HAL_Delay(1000);		//odczekaj po inicjalizacji czujnika temperatury - KONIECZNE!!!
 80016ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b0:	f000 fecc 	bl	800244c <HAL_Delay>
			  DS18B20_ReadAll();	//odczytanie skonwertowanej temperatury do odpowiednich elementów w tablicy czujników
 80016b4:	f7ff fdc6 	bl	8001244 <DS18B20_ReadAll>
			  DS18B20_StartAll();	//rozesłanie do wszystkich podłączonych czujników komendy startu konwersji temperatury
 80016b8:	f7ff fc44 	bl	8000f44 <DS18B20_StartAll>
			  uint8_t i;
			  for (i=0; i < DS18B20_Quantity(); i++)
 80016bc:	2300      	movs	r3, #0
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	e08d      	b.n	80017de <main+0x192>
			  {
				  if (DS18B20_GetTemperature(i, &temperature))
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	494c      	ldr	r1, [pc, #304]	; (80017f8 <main+0x1ac>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fe06 	bl	80012d8 <DS18B20_GetTemperature>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00c      	beq.n	80016ec <main+0xa0>

			//		  DS18B20_Read(0, &temperature);	//nie działa

			//		  DS18B20_GetROM(i, ROM_tmp);
			//		  memset(komunikat, 0, sizeof(komunikat));
				  sprintf(komunikat, "Temp: %.2f \n\r", temperature);
 80016d2:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <main+0x1ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fea6 	bl	8000428 <__aeabi_f2d>
 80016dc:	4603      	mov	r3, r0
 80016de:	460c      	mov	r4, r1
 80016e0:	461a      	mov	r2, r3
 80016e2:	4623      	mov	r3, r4
 80016e4:	4945      	ldr	r1, [pc, #276]	; (80017fc <main+0x1b0>)
 80016e6:	4846      	ldr	r0, [pc, #280]	; (8001800 <main+0x1b4>)
 80016e8:	f004 f8bc 	bl	8005864 <siprintf>
				  lcd_draw_text(1,2, "Temp: ");
 80016ec:	4a45      	ldr	r2, [pc, #276]	; (8001804 <main+0x1b8>)
 80016ee:	2102      	movs	r1, #2
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7ff ff41 	bl	8001578 <lcd_draw_text>

				  sprintf(buffer, "%.2f", temperature);
 80016f6:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <main+0x1ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fe94 	bl	8000428 <__aeabi_f2d>
 8001700:	4603      	mov	r3, r0
 8001702:	460c      	mov	r4, r1
 8001704:	461a      	mov	r2, r3
 8001706:	4623      	mov	r3, r4
 8001708:	493f      	ldr	r1, [pc, #252]	; (8001808 <main+0x1bc>)
 800170a:	4840      	ldr	r0, [pc, #256]	; (800180c <main+0x1c0>)
 800170c:	f004 f8aa 	bl	8005864 <siprintf>
				  lcd_draw_text(1, 35, (uint8_t *)buffer);
 8001710:	4a3e      	ldr	r2, [pc, #248]	; (800180c <main+0x1c0>)
 8001712:	2123      	movs	r1, #35	; 0x23
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff ff2f 	bl	8001578 <lcd_draw_text>

				  lcd_draw_text(1, 68, "C");
 800171a:	4a3d      	ldr	r2, [pc, #244]	; (8001810 <main+0x1c4>)
 800171c:	2144      	movs	r1, #68	; 0x44
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff ff2a 	bl	8001578 <lcd_draw_text>

				  HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8001724:	2200      	movs	r2, #0
 8001726:	493b      	ldr	r1, [pc, #236]	; (8001814 <main+0x1c8>)
 8001728:	483b      	ldr	r0, [pc, #236]	; (8001818 <main+0x1cc>)
 800172a:	f002 f833 	bl	8003794 <HAL_RTC_GetTime>
				  HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800172e:	2200      	movs	r2, #0
 8001730:	493a      	ldr	r1, [pc, #232]	; (800181c <main+0x1d0>)
 8001732:	4839      	ldr	r0, [pc, #228]	; (8001818 <main+0x1cc>)
 8001734:	f002 f9bc 	bl	8003ab0 <HAL_RTC_GetDate>

				  if(RtcTime.Seconds != CompareSeconds)		//sprawia, że czas i data aktualizuje się na wyświetlaczu co sekundę
 8001738:	4b36      	ldr	r3, [pc, #216]	; (8001814 <main+0x1c8>)
 800173a:	789a      	ldrb	r2, [r3, #2]
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <main+0x1d4>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d030      	beq.n	80017a6 <main+0x15a>
					  {
					  sprintf(RtcPrint, "%02d:%02d:%02d \n\r", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <main+0x1c8>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b32      	ldr	r3, [pc, #200]	; (8001814 <main+0x1c8>)
 800174c:	785b      	ldrb	r3, [r3, #1]
 800174e:	4619      	mov	r1, r3
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <main+0x1c8>)
 8001752:	789b      	ldrb	r3, [r3, #2]
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	460b      	mov	r3, r1
 8001758:	4932      	ldr	r1, [pc, #200]	; (8001824 <main+0x1d8>)
 800175a:	4833      	ldr	r0, [pc, #204]	; (8001828 <main+0x1dc>)
 800175c:	f004 f882 	bl	8005864 <siprintf>
					  lcd_draw_text(3, 2, (uint8_t *)RtcPrint);
 8001760:	4a31      	ldr	r2, [pc, #196]	; (8001828 <main+0x1dc>)
 8001762:	2102      	movs	r1, #2
 8001764:	2003      	movs	r0, #3
 8001766:	f7ff ff07 	bl	8001578 <lcd_draw_text>
					  sprintf(RtcPrint, "%02d.%02d.20%02d\n\r", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 800176a:	4b2c      	ldr	r3, [pc, #176]	; (800181c <main+0x1d0>)
 800176c:	789b      	ldrb	r3, [r3, #2]
 800176e:	461a      	mov	r2, r3
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <main+0x1d0>)
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	4619      	mov	r1, r3
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <main+0x1d0>)
 8001778:	78db      	ldrb	r3, [r3, #3]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	460b      	mov	r3, r1
 800177e:	492b      	ldr	r1, [pc, #172]	; (800182c <main+0x1e0>)
 8001780:	4829      	ldr	r0, [pc, #164]	; (8001828 <main+0x1dc>)
 8001782:	f004 f86f 	bl	8005864 <siprintf>
					  lcd_draw_text(4, 2, (uint8_t *)RtcPrint);
 8001786:	4a28      	ldr	r2, [pc, #160]	; (8001828 <main+0x1dc>)
 8001788:	2102      	movs	r1, #2
 800178a:	2004      	movs	r0, #4
 800178c:	f7ff fef4 	bl	8001578 <lcd_draw_text>
					  HAL_UART_Transmit(&huart2, (uint8_t*) RtcPrint, sizeof(RtcPrint), 1000);
 8001790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001794:	2214      	movs	r2, #20
 8001796:	4924      	ldr	r1, [pc, #144]	; (8001828 <main+0x1dc>)
 8001798:	4825      	ldr	r0, [pc, #148]	; (8001830 <main+0x1e4>)
 800179a:	f003 fa6c 	bl	8004c76 <HAL_UART_Transmit>
					  CompareSeconds = RtcTime.Seconds;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <main+0x1c8>)
 80017a0:	789a      	ldrb	r2, [r3, #2]
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <main+0x1d4>)
 80017a4:	701a      	strb	r2, [r3, #0]
					  }

			//		  lcd_draw_text(2, 35, (uint8_t *)buffer2));		//wyświetla "test"
			//	  }
				  lcd_copy();
 80017a6:	f7ff ff2f 	bl	8001608 <lcd_copy>
				  HAL_UART_Transmit(&huart2, (uint8_t *)komunikat, sizeof(komunikat), 100);
 80017aa:	2364      	movs	r3, #100	; 0x64
 80017ac:	2214      	movs	r2, #20
 80017ae:	4914      	ldr	r1, [pc, #80]	; (8001800 <main+0x1b4>)
 80017b0:	481f      	ldr	r0, [pc, #124]	; (8001830 <main+0x1e4>)
 80017b2:	f003 fa60 	bl	8004c76 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2, (uint8_t *)buffer2, sizeof(buffer2), 100);
 80017b6:	2364      	movs	r3, #100	; 0x64
 80017b8:	2205      	movs	r2, #5
 80017ba:	491e      	ldr	r1, [pc, #120]	; (8001834 <main+0x1e8>)
 80017bc:	481c      	ldr	r0, [pc, #112]	; (8001830 <main+0x1e4>)
 80017be:	f003 fa5a 	bl	8004c76 <HAL_UART_Transmit>
				  HAL_Delay(10000);
 80017c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80017c6:	f000 fe41 	bl	800244c <HAL_Delay>
				lcd_deinit();
 80017ca:	f7ff fec9 	bl	8001560 <lcd_deinit>
				HAL_GPIO_WritePin(Backlight_GPIO_Port, Backlight_Pin, GPIO_PIN_RESET);	//wyłączenie podświetlenia
 80017ce:	2200      	movs	r2, #0
 80017d0:	2140      	movs	r1, #64	; 0x40
 80017d2:	4808      	ldr	r0, [pc, #32]	; (80017f4 <main+0x1a8>)
 80017d4:	f001 f8db 	bl	800298e <HAL_GPIO_WritePin>
			  for (i=0; i < DS18B20_Quantity(); i++)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	3301      	adds	r3, #1
 80017dc:	71fb      	strb	r3, [r7, #7]
 80017de:	f7ff fd71 	bl	80012c4 <DS18B20_Quantity>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	4293      	cmp	r3, r2
 80017ea:	f4ff af6a 	bcc.w	80016c2 <main+0x76>
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80017ee:	e745      	b.n	800167c <main+0x30>
 80017f0:	40011000 	.word	0x40011000
 80017f4:	40010c00 	.word	0x40010c00
 80017f8:	20000474 	.word	0x20000474
 80017fc:	08007040 	.word	0x08007040
 8001800:	20000460 	.word	0x20000460
 8001804:	08007050 	.word	0x08007050
 8001808:	08007058 	.word	0x08007058
 800180c:	2000047c 	.word	0x2000047c
 8001810:	08007060 	.word	0x08007060
 8001814:	20000478 	.word	0x20000478
 8001818:	200004a0 	.word	0x200004a0
 800181c:	20000498 	.word	0x20000498
 8001820:	2000049c 	.word	0x2000049c
 8001824:	08007064 	.word	0x08007064
 8001828:	20000484 	.word	0x20000484
 800182c:	08007078 	.word	0x08007078
 8001830:	20000554 	.word	0x20000554
 8001834:	20000000 	.word	0x20000000

08001838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	; 0x50
 800183c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001842:	2228      	movs	r2, #40	; 0x28
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f003 fbb5 	bl	8004fb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001868:	2306      	movs	r3, #6
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800186c:	2301      	movs	r3, #1
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001870:	2301      	movs	r3, #1
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001874:	2310      	movs	r3, #16
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001878:	2302      	movs	r3, #2
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800187c:	2300      	movs	r3, #0
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001880:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001884:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188a:	4618      	mov	r0, r3
 800188c:	f001 f8c6 	bl	8002a1c <HAL_RCC_OscConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001896:	f000 f828 	bl	80018ea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189a:	230f      	movs	r3, #15
 800189c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2102      	movs	r1, #2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fb30 	bl	8002f1c <HAL_RCC_ClockConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018c2:	f000 f812 	bl	80018ea <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018c6:	2301      	movs	r3, #1
 80018c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ce:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 fcbe 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018de:	f000 f804 	bl	80018ea <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3750      	adds	r7, #80	; 0x50
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
	...

080018f8 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <OneWire_Delay+0x2c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 800190a:	bf00      	nop
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <OneWire_Delay+0x2c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	429a      	cmp	r2, r3
 8001916:	d9f9      	bls.n	800190c <OneWire_Delay+0x14>
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	2000050c 	.word	0x2000050c

08001928 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001938:	2301      	movs	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	889b      	ldrh	r3, [r3, #4]
 8001940:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f107 0208 	add.w	r2, r7, #8
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fead 	bl	80026ac <HAL_GPIO_Init>
}	
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8001962:	2311      	movs	r3, #17
 8001964:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 800196a:	2301      	movs	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	889b      	ldrh	r3, [r3, #4]
 8001972:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fe94 	bl	80026ac <HAL_GPIO_Init>
}
 8001984:	bf00      	nop
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	889b      	ldrh	r3, [r3, #4]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	611a      	str	r2, [r3, #16]
}	
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	889a      	ldrh	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	611a      	str	r2, [r3, #16]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffdc 	bl	800198c <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ffc0 	bl	800195a <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 80019da:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80019de:	f7ff ff8b 	bl	80018f8 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ffa0 	bl	8001928 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 80019e8:	2046      	movs	r0, #70	; 0x46
 80019ea:	f7ff ff85 	bl	80018f8 <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	889b      	ldrh	r3, [r3, #4]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f000 ffb1 	bl	8002960 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8001a02:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001a06:	f7ff ff77 	bl	80018f8 <OneWire_Delay>

	return i;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d012      	beq.n	8001a4c <OneWire_WriteBit+0x38>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffb0 	bl	800198c <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff94 	bl	800195a <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8001a32:	2006      	movs	r0, #6
 8001a34:	f7ff ff60 	bl	80018f8 <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff75 	bl	8001928 <OneWire_BusInputDirection>
		
		OneWire_Delay(64);
 8001a3e:	2040      	movs	r0, #64	; 0x40
 8001a40:	f7ff ff5a 	bl	80018f8 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); //Release bus
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff6f 	bl	8001928 <OneWire_BusInputDirection>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		
		OneWire_Delay(10);
		OneWire_BusInputDirection(onewire); // Release bus
	}
}
 8001a4a:	e011      	b.n	8001a70 <OneWire_WriteBit+0x5c>
		OneWire_OutputLow(onewire); // Set the bus low
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff9d 	bl	800198c <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ff81 	bl	800195a <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8001a58:	203c      	movs	r0, #60	; 0x3c
 8001a5a:	f7ff ff4d 	bl	80018f8 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff62 	bl	8001928 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8001a64:	200a      	movs	r0, #10
 8001a66:	f7ff ff47 	bl	80018f8 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff5c 	bl	8001928 <OneWire_BusInputDirection>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff81 	bl	800198c <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff65 	bl	800195a <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8001a90:	2002      	movs	r0, #2
 8001a92:	f7ff ff31 	bl	80018f8 <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff46 	bl	8001928 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	f7ff ff2b 	bl	80018f8 <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	889b      	ldrh	r3, [r3, #4]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f000 ff57 	bl	8002960 <HAL_GPIO_ReadPin>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <OneWire_ReadBit+0x44>
		bit = 1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
	
	OneWire_Delay(50); // Wait for end of read cycle
 8001abc:	2032      	movs	r0, #50	; 0x32
 8001abe:	f7ff ff1b 	bl	80018f8 <OneWire_Delay>

	return bit;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff94 	bl	8001a14 <OneWire_WriteBit>
		byte >>= 1;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	085b      	lsrs	r3, r3, #1
 8001af0:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ee      	bne.n	8001adc <OneWire_WriteByte+0x10>
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001b0e:	2308      	movs	r3, #8
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	2300      	movs	r3, #0
 8001b14:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8001b16:	7bbb      	ldrb	r3, [r7, #14]
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ffab 	bl	8001a78 <OneWire_ReadBit>
 8001b22:	4603      	mov	r3, r0
 8001b24:	01db      	lsls	r3, r3, #7
 8001b26:	b25a      	sxtb	r2, r3
 8001b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1eb      	bne.n	8001b16 <OneWire_ReadByte+0x10>
	
	return byte;
 8001b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	71da      	strb	r2, [r3, #7]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7a1b      	ldrb	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f040 809a 	bne.w	8001cca <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff15 	bl	80019c6 <OneWire_Reset>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	71da      	strb	r2, [r3, #7]
			return 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e09b      	b.n	8001cf0 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff85 	bl	8001acc <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff58 	bl	8001a78 <OneWire_ReadBit>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff53 	bl	8001a78 <OneWire_ReadBit>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8001bd6:	7a7b      	ldrb	r3, [r7, #9]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d102      	bne.n	8001be2 <OneWire_Search+0x76>
 8001bdc:	7a3b      	ldrb	r3, [r7, #8]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d064      	beq.n	8001cac <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8001be2:	7a7a      	ldrb	r2, [r7, #9]
 8001be4:	7a3b      	ldrb	r3, [r7, #8]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d002      	beq.n	8001bf0 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8001bea:	7a7b      	ldrb	r3, [r7, #9]
 8001bec:	72bb      	strb	r3, [r7, #10]
 8001bee:	e026      	b.n	8001c3e <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	799b      	ldrb	r3, [r3, #6]
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d20d      	bcs.n	8001c16 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001bfa:	7b7b      	ldrb	r3, [r7, #13]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	7a5a      	ldrb	r2, [r3, #9]
 8001c02:	7afb      	ldrb	r3, [r7, #11]
 8001c04:	4013      	ands	r3, r2
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	72bb      	strb	r3, [r7, #10]
 8001c14:	e008      	b.n	8001c28 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	799b      	ldrb	r3, [r3, #6]
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001c28:	7abb      	ldrb	r3, [r7, #10]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8001c32:	7bbb      	ldrb	r3, [r7, #14]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d802      	bhi.n	8001c3e <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7bba      	ldrb	r2, [r7, #14]
 8001c3c:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8001c3e:	7abb      	ldrb	r3, [r7, #10]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d10c      	bne.n	8001c5e <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8001c44:	7b7b      	ldrb	r3, [r7, #13]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	7a59      	ldrb	r1, [r3, #9]
 8001c4c:	7b7b      	ldrb	r3, [r7, #13]
 8001c4e:	7afa      	ldrb	r2, [r7, #11]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	b2d1      	uxtb	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	460a      	mov	r2, r1
 8001c5a:	725a      	strb	r2, [r3, #9]
 8001c5c:	e010      	b.n	8001c80 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8001c5e:	7b7b      	ldrb	r3, [r7, #13]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	7a5b      	ldrb	r3, [r3, #9]
 8001c66:	b25a      	sxtb	r2, r3
 8001c68:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	4013      	ands	r3, r2
 8001c72:	b25a      	sxtb	r2, r3
 8001c74:	7b7b      	ldrb	r3, [r7, #13]
 8001c76:	b2d1      	uxtb	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	725a      	strb	r2, [r3, #9]
				}
				
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8001c80:	7abb      	ldrb	r3, [r7, #10]
 8001c82:	4619      	mov	r1, r3
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fec5 	bl	8001a14 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d104      	bne.n	8001ca6 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8001c9c:	7b7b      	ldrb	r3, [r7, #13]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8001ca6:	7b7b      	ldrb	r3, [r7, #13]
 8001ca8:	2b07      	cmp	r3, #7
 8001caa:	d98a      	bls.n	8001bc2 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b40      	cmp	r3, #64	; 0x40
 8001cb0:	d90b      	bls.n	8001cca <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7bba      	ldrb	r2, [r7, #14]
 8001cb6:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	799b      	ldrb	r3, [r3, #6]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8001cca:	7b3b      	ldrb	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <OneWire_Search+0x16c>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7a5b      	ldrb	r3, [r3, #9]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff21 	bl	8001b48 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001d06:	21f0      	movs	r1, #240	; 0xf0
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff2f 	bl	8001b6c <OneWire_Search>
 8001d0e:	4603      	mov	r3, r0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001d20:	21f0      	movs	r1, #240	; 0xf0
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff22 	bl	8001b6c <OneWire_Search>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8001d3c:	2155      	movs	r1, #85	; 0x55
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fec4 	bl	8001acc <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e00a      	b.n	8001d60 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff feb9 	bl	8001acc <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b07      	cmp	r3, #7
 8001d64:	d9f1      	bls.n	8001d4a <OneWire_SelectWithPointer+0x18>
	}	
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e00a      	b.n	8001d94 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	6839      	ldr	r1, [r7, #0]
 8001d84:	440b      	add	r3, r1
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	440a      	add	r2, r1
 8001d8a:	7a52      	ldrb	r2, [r2, #9]
 8001d8c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3301      	adds	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b07      	cmp	r3, #7
 8001d98:	d9f1      	bls.n	8001d7e <OneWire_GetFullROM+0x10>
	}
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8001db2:	4811      	ldr	r0, [pc, #68]	; (8001df8 <OneWire_Init+0x54>)
 8001db4:	f002 fbd8 	bl	8004568 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	88fa      	ldrh	r2, [r7, #6]
 8001dc2:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7ff fdc8 	bl	800195a <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fded 	bl	80019aa <OneWire_OutputHigh>
	HAL_Delay(100);
 8001dd0:	2064      	movs	r0, #100	; 0x64
 8001dd2:	f000 fb3b 	bl	800244c <HAL_Delay>
	OneWire_OutputLow(onewire);
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7ff fdd8 	bl	800198c <OneWire_OutputLow>
	HAL_Delay(100);
 8001ddc:	2064      	movs	r0, #100	; 0x64
 8001dde:	f000 fb35 	bl	800244c <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff fde1 	bl	80019aa <OneWire_OutputHigh>
	HAL_Delay(200);
 8001de8:	20c8      	movs	r0, #200	; 0xc8
 8001dea:	f000 fb2f 	bl	800244c <HAL_Delay>
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000050c 	.word	0x2000050c

08001dfc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2100      	movs	r1, #0
 8001e06:	460a      	mov	r2, r1
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	460a      	mov	r2, r1
 8001e0c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_RTC_Init+0x8c>)
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <MX_RTC_Init+0x90>)
 8001e16:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_RTC_Init+0x8c>)
 8001e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <MX_RTC_Init+0x8c>)
 8001e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e26:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e28:	4817      	ldr	r0, [pc, #92]	; (8001e88 <MX_RTC_Init+0x8c>)
 8001e2a:	f001 fb85 	bl	8003538 <HAL_RTC_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001e34:	f7ff fd59 	bl	80018ea <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8001e38:	2312      	movs	r3, #18
 8001e3a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x50;
 8001e3c:	2350      	movs	r3, #80	; 0x50
 8001e3e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2201      	movs	r2, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480f      	ldr	r0, [pc, #60]	; (8001e88 <MX_RTC_Init+0x8c>)
 8001e4c:	f001 fc0a 	bl	8003664 <HAL_RTC_SetTime>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001e56:	f7ff fd48 	bl	80018ea <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_DECEMBER;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x27;
 8001e62:	2327      	movs	r3, #39	; 0x27
 8001e64:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x20;
 8001e66:	2320      	movs	r3, #32
 8001e68:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_RTC_Init+0x8c>)
 8001e72:	f001 fd67 	bl	8003944 <HAL_RTC_SetDate>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001e7c:	f7ff fd35 	bl	80018ea <Error_Handler>
  }

}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200004a0 	.word	0x200004a0
 8001e8c:	40002800 	.word	0x40002800

08001e90 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <HAL_RTC_MspInit+0x3c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d110      	bne.n	8001ec4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001ea2:	f000 fdaf 	bl	8002a04 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RTC_MspInit+0x40>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RTC_MspInit+0x40>)
 8001eac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_RTC_MspInit+0x40>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RTC_MspInit+0x44>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40002800 	.word	0x40002800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	4242043c 	.word	0x4242043c

08001ed8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001ede:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <MX_SPI2_Init+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001ee4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f24:	220a      	movs	r2, #10
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f2a:	f002 f8b7 	bl	800409c <HAL_SPI_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f34:	f7ff fcd9 	bl	80018ea <Error_Handler>
  }

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200004b4 	.word	0x200004b4
 8001f40:	40003800 	.word	0x40003800

08001f44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_SPI_MspInit+0x8c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d131      	bne.n	8001fc8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_SPI_MspInit+0x90>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <HAL_SPI_MspInit+0x90>)
 8001f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6e:	61d3      	str	r3, [r2, #28]
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_SPI_MspInit+0x90>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_SPI_MspInit+0x90>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <HAL_SPI_MspInit+0x90>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_SPI_MspInit+0x90>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f94:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <HAL_SPI_MspInit+0x94>)
 8001faa:	f000 fb7f 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <HAL_SPI_MspInit+0x94>)
 8001fc4:	f000 fb72 	bl	80026ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40003800 	.word	0x40003800
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010c00 	.word	0x40010c00

08001fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_MspInit+0x5c>)
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <HAL_MspInit+0x5c>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6193      	str	r3, [r2, #24]
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_MspInit+0x5c>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_MspInit+0x5c>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_MspInit+0x5c>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_MspInit+0x5c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_MspInit+0x60>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_MspInit+0x60>)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000
 800203c:	40010000 	.word	0x40010000

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <HardFault_Handler+0x4>

08002052 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <MemManage_Handler+0x4>

08002058 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <BusFault_Handler+0x4>

0800205e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <UsageFault_Handler+0x4>

08002064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208c:	f000 f9c2 	bl	8002414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002098:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800209c:	f000 fc90 	bl	80029c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <_sbrk+0x5c>)
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <_sbrk+0x60>)
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <_sbrk+0x64>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <_sbrk+0x68>)
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d207      	bcs.n	80020e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d4:	f002 ff3a 	bl	8004f4c <__errno>
 80020d8:	4602      	mov	r2, r0
 80020da:	230c      	movs	r3, #12
 80020dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e009      	b.n	80020f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <_sbrk+0x64>)
 80020f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20005000 	.word	0x20005000
 8002104:	00000400 	.word	0x00000400
 8002108:	200003fc 	.word	0x200003fc
 800210c:	200005a0 	.word	0x200005a0

08002110 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002122:	f107 0320 	add.w	r3, r7, #32
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	615a      	str	r2, [r3, #20]
 800213c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <MX_TIM3_Init+0xa4>)
 8002140:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <MX_TIM3_Init+0xa8>)
 8002142:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <MX_TIM3_Init+0xa4>)
 8002146:	223f      	movs	r2, #63	; 0x3f
 8002148:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <MX_TIM3_Init+0xa4>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <MX_TIM3_Init+0xa4>)
 8002152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002156:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <MX_TIM3_Init+0xa4>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <MX_TIM3_Init+0xa4>)
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002164:	4816      	ldr	r0, [pc, #88]	; (80021c0 <MX_TIM3_Init+0xa4>)
 8002166:	f002 fa49 	bl	80045fc <HAL_TIM_OC_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002170:	f7ff fbbb 	bl	80018ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800217c:	f107 0320 	add.w	r3, r7, #32
 8002180:	4619      	mov	r1, r3
 8002182:	480f      	ldr	r0, [pc, #60]	; (80021c0 <MX_TIM3_Init+0xa4>)
 8002184:	f002 fccc 	bl	8004b20 <HAL_TIMEx_MasterConfigSynchronization>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800218e:	f7ff fbac 	bl	80018ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2200      	movs	r2, #0
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_TIM3_Init+0xa4>)
 80021aa:	f002 fa77 	bl	800469c <HAL_TIM_OC_ConfigChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80021b4:	f7ff fb99 	bl	80018ea <Error_Handler>
  }

}
 80021b8:	bf00      	nop
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	2000050c 	.word	0x2000050c
 80021c4:	40000400 	.word	0x40000400

080021c8 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
  if(tim_ocHandle->Instance==TIM3)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1e      	ldr	r2, [pc, #120]	; (800225c <HAL_TIM_OC_MspInit+0x94>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d135      	bne.n	8002254 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_TIM_OC_MspInit+0x98>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_TIM_OC_MspInit+0x98>)
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	61d3      	str	r3, [r2, #28]
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_TIM_OC_MspInit+0x98>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_TIM_OC_MspInit+0x98>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	4a16      	ldr	r2, [pc, #88]	; (8002260 <HAL_TIM_OC_MspInit+0x98>)
 8002206:	f043 0308 	orr.w	r3, r3, #8
 800220a:	6193      	str	r3, [r2, #24]
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_TIM_OC_MspInit+0x98>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = DS18B20_Pin;
 8002218:	2310      	movs	r3, #16
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2302      	movs	r3, #2
 8002222:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	480e      	ldr	r0, [pc, #56]	; (8002264 <HAL_TIM_OC_MspInit+0x9c>)
 800222c:	f000 fa3e 	bl	80026ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_TIM_OC_MspInit+0xa0>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	4a06      	ldr	r2, [pc, #24]	; (8002268 <HAL_TIM_OC_MspInit+0xa0>)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40000400 	.word	0x40000400
 8002260:	40021000 	.word	0x40021000
 8002264:	40010c00 	.word	0x40010c00
 8002268:	40010000 	.word	0x40010000

0800226c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <MX_USART2_UART_Init+0x50>)
 8002274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <MX_USART2_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_USART2_UART_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <MX_USART2_UART_Init+0x4c>)
 80022a4:	f002 fc9a 	bl	8004bdc <HAL_UART_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022ae:	f7ff fb1c 	bl	80018ea <Error_Handler>
  }

}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000554 	.word	0x20000554
 80022bc:	40004400 	.word	0x40004400

080022c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a15      	ldr	r2, [pc, #84]	; (8002330 <HAL_UART_MspInit+0x70>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d123      	bne.n	8002328 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_UART_MspInit+0x74>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	4a13      	ldr	r2, [pc, #76]	; (8002334 <HAL_UART_MspInit+0x74>)
 80022e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ea:	61d3      	str	r3, [r2, #28]
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_UART_MspInit+0x74>)
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <HAL_UART_MspInit+0x74>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <HAL_UART_MspInit+0x74>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	6193      	str	r3, [r2, #24]
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_UART_MspInit+0x74>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002310:	230c      	movs	r3, #12
 8002312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2302      	movs	r3, #2
 800231a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4619      	mov	r1, r3
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <HAL_UART_MspInit+0x78>)
 8002324:	f000 f9c2 	bl	80026ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002328:	bf00      	nop
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40004400 	.word	0x40004400
 8002334:	40021000 	.word	0x40021000
 8002338:	40010800 	.word	0x40010800

0800233c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800233c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800233e:	e003      	b.n	8002348 <LoopCopyDataInit>

08002340 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002342:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002344:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002346:	3104      	adds	r1, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002348:	480a      	ldr	r0, [pc, #40]	; (8002374 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800234c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800234e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002350:	d3f6      	bcc.n	8002340 <CopyDataInit>
  ldr r2, =_sbss
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002354:	e002      	b.n	800235c <LoopFillZerobss>

08002356 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002358:	f842 3b04 	str.w	r3, [r2], #4

0800235c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800235e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002360:	d3f9      	bcc.n	8002356 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002362:	f7ff fed5 	bl	8002110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002366:	f002 fdf7 	bl	8004f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800236a:	f7ff f96f 	bl	800164c <main>
  bx lr
 800236e:	4770      	bx	lr
  ldr r3, =_sidata
 8002370:	08007510 	.word	0x08007510
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002378:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 800237c:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8002380:	2000059c 	.word	0x2000059c

08002384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC1_2_IRQHandler>
	...

08002388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_Init+0x28>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <HAL_Init+0x28>)
 8002392:	f043 0310 	orr.w	r3, r3, #16
 8002396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002398:	2003      	movs	r0, #3
 800239a:	f000 f945 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800239e:	2000      	movs	r0, #0
 80023a0:	f000 f808 	bl	80023b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a4:	f7ff fe1a 	bl	8001fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40022000 	.word	0x40022000

080023b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_InitTick+0x54>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_InitTick+0x58>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f95d 	bl	8002692 <HAL_SYSTICK_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e00e      	b.n	8002400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d80a      	bhi.n	80023fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f000 f925 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f4:	4a06      	ldr	r2, [pc, #24]	; (8002410 <HAL_InitTick+0x5c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000008 	.word	0x20000008
 800240c:	20000010 	.word	0x20000010
 8002410:	2000000c 	.word	0x2000000c

08002414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_IncTick+0x1c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_IncTick+0x20>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a03      	ldr	r2, [pc, #12]	; (8002434 <HAL_IncTick+0x20>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000010 	.word	0x20000010
 8002434:	20000594 	.word	0x20000594

08002438 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return uwTick;
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <HAL_GetTick+0x10>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	20000594 	.word	0x20000594

0800244c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff fff0 	bl	8002438 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d005      	beq.n	8002472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_Delay+0x40>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002472:	bf00      	nop
 8002474:	f7ff ffe0 	bl	8002438 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d8f7      	bhi.n	8002474 <HAL_Delay+0x28>
  {
  }
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000010 	.word	0x20000010

08002490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4906      	ldr	r1, [pc, #24]	; (8002528 <__NVIC_EnableIRQ+0x34>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	e000e100 	.word	0xe000e100

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	; (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	; (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff90 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff2d 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff42 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff90 	bl	8002580 <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5f 	bl	800252c <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff35 	bl	80024f4 <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b08b      	sub	sp, #44	; 0x2c
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026be:	e127      	b.n	8002910 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026c0:	2201      	movs	r2, #1
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f040 8116 	bne.w	800290a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b12      	cmp	r3, #18
 80026e4:	d034      	beq.n	8002750 <HAL_GPIO_Init+0xa4>
 80026e6:	2b12      	cmp	r3, #18
 80026e8:	d80d      	bhi.n	8002706 <HAL_GPIO_Init+0x5a>
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d02b      	beq.n	8002746 <HAL_GPIO_Init+0x9a>
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d804      	bhi.n	80026fc <HAL_GPIO_Init+0x50>
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d031      	beq.n	800275a <HAL_GPIO_Init+0xae>
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d01c      	beq.n	8002734 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026fa:	e048      	b.n	800278e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d043      	beq.n	8002788 <HAL_GPIO_Init+0xdc>
 8002700:	2b11      	cmp	r3, #17
 8002702:	d01b      	beq.n	800273c <HAL_GPIO_Init+0x90>
          break;
 8002704:	e043      	b.n	800278e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002706:	4a89      	ldr	r2, [pc, #548]	; (800292c <HAL_GPIO_Init+0x280>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d026      	beq.n	800275a <HAL_GPIO_Init+0xae>
 800270c:	4a87      	ldr	r2, [pc, #540]	; (800292c <HAL_GPIO_Init+0x280>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d806      	bhi.n	8002720 <HAL_GPIO_Init+0x74>
 8002712:	4a87      	ldr	r2, [pc, #540]	; (8002930 <HAL_GPIO_Init+0x284>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d020      	beq.n	800275a <HAL_GPIO_Init+0xae>
 8002718:	4a86      	ldr	r2, [pc, #536]	; (8002934 <HAL_GPIO_Init+0x288>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01d      	beq.n	800275a <HAL_GPIO_Init+0xae>
          break;
 800271e:	e036      	b.n	800278e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002720:	4a85      	ldr	r2, [pc, #532]	; (8002938 <HAL_GPIO_Init+0x28c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0xae>
 8002726:	4a85      	ldr	r2, [pc, #532]	; (800293c <HAL_GPIO_Init+0x290>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d016      	beq.n	800275a <HAL_GPIO_Init+0xae>
 800272c:	4a84      	ldr	r2, [pc, #528]	; (8002940 <HAL_GPIO_Init+0x294>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0xae>
          break;
 8002732:	e02c      	b.n	800278e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	623b      	str	r3, [r7, #32]
          break;
 800273a:	e028      	b.n	800278e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	3304      	adds	r3, #4
 8002742:	623b      	str	r3, [r7, #32]
          break;
 8002744:	e023      	b.n	800278e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	3308      	adds	r3, #8
 800274c:	623b      	str	r3, [r7, #32]
          break;
 800274e:	e01e      	b.n	800278e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	330c      	adds	r3, #12
 8002756:	623b      	str	r3, [r7, #32]
          break;
 8002758:	e019      	b.n	800278e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002762:	2304      	movs	r3, #4
 8002764:	623b      	str	r3, [r7, #32]
          break;
 8002766:	e012      	b.n	800278e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002770:	2308      	movs	r3, #8
 8002772:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	611a      	str	r2, [r3, #16]
          break;
 800277a:	e008      	b.n	800278e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800277c:	2308      	movs	r3, #8
 800277e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	615a      	str	r2, [r3, #20]
          break;
 8002786:	e002      	b.n	800278e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
          break;
 800278c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2bff      	cmp	r3, #255	; 0xff
 8002792:	d801      	bhi.n	8002798 <HAL_GPIO_Init+0xec>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	e001      	b.n	800279c <HAL_GPIO_Init+0xf0>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2bff      	cmp	r3, #255	; 0xff
 80027a2:	d802      	bhi.n	80027aa <HAL_GPIO_Init+0xfe>
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	e002      	b.n	80027b0 <HAL_GPIO_Init+0x104>
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	3b08      	subs	r3, #8
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	210f      	movs	r1, #15
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	401a      	ands	r2, r3
 80027c2:	6a39      	ldr	r1, [r7, #32]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	431a      	orrs	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8096 	beq.w	800290a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027de:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_GPIO_Init+0x298>)
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	4a58      	ldr	r2, [pc, #352]	; (8002944 <HAL_GPIO_Init+0x298>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6193      	str	r3, [r2, #24]
 80027ea:	4b56      	ldr	r3, [pc, #344]	; (8002944 <HAL_GPIO_Init+0x298>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027f6:	4a54      	ldr	r2, [pc, #336]	; (8002948 <HAL_GPIO_Init+0x29c>)
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002802:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4b      	ldr	r2, [pc, #300]	; (800294c <HAL_GPIO_Init+0x2a0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_GPIO_Init+0x19e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4a      	ldr	r2, [pc, #296]	; (8002950 <HAL_GPIO_Init+0x2a4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00d      	beq.n	8002846 <HAL_GPIO_Init+0x19a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a49      	ldr	r2, [pc, #292]	; (8002954 <HAL_GPIO_Init+0x2a8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <HAL_GPIO_Init+0x196>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a48      	ldr	r2, [pc, #288]	; (8002958 <HAL_GPIO_Init+0x2ac>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_GPIO_Init+0x192>
 800283a:	2303      	movs	r3, #3
 800283c:	e006      	b.n	800284c <HAL_GPIO_Init+0x1a0>
 800283e:	2304      	movs	r3, #4
 8002840:	e004      	b.n	800284c <HAL_GPIO_Init+0x1a0>
 8002842:	2302      	movs	r3, #2
 8002844:	e002      	b.n	800284c <HAL_GPIO_Init+0x1a0>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_GPIO_Init+0x1a0>
 800284a:	2300      	movs	r3, #0
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	f002 0203 	and.w	r2, r2, #3
 8002852:	0092      	lsls	r2, r2, #2
 8002854:	4093      	lsls	r3, r2
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800285c:	493a      	ldr	r1, [pc, #232]	; (8002948 <HAL_GPIO_Init+0x29c>)
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	3302      	adds	r3, #2
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d006      	beq.n	8002884 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <HAL_GPIO_Init+0x2b0>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4938      	ldr	r1, [pc, #224]	; (800295c <HAL_GPIO_Init+0x2b0>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
 8002882:	e006      	b.n	8002892 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002884:	4b35      	ldr	r3, [pc, #212]	; (800295c <HAL_GPIO_Init+0x2b0>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	43db      	mvns	r3, r3
 800288c:	4933      	ldr	r1, [pc, #204]	; (800295c <HAL_GPIO_Init+0x2b0>)
 800288e:	4013      	ands	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800289e:	4b2f      	ldr	r3, [pc, #188]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	492e      	ldr	r1, [pc, #184]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
 80028aa:	e006      	b.n	80028ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	4929      	ldr	r1, [pc, #164]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028c6:	4b25      	ldr	r3, [pc, #148]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	4924      	ldr	r1, [pc, #144]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
 80028d2:	e006      	b.n	80028e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	43db      	mvns	r3, r3
 80028dc:	491f      	ldr	r1, [pc, #124]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028de:	4013      	ands	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	491a      	ldr	r1, [pc, #104]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60cb      	str	r3, [r1, #12]
 80028fa:	e006      	b.n	800290a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_GPIO_Init+0x2b0>)
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	43db      	mvns	r3, r3
 8002904:	4915      	ldr	r1, [pc, #84]	; (800295c <HAL_GPIO_Init+0x2b0>)
 8002906:	4013      	ands	r3, r2
 8002908:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	f47f aed0 	bne.w	80026c0 <HAL_GPIO_Init+0x14>
  }
}
 8002920:	bf00      	nop
 8002922:	372c      	adds	r7, #44	; 0x2c
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	10210000 	.word	0x10210000
 8002930:	10110000 	.word	0x10110000
 8002934:	10120000 	.word	0x10120000
 8002938:	10310000 	.word	0x10310000
 800293c:	10320000 	.word	0x10320000
 8002940:	10220000 	.word	0x10220000
 8002944:	40021000 	.word	0x40021000
 8002948:	40010000 	.word	0x40010000
 800294c:	40010800 	.word	0x40010800
 8002950:	40010c00 	.word	0x40010c00
 8002954:	40011000 	.word	0x40011000
 8002958:	40011400 	.word	0x40011400
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e001      	b.n	8002982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	807b      	strh	r3, [r7, #2]
 800299a:	4613      	mov	r3, r2
 800299c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800299e:	787b      	ldrb	r3, [r7, #1]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a4:	887a      	ldrh	r2, [r7, #2]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029aa:	e003      	b.n	80029b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ac:	887b      	ldrh	r3, [r7, #2]
 80029ae:	041a      	lsls	r2, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	611a      	str	r2, [r3, #16]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d006      	beq.n	80029e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f806 	bl	80029f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40010400 	.word	0x40010400

080029f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	420e0020 	.word	0x420e0020

08002a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e26c      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8087 	beq.w	8002b4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a3c:	4b92      	ldr	r3, [pc, #584]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d00c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a48:	4b8f      	ldr	r3, [pc, #572]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d112      	bne.n	8002a7a <HAL_RCC_OscConfig+0x5e>
 8002a54:	4b8c      	ldr	r3, [pc, #560]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a60:	d10b      	bne.n	8002a7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a62:	4b89      	ldr	r3, [pc, #548]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d06c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x12c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d168      	bne.n	8002b48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e246      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x76>
 8002a84:	4b80      	ldr	r3, [pc, #512]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a7f      	ldr	r2, [pc, #508]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e02e      	b.n	8002af0 <HAL_RCC_OscConfig+0xd4>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x98>
 8002a9a:	4b7b      	ldr	r3, [pc, #492]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a7a      	ldr	r2, [pc, #488]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a77      	ldr	r2, [pc, #476]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e01d      	b.n	8002af0 <HAL_RCC_OscConfig+0xd4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xbc>
 8002abe:	4b72      	ldr	r3, [pc, #456]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a71      	ldr	r2, [pc, #452]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b6f      	ldr	r3, [pc, #444]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6e      	ldr	r2, [pc, #440]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0xd4>
 8002ad8:	4b6b      	ldr	r3, [pc, #428]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a6a      	ldr	r2, [pc, #424]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b68      	ldr	r3, [pc, #416]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a67      	ldr	r2, [pc, #412]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff fc9e 	bl	8002438 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7ff fc9a 	bl	8002438 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	; 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1fa      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	4b5d      	ldr	r3, [pc, #372]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0xe4>
 8002b1e:	e014      	b.n	8002b4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7ff fc8a 	bl	8002438 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b28:	f7ff fc86 	bl	8002438 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e1e6      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x10c>
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d063      	beq.n	8002c1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b56:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b62:	4b49      	ldr	r3, [pc, #292]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x18c>
 8002b6e:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_RCC_OscConfig+0x176>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e1ba      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4939      	ldr	r1, [pc, #228]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	e03a      	b.n	8002c1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb0:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7ff fc3f 	bl	8002438 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7ff fc3b 	bl	8002438 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e19b      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4927      	ldr	r1, [pc, #156]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	600b      	str	r3, [r1, #0]
 8002bf0:	e015      	b.n	8002c1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf2:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7ff fc1e 	bl	8002438 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c00:	f7ff fc1a 	bl	8002438 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e17a      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d03a      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d019      	beq.n	8002c66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7ff fbfe 	bl	8002438 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c40:	f7ff fbfa 	bl	8002438 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e15a      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f000 fada 	bl	8003218 <RCC_Delay>
 8002c64:	e01c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6c:	f7ff fbe4 	bl	8002438 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c72:	e00f      	b.n	8002c94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c74:	f7ff fbe0 	bl	8002438 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d908      	bls.n	8002c94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e140      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	42420000 	.word	0x42420000
 8002c90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c94:	4b9e      	ldr	r3, [pc, #632]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e9      	bne.n	8002c74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80a6 	beq.w	8002dfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb2:	4b97      	ldr	r3, [pc, #604]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	4b94      	ldr	r3, [pc, #592]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	4a93      	ldr	r2, [pc, #588]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	61d3      	str	r3, [r2, #28]
 8002cca:	4b91      	ldr	r3, [pc, #580]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b8e      	ldr	r3, [pc, #568]	; (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d118      	bne.n	8002d18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce6:	4b8b      	ldr	r3, [pc, #556]	; (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a8a      	ldr	r2, [pc, #552]	; (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf2:	f7ff fba1 	bl	8002438 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7ff fb9d 	bl	8002438 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b64      	cmp	r3, #100	; 0x64
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e0fd      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	4b81      	ldr	r3, [pc, #516]	; (8002f14 <HAL_RCC_OscConfig+0x4f8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x312>
 8002d20:	4b7b      	ldr	r3, [pc, #492]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4a7a      	ldr	r2, [pc, #488]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6213      	str	r3, [r2, #32]
 8002d2c:	e02d      	b.n	8002d8a <HAL_RCC_OscConfig+0x36e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x334>
 8002d36:	4b76      	ldr	r3, [pc, #472]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a75      	ldr	r2, [pc, #468]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6213      	str	r3, [r2, #32]
 8002d42:	4b73      	ldr	r3, [pc, #460]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4a72      	ldr	r2, [pc, #456]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	6213      	str	r3, [r2, #32]
 8002d4e:	e01c      	b.n	8002d8a <HAL_RCC_OscConfig+0x36e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_OscConfig+0x356>
 8002d58:	4b6d      	ldr	r3, [pc, #436]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4a6c      	ldr	r2, [pc, #432]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6213      	str	r3, [r2, #32]
 8002d64:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4a69      	ldr	r2, [pc, #420]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6213      	str	r3, [r2, #32]
 8002d70:	e00b      	b.n	8002d8a <HAL_RCC_OscConfig+0x36e>
 8002d72:	4b67      	ldr	r3, [pc, #412]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4a66      	ldr	r2, [pc, #408]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6213      	str	r3, [r2, #32]
 8002d7e:	4b64      	ldr	r3, [pc, #400]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4a63      	ldr	r2, [pc, #396]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d015      	beq.n	8002dbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7ff fb51 	bl	8002438 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7ff fb4d 	bl	8002438 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0ab      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	4b57      	ldr	r3, [pc, #348]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ee      	beq.n	8002d9a <HAL_RCC_OscConfig+0x37e>
 8002dbc:	e014      	b.n	8002de8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7ff fb3b 	bl	8002438 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7ff fb37 	bl	8002438 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e095      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	4b4c      	ldr	r3, [pc, #304]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ee      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4b48      	ldr	r3, [pc, #288]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	4a47      	ldr	r2, [pc, #284]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8081 	beq.w	8002f06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e04:	4b42      	ldr	r3, [pc, #264]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d061      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d146      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e18:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <HAL_RCC_OscConfig+0x4fc>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7ff fb0b 	bl	8002438 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e26:	f7ff fb07 	bl	8002438 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e067      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e38:	4b35      	ldr	r3, [pc, #212]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4c:	d108      	bne.n	8002e60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e4e:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	492d      	ldr	r1, [pc, #180]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e60:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a19      	ldr	r1, [r3, #32]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	430b      	orrs	r3, r1
 8002e72:	4927      	ldr	r1, [pc, #156]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e78:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <HAL_RCC_OscConfig+0x4fc>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7ff fadb 	bl	8002438 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e86:	f7ff fad7 	bl	8002438 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e037      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x46a>
 8002ea4:	e02f      	b.n	8002f06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_RCC_OscConfig+0x4fc>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7ff fac4 	bl	8002438 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7ff fac0 	bl	8002438 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e020      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x498>
 8002ed2:	e018      	b.n	8002f06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e013      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40007000 	.word	0x40007000
 8002f18:	42420060 	.word	0x42420060

08002f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0d0      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d910      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 0207 	bic.w	r2, r3, #7
 8002f46:	4965      	ldr	r1, [pc, #404]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d040      	beq.n	800303c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d115      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e073      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06b      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4936      	ldr	r1, [pc, #216]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800300c:	f7ff fa14 	bl	8002438 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7ff fa10 	bl	8002438 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e053      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d210      	bcs.n	800306c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 0207 	bic.w	r2, r3, #7
 8003052:	4922      	ldr	r1, [pc, #136]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f821 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4601      	mov	r1, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	fa21 f303 	lsr.w	r3, r1, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1cc>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1d0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f972 	bl	80023b4 <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40022000 	.word	0x40022000
 80030e0:	40021000 	.word	0x40021000
 80030e4:	08007294 	.word	0x08007294
 80030e8:	20000008 	.word	0x20000008
 80030ec:	2000000c 	.word	0x2000000c

080030f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	b490      	push	{r4, r7}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030f8:	1d3c      	adds	r4, r7, #4
 80030fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003100:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800311a:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b04      	cmp	r3, #4
 8003128:	d002      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x40>
 800312a:	2b08      	cmp	r3, #8
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x46>
 800312e:	e02d      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003132:	623b      	str	r3, [r7, #32]
      break;
 8003134:	e02d      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	0c9b      	lsrs	r3, r3, #18
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003142:	4413      	add	r3, r2
 8003144:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003148:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0c5b      	lsrs	r3, r3, #17
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003162:	4413      	add	r3, r2
 8003164:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003168:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800316e:	fb02 f203 	mul.w	r2, r2, r3
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	e004      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003180:	fb02 f303 	mul.w	r3, r2, r3
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	623b      	str	r3, [r7, #32]
      break;
 800318a:	e002      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800318e:	623b      	str	r3, [r7, #32]
      break;
 8003190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003192:	6a3b      	ldr	r3, [r7, #32]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bc90      	pop	{r4, r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	0800708c 	.word	0x0800708c
 80031a4:	0800709c 	.word	0x0800709c
 80031a8:	40021000 	.word	0x40021000
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	003d0900 	.word	0x003d0900

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b02      	ldr	r3, [pc, #8]	; (80031c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	20000008 	.word	0x20000008

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031cc:	f7ff fff2 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d0:	4601      	mov	r1, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4a03      	ldr	r2, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	080072a4 	.word	0x080072a4

080031f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f4:	f7ff ffde 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031f8:	4601      	mov	r1, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0adb      	lsrs	r3, r3, #11
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4a03      	ldr	r2, [pc, #12]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	fa21 f303 	lsr.w	r3, r1, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	080072a4 	.word	0x080072a4

08003218 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <RCC_Delay+0x34>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <RCC_Delay+0x38>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0a5b      	lsrs	r3, r3, #9
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003234:	bf00      	nop
  }
  while (Delay --);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e5a      	subs	r2, r3, #1
 800323a:	60fa      	str	r2, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f9      	bne.n	8003234 <RCC_Delay+0x1c>
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000008 	.word	0x20000008
 8003250:	10624dd3 	.word	0x10624dd3

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d07d      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003270:	2300      	movs	r3, #0
 8003272:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003274:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10d      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003280:	4b4c      	ldr	r3, [pc, #304]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328a:	61d3      	str	r3, [r2, #28]
 800328c:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003298:	2301      	movs	r3, #1
 800329a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d118      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a8:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a42      	ldr	r2, [pc, #264]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b4:	f7ff f8c0 	bl	8002438 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ba:	e008      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032bc:	f7ff f8bc 	bl	8002438 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e06d      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032da:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d02e      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d027      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032f8:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003300:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003302:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003308:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800330e:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d014      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7ff f88b 	bl	8002438 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003324:	e00a      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7ff f887 	bl	8002438 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	; 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e036      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ee      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4917      	ldr	r1, [pc, #92]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	4313      	orrs	r3, r2
 8003358:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	490b      	ldr	r1, [pc, #44]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4904      	ldr	r1, [pc, #16]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42420440 	.word	0x42420440

080033c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b08d      	sub	sp, #52	; 0x34
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033c8:	4b55      	ldr	r3, [pc, #340]	; (8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80033ca:	f107 040c 	add.w	r4, r7, #12
 80033ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033d4:	4b53      	ldr	r3, [pc, #332]	; (8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
 80033de:	2300      	movs	r3, #0
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e2:	2300      	movs	r3, #0
 80033e4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	2300      	movs	r3, #0
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d07f      	beq.n	80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d002      	beq.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d048      	beq.n	800348e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033fc:	e08b      	b.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80033fe:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003404:	4b48      	ldr	r3, [pc, #288]	; (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d07f      	beq.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	0c9b      	lsrs	r3, r3, #18
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800341c:	4413      	add	r3, r2
 800341e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003422:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800342e:	4b3e      	ldr	r3, [pc, #248]	; (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	0c5b      	lsrs	r3, r3, #17
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800343c:	4413      	add	r3, r2
 800343e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800344e:	4a37      	ldr	r2, [pc, #220]	; (800352c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	fbb2 f2f3 	udiv	r2, r2, r3
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	fb02 f303 	mul.w	r3, r2, r3
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800345e:	e004      	b.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	4a33      	ldr	r2, [pc, #204]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003464:	fb02 f303 	mul.w	r3, r2, r3
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800346a:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003476:	d102      	bne.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800347c:	e048      	b.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4a2c      	ldr	r2, [pc, #176]	; (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800348c:	e040      	b.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800348e:	4b26      	ldr	r3, [pc, #152]	; (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349e:	d108      	bne.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80034aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b0:	e01f      	b.n	80034f2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034bc:	d109      	bne.n	80034d2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80034ca:	f649 4340 	movw	r3, #40000	; 0x9c40
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d0:	e00f      	b.n	80034f2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034dc:	d11a      	bne.n	8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d014      	beq.n	8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80034ea:	f24f 4324 	movw	r3, #62500	; 0xf424
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034f0:	e010      	b.n	8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80034f2:	e00f      	b.n	8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80034f4:	f7ff fe7c 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 80034f8:	4602      	mov	r2, r0
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	0b9b      	lsrs	r3, r3, #14
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	3301      	adds	r3, #1
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800350e:	e002      	b.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003514:	bf00      	nop
    }
  }
  return (frequency);
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003518:	4618      	mov	r0, r3
 800351a:	3734      	adds	r7, #52	; 0x34
 800351c:	46bd      	mov	sp, r7
 800351e:	bd90      	pop	{r4, r7, pc}
 8003520:	080070a0 	.word	0x080070a0
 8003524:	080070b0 	.word	0x080070b0
 8003528:	40021000 	.word	0x40021000
 800352c:	007a1200 	.word	0x007a1200
 8003530:	003d0900 	.word	0x003d0900
 8003534:	aaaaaaab 	.word	0xaaaaaaab

08003538 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e084      	b.n	8003658 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7c5b      	ldrb	r3, [r3, #17]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fe fc96 	bl	8001e90 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 faf4 	bl	8003b58 <HAL_RTC_WaitForSynchro>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2204      	movs	r2, #4
 800357a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e06b      	b.n	8003658 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fbad 	bl	8003ce0 <RTC_EnterInitMode>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2204      	movs	r2, #4
 8003590:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e060      	b.n	8003658 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0207 	bic.w	r2, r2, #7
 80035a4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <HAL_RTC_Init+0x128>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <HAL_RTC_Init+0x128>)
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80035ba:	4b29      	ldr	r3, [pc, #164]	; (8003660 <HAL_RTC_Init+0x128>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4926      	ldr	r1, [pc, #152]	; (8003660 <HAL_RTC_Init+0x128>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d003      	beq.n	80035de <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e00e      	b.n	80035fc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80035de:	2001      	movs	r0, #1
 80035e0:	f7ff feee 	bl	80033c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80035e4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d104      	bne.n	80035f6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2204      	movs	r2, #4
 80035f0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e030      	b.n	8003658 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f023 010f 	bic.w	r1, r3, #15
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	0c1a      	lsrs	r2, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	041b      	lsls	r3, r3, #16
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	b291      	uxth	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	430b      	orrs	r3, r1
 8003626:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fb81 	bl	8003d30 <RTC_ExitInitMode>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2204      	movs	r2, #4
 8003638:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e00c      	b.n	8003658 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003656:	2300      	movs	r3, #0
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40006c00 	.word	0x40006c00

08003664 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_RTC_SetTime+0x20>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e080      	b.n	800378a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	7c1b      	ldrb	r3, [r3, #16]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_RTC_SetTime+0x30>
 8003690:	2302      	movs	r3, #2
 8003692:	e07a      	b.n	800378a <HAL_RTC_SetTime+0x126>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2202      	movs	r2, #2
 800369e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d113      	bne.n	80036ce <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80036b0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	785b      	ldrb	r3, [r3, #1]
 80036b8:	4619      	mov	r1, r3
 80036ba:	460b      	mov	r3, r1
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a5b      	subs	r3, r3, r1
 80036c0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80036c2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80036c8:	4413      	add	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e01e      	b.n	800370c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fb71 	bl	8003dba <RTC_Bcd2ToByte>
 80036d8:	4603      	mov	r3, r0
 80036da:	461a      	mov	r2, r3
 80036dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80036e0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	785b      	ldrb	r3, [r3, #1]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fb66 	bl	8003dba <RTC_Bcd2ToByte>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80036fa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	789b      	ldrb	r3, [r3, #2]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fb5a 	bl	8003dba <RTC_Bcd2ToByte>
 8003706:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003708:	4423      	add	r3, r4
 800370a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800370c:	6979      	ldr	r1, [r7, #20]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fa7f 	bl	8003c12 <RTC_WriteTimeCounter>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2204      	movs	r2, #4
 800371e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e02f      	b.n	800378a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0205 	bic.w	r2, r2, #5
 8003738:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa90 	bl	8003c60 <RTC_ReadAlarmCounter>
 8003740:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d018      	beq.n	800377c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	429a      	cmp	r2, r3
 8003750:	d214      	bcs.n	800377c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003758:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800375c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800375e:	6939      	ldr	r1, [r7, #16]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fa96 	bl	8003c92 <RTC_WriteAlarmCounter>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2204      	movs	r2, #4
 8003770:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e006      	b.n	800378a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
	...

08003794 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_RTC_GetTime+0x28>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b5      	b.n	800392c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0ac      	b.n	800392c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f9ed 	bl	8003bb2 <RTC_ReadTimeCounter>
 80037d8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4a55      	ldr	r2, [pc, #340]	; (8003934 <HAL_RTC_GetTime+0x1a0>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0adb      	lsrs	r3, r3, #11
 80037e4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4b52      	ldr	r3, [pc, #328]	; (8003934 <HAL_RTC_GetTime+0x1a0>)
 80037ea:	fba3 1302 	umull	r1, r3, r3, r2
 80037ee:	0adb      	lsrs	r3, r3, #11
 80037f0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	4a4f      	ldr	r2, [pc, #316]	; (8003938 <HAL_RTC_GetTime+0x1a4>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	b2da      	uxtb	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	4a4a      	ldr	r2, [pc, #296]	; (8003934 <HAL_RTC_GetTime+0x1a0>)
 800380c:	fba2 1203 	umull	r1, r2, r2, r3
 8003810:	0ad2      	lsrs	r2, r2, #11
 8003812:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003816:	fb01 f202 	mul.w	r2, r1, r2
 800381a:	1a9a      	subs	r2, r3, r2
 800381c:	4b46      	ldr	r3, [pc, #280]	; (8003938 <HAL_RTC_GetTime+0x1a4>)
 800381e:	fba3 1302 	umull	r1, r3, r3, r2
 8003822:	0959      	lsrs	r1, r3, #5
 8003824:	460b      	mov	r3, r1
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a5b      	subs	r3, r3, r1
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	1ad1      	subs	r1, r2, r3
 800382e:	b2ca      	uxtb	r2, r1
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b17      	cmp	r3, #23
 8003838:	d955      	bls.n	80038e6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4a3f      	ldr	r2, [pc, #252]	; (800393c <HAL_RTC_GetTime+0x1a8>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003846:	6939      	ldr	r1, [r7, #16]
 8003848:	4b3c      	ldr	r3, [pc, #240]	; (800393c <HAL_RTC_GetTime+0x1a8>)
 800384a:	fba3 2301 	umull	r2, r3, r3, r1
 800384e:	091a      	lsrs	r2, r3, #4
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	1aca      	subs	r2, r1, r3
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f9fd 	bl	8003c60 <RTC_ReadAlarmCounter>
 8003866:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d008      	beq.n	8003882 <HAL_RTC_GetTime+0xee>
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	429a      	cmp	r2, r3
 8003876:	d904      	bls.n	8003882 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	e002      	b.n	8003888 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	4a2d      	ldr	r2, [pc, #180]	; (8003940 <HAL_RTC_GetTime+0x1ac>)
 800388c:	fb02 f303 	mul.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f9ba 	bl	8003c12 <RTC_WriteTimeCounter>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e041      	b.n	800392c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ae:	d00c      	beq.n	80038ca <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	4413      	add	r3, r2
 80038b6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80038b8:	69f9      	ldr	r1, [r7, #28]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f9e9 	bl	8003c92 <RTC_WriteAlarmCounter>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e030      	b.n	800392c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80038ca:	69f9      	ldr	r1, [r7, #28]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f9e0 	bl	8003c92 <RTC_WriteAlarmCounter>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e027      	b.n	800392c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80038dc:	6979      	ldr	r1, [r7, #20]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fa88 	bl	8003df4 <RTC_DateUpdate>
 80038e4:	e003      	b.n	80038ee <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01a      	beq.n	800392a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fa41 	bl	8003d80 <RTC_ByteToBcd2>
 80038fe:	4603      	mov	r3, r0
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	785b      	ldrb	r3, [r3, #1]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fa38 	bl	8003d80 <RTC_ByteToBcd2>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	789b      	ldrb	r3, [r3, #2]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fa2f 	bl	8003d80 <RTC_ByteToBcd2>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	91a2b3c5 	.word	0x91a2b3c5
 8003938:	88888889 	.word	0x88888889
 800393c:	aaaaaaab 	.word	0xaaaaaaab
 8003940:	00015180 	.word	0x00015180

08003944 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	2300      	movs	r3, #0
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_RTC_SetDate+0x24>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e097      	b.n	8003a9c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	7c1b      	ldrb	r3, [r3, #16]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_RTC_SetDate+0x34>
 8003974:	2302      	movs	r3, #2
 8003976:	e091      	b.n	8003a9c <HAL_RTC_SetDate+0x158>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2202      	movs	r2, #2
 8003982:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	78da      	ldrb	r2, [r3, #3]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	785a      	ldrb	r2, [r3, #1]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	789a      	ldrb	r2, [r3, #2]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	739a      	strb	r2, [r3, #14]
 80039a2:	e01a      	b.n	80039da <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	78db      	ldrb	r3, [r3, #3]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fa06 	bl	8003dba <RTC_Bcd2ToByte>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	785b      	ldrb	r3, [r3, #1]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f9fd 	bl	8003dba <RTC_Bcd2ToByte>
 80039c0:	4603      	mov	r3, r0
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	789b      	ldrb	r3, [r3, #2]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f9f4 	bl	8003dba <RTC_Bcd2ToByte>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	7bdb      	ldrb	r3, [r3, #15]
 80039de:	4618      	mov	r0, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	7b59      	ldrb	r1, [r3, #13]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	7b9b      	ldrb	r3, [r3, #14]
 80039e8:	461a      	mov	r2, r3
 80039ea:	f000 fadf 	bl	8003fac <RTC_WeekDayNum>
 80039ee:	4603      	mov	r3, r0
 80039f0:	461a      	mov	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	7b1a      	ldrb	r2, [r3, #12]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f8d7 	bl	8003bb2 <RTC_ReadTimeCounter>
 8003a04:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <HAL_RTC_SetDate+0x160>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	0adb      	lsrs	r3, r3, #11
 8003a10:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b18      	cmp	r3, #24
 8003a16:	d93a      	bls.n	8003a8e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	4a23      	ldr	r2, [pc, #140]	; (8003aa8 <HAL_RTC_SetDate+0x164>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	4a22      	ldr	r2, [pc, #136]	; (8003aac <HAL_RTC_SetDate+0x168>)
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003a2e:	69f9      	ldr	r1, [r7, #28]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f8ee 	bl	8003c12 <RTC_WriteTimeCounter>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e027      	b.n	8003a9c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f907 	bl	8003c60 <RTC_ReadAlarmCounter>
 8003a52:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d018      	beq.n	8003a8e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d214      	bcs.n	8003a8e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003a6a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a6e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003a70:	69b9      	ldr	r1, [r7, #24]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f90d 	bl	8003c92 <RTC_WriteAlarmCounter>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2204      	movs	r2, #4
 8003a82:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e006      	b.n	8003a9c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	91a2b3c5 	.word	0x91a2b3c5
 8003aa8:	aaaaaaab 	.word	0xaaaaaaab
 8003aac:	00015180 	.word	0x00015180

08003ab0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003abc:	f107 0314 	add.w	r3, r7, #20
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	460a      	mov	r2, r1
 8003ac8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_RTC_GetDate+0x26>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e03a      	b.n	8003b50 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	2200      	movs	r2, #0
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff fe56 	bl	8003794 <HAL_RTC_GetTime>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e02e      	b.n	8003b50 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	7b1a      	ldrb	r2, [r3, #12]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	7bda      	ldrb	r2, [r3, #15]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	7b5a      	ldrb	r2, [r3, #13]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	7b9a      	ldrb	r2, [r3, #14]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01a      	beq.n	8003b4e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	78db      	ldrb	r3, [r3, #3]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f92f 	bl	8003d80 <RTC_ByteToBcd2>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f926 	bl	8003d80 <RTC_ByteToBcd2>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	789b      	ldrb	r3, [r3, #2]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f91d 	bl	8003d80 <RTC_ByteToBcd2>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e01d      	b.n	8003baa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0208 	bic.w	r2, r2, #8
 8003b7c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003b7e:	f7fe fc5b 	bl	8002438 <HAL_GetTick>
 8003b82:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b84:	e009      	b.n	8003b9a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b86:	f7fe fc57 	bl	8002438 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b94:	d901      	bls.n	8003b9a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e007      	b.n	8003baa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ee      	beq.n	8003b86 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b087      	sub	sp, #28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	827b      	strh	r3, [r7, #18]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	823b      	strh	r3, [r7, #16]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003be2:	8a7a      	ldrh	r2, [r7, #18]
 8003be4:	8a3b      	ldrh	r3, [r7, #16]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d008      	beq.n	8003bfc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003bea:	8a3b      	ldrh	r3, [r7, #16]
 8003bec:	041a      	lsls	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	e004      	b.n	8003c06 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003bfc:	8a7b      	ldrh	r3, [r7, #18]
 8003bfe:	041a      	lsls	r2, r3, #16
 8003c00:	89fb      	ldrh	r3, [r7, #14]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003c06:	697b      	ldr	r3, [r7, #20]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f85d 	bl	8003ce0 <RTC_EnterInitMode>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	e011      	b.n	8003c56 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	0c12      	lsrs	r2, r2, #16
 8003c3a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b292      	uxth	r2, r2
 8003c44:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f872 	bl	8003d30 <RTC_ExitInitMode>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	81fb      	strh	r3, [r7, #14]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	041a      	lsls	r2, r3, #16
 8003c84:	89bb      	ldrh	r3, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f81d 	bl	8003ce0 <RTC_EnterInitMode>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e011      	b.n	8003cd6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	0c12      	lsrs	r2, r2, #16
 8003cba:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f832 	bl	8003d30 <RTC_ExitInitMode>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003cec:	f7fe fba4 	bl	8002438 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003cf2:	e009      	b.n	8003d08 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003cf4:	f7fe fba0 	bl	8002438 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d02:	d901      	bls.n	8003d08 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e00f      	b.n	8003d28 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0ee      	beq.n	8003cf4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0210 	orr.w	r2, r2, #16
 8003d24:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0210 	bic.w	r2, r2, #16
 8003d4a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003d4c:	f7fe fb74 	bl	8002438 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d52:	e009      	b.n	8003d68 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d54:	f7fe fb70 	bl	8002438 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d62:	d901      	bls.n	8003d68 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e007      	b.n	8003d78 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ee      	beq.n	8003d54 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003d8e:	e005      	b.n	8003d9c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3301      	adds	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	3b0a      	subs	r3, #10
 8003d9a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2b09      	cmp	r3, #9
 8003da0:	d8f6      	bhi.n	8003d90 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b2db      	uxtb	r3, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	b2db      	uxtb	r3, r3
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7bdb      	ldrb	r3, [r3, #15]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7b5b      	ldrb	r3, [r3, #13]
 8003e18:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7b9b      	ldrb	r3, [r3, #14]
 8003e1e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	e06f      	b.n	8003f06 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d011      	beq.n	8003e50 <RTC_DateUpdate+0x5c>
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d00e      	beq.n	8003e50 <RTC_DateUpdate+0x5c>
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d00b      	beq.n	8003e50 <RTC_DateUpdate+0x5c>
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b07      	cmp	r3, #7
 8003e3c:	d008      	beq.n	8003e50 <RTC_DateUpdate+0x5c>
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d005      	beq.n	8003e50 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b0a      	cmp	r3, #10
 8003e48:	d002      	beq.n	8003e50 <RTC_DateUpdate+0x5c>
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	d117      	bne.n	8003e80 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b1e      	cmp	r3, #30
 8003e54:	d803      	bhi.n	8003e5e <RTC_DateUpdate+0x6a>
      {
        day++;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003e5c:	e050      	b.n	8003f00 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	d005      	beq.n	8003e70 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3301      	adds	r3, #1
 8003e68:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003e6e:	e047      	b.n	8003f00 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003e70:	2301      	movs	r3, #1
 8003e72:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003e74:	2301      	movs	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
          year++;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003e7e:	e03f      	b.n	8003f00 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d008      	beq.n	8003e98 <RTC_DateUpdate+0xa4>
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b06      	cmp	r3, #6
 8003e8a:	d005      	beq.n	8003e98 <RTC_DateUpdate+0xa4>
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b09      	cmp	r3, #9
 8003e90:	d002      	beq.n	8003e98 <RTC_DateUpdate+0xa4>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b0b      	cmp	r3, #11
 8003e96:	d10c      	bne.n	8003eb2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b1d      	cmp	r3, #29
 8003e9c:	d803      	bhi.n	8003ea6 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003ea4:	e02c      	b.n	8003f00 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003eac:	2301      	movs	r3, #1
 8003eae:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003eb0:	e026      	b.n	8003f00 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d123      	bne.n	8003f00 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b1b      	cmp	r3, #27
 8003ebc:	d803      	bhi.n	8003ec6 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e01c      	b.n	8003f00 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b1c      	cmp	r3, #28
 8003eca:	d111      	bne.n	8003ef0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f839 	bl	8003f48 <RTC_IsLeapYear>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	e00d      	b.n	8003f00 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003eea:	2301      	movs	r3, #1
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	e007      	b.n	8003f00 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b1d      	cmp	r3, #29
 8003ef4:	d104      	bne.n	8003f00 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003efc:	2301      	movs	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	3301      	adds	r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d38b      	bcc.n	8003e26 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6978      	ldr	r0, [r7, #20]
 8003f32:	f000 f83b 	bl	8003fac <RTC_WeekDayNum>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	731a      	strb	r2, [r3, #12]
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e01d      	b.n	8003f9e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	4a10      	ldr	r2, [pc, #64]	; (8003fa8 <RTC_IsLeapYear+0x60>)
 8003f66:	fba2 1203 	umull	r1, r2, r2, r3
 8003f6a:	0952      	lsrs	r2, r2, #5
 8003f6c:	2164      	movs	r1, #100	; 0x64
 8003f6e:	fb01 f202 	mul.w	r2, r1, r2
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e00f      	b.n	8003f9e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <RTC_IsLeapYear+0x60>)
 8003f82:	fba2 1203 	umull	r1, r2, r2, r3
 8003f86:	09d2      	lsrs	r2, r2, #7
 8003f88:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003f8c:	fb01 f202 	mul.w	r2, r1, r2
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003f9c:	2300      	movs	r3, #0
  }
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	51eb851f 	.word	0x51eb851f

08003fac <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	70fb      	strb	r3, [r7, #3]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003fca:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d82d      	bhi.n	800402e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	4a2c      	ldr	r2, [pc, #176]	; (8004090 <RTC_WeekDayNum+0xe4>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	085a      	lsrs	r2, r3, #1
 8003fe6:	78bb      	ldrb	r3, [r7, #2]
 8003fe8:	441a      	add	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	441a      	add	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	441a      	add	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	4926      	ldr	r1, [pc, #152]	; (8004094 <RTC_WeekDayNum+0xe8>)
 8003ffc:	fba1 1303 	umull	r1, r3, r1, r3
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	3b01      	subs	r3, #1
 8004008:	4922      	ldr	r1, [pc, #136]	; (8004094 <RTC_WeekDayNum+0xe8>)
 800400a:	fba1 1303 	umull	r1, r3, r1, r3
 800400e:	09db      	lsrs	r3, r3, #7
 8004010:	4413      	add	r3, r2
 8004012:	1d1a      	adds	r2, r3, #4
 8004014:	4b20      	ldr	r3, [pc, #128]	; (8004098 <RTC_WeekDayNum+0xec>)
 8004016:	fba3 1302 	umull	r1, r3, r3, r2
 800401a:	1ad1      	subs	r1, r2, r3
 800401c:	0849      	lsrs	r1, r1, #1
 800401e:	440b      	add	r3, r1
 8004020:	0899      	lsrs	r1, r3, #2
 8004022:	460b      	mov	r3, r1
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	1a5b      	subs	r3, r3, r1
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e029      	b.n	8004082 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <RTC_WeekDayNum+0xe4>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	085a      	lsrs	r2, r3, #1
 8004042:	78bb      	ldrb	r3, [r7, #2]
 8004044:	441a      	add	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	441a      	add	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4910      	ldr	r1, [pc, #64]	; (8004094 <RTC_WeekDayNum+0xe8>)
 8004054:	fba1 1303 	umull	r1, r3, r1, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	1ad2      	subs	r2, r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	490d      	ldr	r1, [pc, #52]	; (8004094 <RTC_WeekDayNum+0xe8>)
 8004060:	fba1 1303 	umull	r1, r3, r1, r3
 8004064:	09db      	lsrs	r3, r3, #7
 8004066:	4413      	add	r3, r2
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <RTC_WeekDayNum+0xec>)
 800406c:	fba3 1302 	umull	r1, r3, r3, r2
 8004070:	1ad1      	subs	r1, r2, r3
 8004072:	0849      	lsrs	r1, r1, #1
 8004074:	440b      	add	r3, r1
 8004076:	0899      	lsrs	r1, r3, #2
 8004078:	460b      	mov	r3, r1
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	1a5b      	subs	r3, r3, r1
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	b2db      	uxtb	r3, r3
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	38e38e39 	.word	0x38e38e39
 8004094:	51eb851f 	.word	0x51eb851f
 8004098:	24924925 	.word	0x24924925

0800409c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e076      	b.n	800419c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d108      	bne.n	80040c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040be:	d009      	beq.n	80040d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
 80040c6:	e005      	b.n	80040d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd ff28 	bl	8001f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	ea42 0103 	orr.w	r1, r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	0c1a      	lsrs	r2, r3, #16
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f002 0204 	and.w	r2, r2, #4
 800417a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69da      	ldr	r2, [r3, #28]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800418a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_SPI_Transmit+0x22>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e126      	b.n	8004414 <HAL_SPI_Transmit+0x270>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ce:	f7fe f933 	bl	8002438 <HAL_GetTick>
 80041d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041d4:	88fb      	ldrh	r3, [r7, #6]
 80041d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d002      	beq.n	80041ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
 80041e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041e8:	e10b      	b.n	8004402 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_SPI_Transmit+0x52>
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041fa:	e102      	b.n	8004402 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2203      	movs	r2, #3
 8004200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	88fa      	ldrh	r2, [r7, #6]
 8004214:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	88fa      	ldrh	r2, [r7, #6]
 800421a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004242:	d10f      	bne.n	8004264 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004252:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004262:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	d007      	beq.n	8004282 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004280:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428a:	d14b      	bne.n	8004324 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_SPI_Transmit+0xf6>
 8004294:	8afb      	ldrh	r3, [r7, #22]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d13e      	bne.n	8004318 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	1c9a      	adds	r2, r3, #2
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042be:	e02b      	b.n	8004318 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d112      	bne.n	80042f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	881a      	ldrh	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	1c9a      	adds	r2, r3, #2
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80042f2:	e011      	b.n	8004318 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f4:	f7fe f8a0 	bl	8002438 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d803      	bhi.n	800430c <HAL_SPI_Transmit+0x168>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d102      	bne.n	8004312 <HAL_SPI_Transmit+0x16e>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004316:	e074      	b.n	8004402 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1ce      	bne.n	80042c0 <HAL_SPI_Transmit+0x11c>
 8004322:	e04c      	b.n	80043be <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_SPI_Transmit+0x18e>
 800432c:	8afb      	ldrh	r3, [r7, #22]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d140      	bne.n	80043b4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	7812      	ldrb	r2, [r2, #0]
 800433e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004358:	e02c      	b.n	80043b4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b02      	cmp	r3, #2
 8004366:	d113      	bne.n	8004390 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	86da      	strh	r2, [r3, #54]	; 0x36
 800438e:	e011      	b.n	80043b4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004390:	f7fe f852 	bl	8002438 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d803      	bhi.n	80043a8 <HAL_SPI_Transmit+0x204>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a6:	d102      	bne.n	80043ae <HAL_SPI_Transmit+0x20a>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043b2:	e026      	b.n	8004402 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1cd      	bne.n	800435a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	6839      	ldr	r1, [r7, #0]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f8b2 	bl	800452c <SPI_EndRxTxTransaction>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e000      	b.n	8004402 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004400:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004412:	7ffb      	ldrb	r3, [r7, #31]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800442c:	f7fe f804 	bl	8002438 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	4413      	add	r3, r2
 800443a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800443c:	f7fd fffc 	bl	8002438 <HAL_GetTick>
 8004440:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004442:	4b39      	ldr	r3, [pc, #228]	; (8004528 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	015b      	lsls	r3, r3, #5
 8004448:	0d1b      	lsrs	r3, r3, #20
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	fb02 f303 	mul.w	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004452:	e054      	b.n	80044fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d050      	beq.n	80044fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800445c:	f7fd ffec 	bl	8002438 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	429a      	cmp	r2, r3
 800446a:	d902      	bls.n	8004472 <SPI_WaitFlagStateUntilTimeout+0x56>
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d13d      	bne.n	80044ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004480:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800448a:	d111      	bne.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004494:	d004      	beq.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449e:	d107      	bne.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b8:	d10f      	bne.n	80044da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e017      	b.n	800451e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4013      	ands	r3, r2
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	429a      	cmp	r2, r3
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	429a      	cmp	r2, r3
 800451a:	d19b      	bne.n	8004454 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000008 	.word	0x20000008

0800452c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2200      	movs	r2, #0
 8004540:	2180      	movs	r1, #128	; 0x80
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff ff6a 	bl	800441c <SPI_WaitFlagStateUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e000      	b.n	8004560 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d001      	beq.n	8004580 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e032      	b.n	80045e6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <HAL_TIM_Base_Start+0x88>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00e      	beq.n	80045b0 <HAL_TIM_Base_Start+0x48>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459a:	d009      	beq.n	80045b0 <HAL_TIM_Base_Start+0x48>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <HAL_TIM_Base_Start+0x8c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <HAL_TIM_Base_Start+0x48>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <HAL_TIM_Base_Start+0x90>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d111      	bne.n	80045d4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b06      	cmp	r3, #6
 80045c0:	d010      	beq.n	80045e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0201 	orr.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d2:	e007      	b.n	80045e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800

080045fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e041      	b.n	8004692 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fd fdd0 	bl	80021c8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f000 f886 	bl	800474c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e046      	b.n	8004744 <HAL_TIM_OC_ConfigChannel+0xa8>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d839      	bhi.n	8004738 <HAL_TIM_OC_ConfigChannel+0x9c>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <HAL_TIM_OC_ConfigChannel+0x30>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	08004701 	.word	0x08004701
 80046d0:	08004739 	.word	0x08004739
 80046d4:	08004739 	.word	0x08004739
 80046d8:	08004739 	.word	0x08004739
 80046dc:	0800470f 	.word	0x0800470f
 80046e0:	08004739 	.word	0x08004739
 80046e4:	08004739 	.word	0x08004739
 80046e8:	08004739 	.word	0x08004739
 80046ec:	0800471d 	.word	0x0800471d
 80046f0:	08004739 	.word	0x08004739
 80046f4:	08004739 	.word	0x08004739
 80046f8:	08004739 	.word	0x08004739
 80046fc:	0800472b 	.word	0x0800472b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 f882 	bl	8004810 <TIM_OC1_SetConfig>
      break;
 800470c:	e015      	b.n	800473a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 f8e1 	bl	80048dc <TIM_OC2_SetConfig>
      break;
 800471a:	e00e      	b.n	800473a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f944 	bl	80049b0 <TIM_OC3_SetConfig>
      break;
 8004728:	e007      	b.n	800473a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f9a7 	bl	8004a84 <TIM_OC4_SetConfig>
      break;
 8004736:	e000      	b.n	800473a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004738:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a29      	ldr	r2, [pc, #164]	; (8004804 <TIM_Base_SetConfig+0xb8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <TIM_Base_SetConfig+0x30>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476a:	d007      	beq.n	800477c <TIM_Base_SetConfig+0x30>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a26      	ldr	r2, [pc, #152]	; (8004808 <TIM_Base_SetConfig+0xbc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_Base_SetConfig+0x30>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a25      	ldr	r2, [pc, #148]	; (800480c <TIM_Base_SetConfig+0xc0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d108      	bne.n	800478e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <TIM_Base_SetConfig+0xb8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00b      	beq.n	80047ae <TIM_Base_SetConfig+0x62>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479c:	d007      	beq.n	80047ae <TIM_Base_SetConfig+0x62>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a19      	ldr	r2, [pc, #100]	; (8004808 <TIM_Base_SetConfig+0xbc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d003      	beq.n	80047ae <TIM_Base_SetConfig+0x62>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a18      	ldr	r2, [pc, #96]	; (800480c <TIM_Base_SetConfig+0xc0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d108      	bne.n	80047c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a07      	ldr	r2, [pc, #28]	; (8004804 <TIM_Base_SetConfig+0xb8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d103      	bne.n	80047f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	615a      	str	r2, [r3, #20]
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800

08004810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f023 0201 	bic.w	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0303 	bic.w	r3, r3, #3
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 0302 	bic.w	r3, r3, #2
 8004858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a1c      	ldr	r2, [pc, #112]	; (80048d8 <TIM_OC1_SetConfig+0xc8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d10c      	bne.n	8004886 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f023 0308 	bic.w	r3, r3, #8
 8004872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a13      	ldr	r2, [pc, #76]	; (80048d8 <TIM_OC1_SetConfig+0xc8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d111      	bne.n	80048b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800489c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	621a      	str	r2, [r3, #32]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40012c00 	.word	0x40012c00

080048dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f023 0210 	bic.w	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0320 	bic.w	r3, r3, #32
 8004926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <TIM_OC2_SetConfig+0xd0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d10d      	bne.n	8004958 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004956:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a14      	ldr	r2, [pc, #80]	; (80049ac <TIM_OC2_SetConfig+0xd0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d113      	bne.n	8004988 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800496e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00

080049b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <TIM_OC3_SetConfig+0xd0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d10d      	bne.n	8004a2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a14      	ldr	r2, [pc, #80]	; (8004a80 <TIM_OC3_SetConfig+0xd0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d113      	bne.n	8004a5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40012c00 	.word	0x40012c00

08004a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	031b      	lsls	r3, r3, #12
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a0f      	ldr	r2, [pc, #60]	; (8004b1c <TIM_OC4_SetConfig+0x98>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d109      	bne.n	8004af8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	019b      	lsls	r3, r3, #6
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	621a      	str	r2, [r3, #32]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00

08004b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e046      	b.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b84:	d009      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d10c      	bne.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800

08004bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e03f      	b.n	8004c6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fd fb5c 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2224      	movs	r2, #36	; 0x24
 8004c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f905 	bl	8004e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b08a      	sub	sp, #40	; 0x28
 8004c7a:	af02      	add	r7, sp, #8
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d17c      	bne.n	8004d90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_UART_Transmit+0x2c>
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e075      	b.n	8004d92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_UART_Transmit+0x3e>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e06e      	b.n	8004d92 <HAL_UART_Transmit+0x11c>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2221      	movs	r2, #33	; 0x21
 8004cc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004cca:	f7fd fbb5 	bl	8002438 <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	88fa      	ldrh	r2, [r7, #6]
 8004cd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce4:	d108      	bne.n	8004cf8 <HAL_UART_Transmit+0x82>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d104      	bne.n	8004cf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	e003      	b.n	8004d00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d08:	e02a      	b.n	8004d60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2180      	movs	r1, #128	; 0x80
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f840 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e036      	b.n	8004d92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e007      	b.n	8004d52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	781a      	ldrb	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1cf      	bne.n	8004d0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2140      	movs	r1, #64	; 0x40
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f810 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e006      	b.n	8004d92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e000      	b.n	8004d92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d90:	2302      	movs	r3, #2
  }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4613      	mov	r3, r2
 8004da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004daa:	e02c      	b.n	8004e06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d028      	beq.n	8004e06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0x30>
 8004dba:	f7fd fb3d 	bl	8002438 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d21d      	bcs.n	8004e06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dd8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0201 	bic.w	r2, r2, #1
 8004de8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e00f      	b.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	bf0c      	ite	eq
 8004e16:	2301      	moveq	r3, #1
 8004e18:	2300      	movne	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d0c3      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e6a:	f023 030c 	bic.w	r3, r3, #12
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <UART_SetConfig+0x114>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d103      	bne.n	8004ea0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e98:	f7fe f9aa 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	e002      	b.n	8004ea6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fe f992 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8004ea4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009a      	lsls	r2, r3, #2
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <UART_SetConfig+0x118>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	0119      	lsls	r1, r3, #4
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	009a      	lsls	r2, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <UART_SetConfig+0x118>)
 8004ede:	fba3 0302 	umull	r0, r3, r3, r2
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	2064      	movs	r0, #100	; 0x64
 8004ee6:	fb00 f303 	mul.w	r3, r0, r3
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	3332      	adds	r3, #50	; 0x32
 8004ef0:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <UART_SetConfig+0x118>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efc:	4419      	add	r1, r3
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009a      	lsls	r2, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <UART_SetConfig+0x118>)
 8004f16:	fba3 0302 	umull	r0, r3, r3, r2
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	2064      	movs	r0, #100	; 0x64
 8004f1e:	fb00 f303 	mul.w	r3, r0, r3
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	3332      	adds	r3, #50	; 0x32
 8004f28:	4a07      	ldr	r2, [pc, #28]	; (8004f48 <UART_SetConfig+0x118>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	440a      	add	r2, r1
 8004f3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40013800 	.word	0x40013800
 8004f48:	51eb851f 	.word	0x51eb851f

08004f4c <__errno>:
 8004f4c:	4b01      	ldr	r3, [pc, #4]	; (8004f54 <__errno+0x8>)
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000014 	.word	0x20000014

08004f58 <__libc_init_array>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	4e0c      	ldr	r6, [pc, #48]	; (8004f90 <__libc_init_array+0x38>)
 8004f5e:	4c0d      	ldr	r4, [pc, #52]	; (8004f94 <__libc_init_array+0x3c>)
 8004f60:	1ba4      	subs	r4, r4, r6
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	42a5      	cmp	r5, r4
 8004f66:	d109      	bne.n	8004f7c <__libc_init_array+0x24>
 8004f68:	f002 f85c 	bl	8007024 <_init>
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	4e0a      	ldr	r6, [pc, #40]	; (8004f98 <__libc_init_array+0x40>)
 8004f70:	4c0a      	ldr	r4, [pc, #40]	; (8004f9c <__libc_init_array+0x44>)
 8004f72:	1ba4      	subs	r4, r4, r6
 8004f74:	10a4      	asrs	r4, r4, #2
 8004f76:	42a5      	cmp	r5, r4
 8004f78:	d105      	bne.n	8004f86 <__libc_init_array+0x2e>
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f80:	4798      	blx	r3
 8004f82:	3501      	adds	r5, #1
 8004f84:	e7ee      	b.n	8004f64 <__libc_init_array+0xc>
 8004f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f8a:	4798      	blx	r3
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	e7f2      	b.n	8004f76 <__libc_init_array+0x1e>
 8004f90:	08007508 	.word	0x08007508
 8004f94:	08007508 	.word	0x08007508
 8004f98:	08007508 	.word	0x08007508
 8004f9c:	0800750c 	.word	0x0800750c

08004fa0 <memcpy>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	1e43      	subs	r3, r0, #1
 8004fa4:	440a      	add	r2, r1
 8004fa6:	4291      	cmp	r1, r2
 8004fa8:	d100      	bne.n	8004fac <memcpy+0xc>
 8004faa:	bd10      	pop	{r4, pc}
 8004fac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fb4:	e7f7      	b.n	8004fa6 <memcpy+0x6>

08004fb6 <memset>:
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4402      	add	r2, r0
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d100      	bne.n	8004fc0 <memset+0xa>
 8004fbe:	4770      	bx	lr
 8004fc0:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc4:	e7f9      	b.n	8004fba <memset+0x4>

08004fc6 <__cvt>:
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fcc:	461e      	mov	r6, r3
 8004fce:	bfbb      	ittet	lt
 8004fd0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004fd4:	461e      	movlt	r6, r3
 8004fd6:	2300      	movge	r3, #0
 8004fd8:	232d      	movlt	r3, #45	; 0x2d
 8004fda:	b088      	sub	sp, #32
 8004fdc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004fde:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004fe2:	f027 0720 	bic.w	r7, r7, #32
 8004fe6:	2f46      	cmp	r7, #70	; 0x46
 8004fe8:	4614      	mov	r4, r2
 8004fea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004fec:	700b      	strb	r3, [r1, #0]
 8004fee:	d004      	beq.n	8004ffa <__cvt+0x34>
 8004ff0:	2f45      	cmp	r7, #69	; 0x45
 8004ff2:	d100      	bne.n	8004ff6 <__cvt+0x30>
 8004ff4:	3501      	adds	r5, #1
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e000      	b.n	8004ffc <__cvt+0x36>
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	aa07      	add	r2, sp, #28
 8004ffe:	9204      	str	r2, [sp, #16]
 8005000:	aa06      	add	r2, sp, #24
 8005002:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005006:	e9cd 3500 	strd	r3, r5, [sp]
 800500a:	4622      	mov	r2, r4
 800500c:	4633      	mov	r3, r6
 800500e:	f000 fcd7 	bl	80059c0 <_dtoa_r>
 8005012:	2f47      	cmp	r7, #71	; 0x47
 8005014:	4680      	mov	r8, r0
 8005016:	d102      	bne.n	800501e <__cvt+0x58>
 8005018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800501a:	07db      	lsls	r3, r3, #31
 800501c:	d526      	bpl.n	800506c <__cvt+0xa6>
 800501e:	2f46      	cmp	r7, #70	; 0x46
 8005020:	eb08 0905 	add.w	r9, r8, r5
 8005024:	d111      	bne.n	800504a <__cvt+0x84>
 8005026:	f898 3000 	ldrb.w	r3, [r8]
 800502a:	2b30      	cmp	r3, #48	; 0x30
 800502c:	d10a      	bne.n	8005044 <__cvt+0x7e>
 800502e:	2200      	movs	r2, #0
 8005030:	2300      	movs	r3, #0
 8005032:	4620      	mov	r0, r4
 8005034:	4631      	mov	r1, r6
 8005036:	f7fb fcb7 	bl	80009a8 <__aeabi_dcmpeq>
 800503a:	b918      	cbnz	r0, 8005044 <__cvt+0x7e>
 800503c:	f1c5 0501 	rsb	r5, r5, #1
 8005040:	f8ca 5000 	str.w	r5, [sl]
 8005044:	f8da 3000 	ldr.w	r3, [sl]
 8005048:	4499      	add	r9, r3
 800504a:	2200      	movs	r2, #0
 800504c:	2300      	movs	r3, #0
 800504e:	4620      	mov	r0, r4
 8005050:	4631      	mov	r1, r6
 8005052:	f7fb fca9 	bl	80009a8 <__aeabi_dcmpeq>
 8005056:	b938      	cbnz	r0, 8005068 <__cvt+0xa2>
 8005058:	2230      	movs	r2, #48	; 0x30
 800505a:	9b07      	ldr	r3, [sp, #28]
 800505c:	454b      	cmp	r3, r9
 800505e:	d205      	bcs.n	800506c <__cvt+0xa6>
 8005060:	1c59      	adds	r1, r3, #1
 8005062:	9107      	str	r1, [sp, #28]
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e7f8      	b.n	800505a <__cvt+0x94>
 8005068:	f8cd 901c 	str.w	r9, [sp, #28]
 800506c:	4640      	mov	r0, r8
 800506e:	9b07      	ldr	r3, [sp, #28]
 8005070:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005072:	eba3 0308 	sub.w	r3, r3, r8
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	b008      	add	sp, #32
 800507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800507e <__exponent>:
 800507e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005080:	2900      	cmp	r1, #0
 8005082:	bfb4      	ite	lt
 8005084:	232d      	movlt	r3, #45	; 0x2d
 8005086:	232b      	movge	r3, #43	; 0x2b
 8005088:	4604      	mov	r4, r0
 800508a:	bfb8      	it	lt
 800508c:	4249      	neglt	r1, r1
 800508e:	2909      	cmp	r1, #9
 8005090:	f804 2b02 	strb.w	r2, [r4], #2
 8005094:	7043      	strb	r3, [r0, #1]
 8005096:	dd21      	ble.n	80050dc <__exponent+0x5e>
 8005098:	f10d 0307 	add.w	r3, sp, #7
 800509c:	461f      	mov	r7, r3
 800509e:	260a      	movs	r6, #10
 80050a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80050a4:	fb06 1115 	mls	r1, r6, r5, r1
 80050a8:	2d09      	cmp	r5, #9
 80050aa:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80050ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80050b2:	f103 32ff 	add.w	r2, r3, #4294967295
 80050b6:	4629      	mov	r1, r5
 80050b8:	dc09      	bgt.n	80050ce <__exponent+0x50>
 80050ba:	3130      	adds	r1, #48	; 0x30
 80050bc:	3b02      	subs	r3, #2
 80050be:	f802 1c01 	strb.w	r1, [r2, #-1]
 80050c2:	42bb      	cmp	r3, r7
 80050c4:	4622      	mov	r2, r4
 80050c6:	d304      	bcc.n	80050d2 <__exponent+0x54>
 80050c8:	1a10      	subs	r0, r2, r0
 80050ca:	b003      	add	sp, #12
 80050cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ce:	4613      	mov	r3, r2
 80050d0:	e7e6      	b.n	80050a0 <__exponent+0x22>
 80050d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050d6:	f804 2b01 	strb.w	r2, [r4], #1
 80050da:	e7f2      	b.n	80050c2 <__exponent+0x44>
 80050dc:	2330      	movs	r3, #48	; 0x30
 80050de:	4419      	add	r1, r3
 80050e0:	7083      	strb	r3, [r0, #2]
 80050e2:	1d02      	adds	r2, r0, #4
 80050e4:	70c1      	strb	r1, [r0, #3]
 80050e6:	e7ef      	b.n	80050c8 <__exponent+0x4a>

080050e8 <_printf_float>:
 80050e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	b091      	sub	sp, #68	; 0x44
 80050ee:	460c      	mov	r4, r1
 80050f0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80050f2:	4693      	mov	fp, r2
 80050f4:	461e      	mov	r6, r3
 80050f6:	4605      	mov	r5, r0
 80050f8:	f001 fa16 	bl	8006528 <_localeconv_r>
 80050fc:	6803      	ldr	r3, [r0, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	9309      	str	r3, [sp, #36]	; 0x24
 8005102:	f7fb f825 	bl	8000150 <strlen>
 8005106:	2300      	movs	r3, #0
 8005108:	930e      	str	r3, [sp, #56]	; 0x38
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	900a      	str	r0, [sp, #40]	; 0x28
 800510e:	3307      	adds	r3, #7
 8005110:	f023 0307 	bic.w	r3, r3, #7
 8005114:	f103 0208 	add.w	r2, r3, #8
 8005118:	f894 8018 	ldrb.w	r8, [r4, #24]
 800511c:	f8d4 a000 	ldr.w	sl, [r4]
 8005120:	603a      	str	r2, [r7, #0]
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800512a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800512e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005132:	930b      	str	r3, [sp, #44]	; 0x2c
 8005134:	f04f 32ff 	mov.w	r2, #4294967295
 8005138:	4ba6      	ldr	r3, [pc, #664]	; (80053d4 <_printf_float+0x2ec>)
 800513a:	4638      	mov	r0, r7
 800513c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800513e:	f7fb fc65 	bl	8000a0c <__aeabi_dcmpun>
 8005142:	bb68      	cbnz	r0, 80051a0 <_printf_float+0xb8>
 8005144:	f04f 32ff 	mov.w	r2, #4294967295
 8005148:	4ba2      	ldr	r3, [pc, #648]	; (80053d4 <_printf_float+0x2ec>)
 800514a:	4638      	mov	r0, r7
 800514c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800514e:	f7fb fc3f 	bl	80009d0 <__aeabi_dcmple>
 8005152:	bb28      	cbnz	r0, 80051a0 <_printf_float+0xb8>
 8005154:	2200      	movs	r2, #0
 8005156:	2300      	movs	r3, #0
 8005158:	4638      	mov	r0, r7
 800515a:	4649      	mov	r1, r9
 800515c:	f7fb fc2e 	bl	80009bc <__aeabi_dcmplt>
 8005160:	b110      	cbz	r0, 8005168 <_printf_float+0x80>
 8005162:	232d      	movs	r3, #45	; 0x2d
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005168:	4f9b      	ldr	r7, [pc, #620]	; (80053d8 <_printf_float+0x2f0>)
 800516a:	4b9c      	ldr	r3, [pc, #624]	; (80053dc <_printf_float+0x2f4>)
 800516c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005170:	bf98      	it	ls
 8005172:	461f      	movls	r7, r3
 8005174:	2303      	movs	r3, #3
 8005176:	f04f 0900 	mov.w	r9, #0
 800517a:	6123      	str	r3, [r4, #16]
 800517c:	f02a 0304 	bic.w	r3, sl, #4
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	9600      	str	r6, [sp, #0]
 8005184:	465b      	mov	r3, fp
 8005186:	aa0f      	add	r2, sp, #60	; 0x3c
 8005188:	4621      	mov	r1, r4
 800518a:	4628      	mov	r0, r5
 800518c:	f000 f9e2 	bl	8005554 <_printf_common>
 8005190:	3001      	adds	r0, #1
 8005192:	f040 8090 	bne.w	80052b6 <_printf_float+0x1ce>
 8005196:	f04f 30ff 	mov.w	r0, #4294967295
 800519a:	b011      	add	sp, #68	; 0x44
 800519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a0:	463a      	mov	r2, r7
 80051a2:	464b      	mov	r3, r9
 80051a4:	4638      	mov	r0, r7
 80051a6:	4649      	mov	r1, r9
 80051a8:	f7fb fc30 	bl	8000a0c <__aeabi_dcmpun>
 80051ac:	b110      	cbz	r0, 80051b4 <_printf_float+0xcc>
 80051ae:	4f8c      	ldr	r7, [pc, #560]	; (80053e0 <_printf_float+0x2f8>)
 80051b0:	4b8c      	ldr	r3, [pc, #560]	; (80053e4 <_printf_float+0x2fc>)
 80051b2:	e7db      	b.n	800516c <_printf_float+0x84>
 80051b4:	6863      	ldr	r3, [r4, #4]
 80051b6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	a80d      	add	r0, sp, #52	; 0x34
 80051be:	a90e      	add	r1, sp, #56	; 0x38
 80051c0:	d140      	bne.n	8005244 <_printf_float+0x15c>
 80051c2:	2306      	movs	r3, #6
 80051c4:	6063      	str	r3, [r4, #4]
 80051c6:	f04f 0c00 	mov.w	ip, #0
 80051ca:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80051ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80051d2:	6863      	ldr	r3, [r4, #4]
 80051d4:	6022      	str	r2, [r4, #0]
 80051d6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	463a      	mov	r2, r7
 80051de:	464b      	mov	r3, r9
 80051e0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80051e4:	4628      	mov	r0, r5
 80051e6:	f7ff feee 	bl	8004fc6 <__cvt>
 80051ea:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80051ee:	2b47      	cmp	r3, #71	; 0x47
 80051f0:	4607      	mov	r7, r0
 80051f2:	d109      	bne.n	8005208 <_printf_float+0x120>
 80051f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f6:	1cd8      	adds	r0, r3, #3
 80051f8:	db02      	blt.n	8005200 <_printf_float+0x118>
 80051fa:	6862      	ldr	r2, [r4, #4]
 80051fc:	4293      	cmp	r3, r2
 80051fe:	dd47      	ble.n	8005290 <_printf_float+0x1a8>
 8005200:	f1a8 0802 	sub.w	r8, r8, #2
 8005204:	fa5f f888 	uxtb.w	r8, r8
 8005208:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800520c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800520e:	d824      	bhi.n	800525a <_printf_float+0x172>
 8005210:	3901      	subs	r1, #1
 8005212:	4642      	mov	r2, r8
 8005214:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005218:	910d      	str	r1, [sp, #52]	; 0x34
 800521a:	f7ff ff30 	bl	800507e <__exponent>
 800521e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005220:	4681      	mov	r9, r0
 8005222:	1813      	adds	r3, r2, r0
 8005224:	2a01      	cmp	r2, #1
 8005226:	6123      	str	r3, [r4, #16]
 8005228:	dc02      	bgt.n	8005230 <_printf_float+0x148>
 800522a:	6822      	ldr	r2, [r4, #0]
 800522c:	07d1      	lsls	r1, r2, #31
 800522e:	d501      	bpl.n	8005234 <_printf_float+0x14c>
 8005230:	3301      	adds	r3, #1
 8005232:	6123      	str	r3, [r4, #16]
 8005234:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0a2      	beq.n	8005182 <_printf_float+0x9a>
 800523c:	232d      	movs	r3, #45	; 0x2d
 800523e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005242:	e79e      	b.n	8005182 <_printf_float+0x9a>
 8005244:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005248:	f000 816e 	beq.w	8005528 <_printf_float+0x440>
 800524c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005250:	d1b9      	bne.n	80051c6 <_printf_float+0xde>
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1b7      	bne.n	80051c6 <_printf_float+0xde>
 8005256:	2301      	movs	r3, #1
 8005258:	e7b4      	b.n	80051c4 <_printf_float+0xdc>
 800525a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800525e:	d119      	bne.n	8005294 <_printf_float+0x1ac>
 8005260:	2900      	cmp	r1, #0
 8005262:	6863      	ldr	r3, [r4, #4]
 8005264:	dd0c      	ble.n	8005280 <_printf_float+0x198>
 8005266:	6121      	str	r1, [r4, #16]
 8005268:	b913      	cbnz	r3, 8005270 <_printf_float+0x188>
 800526a:	6822      	ldr	r2, [r4, #0]
 800526c:	07d2      	lsls	r2, r2, #31
 800526e:	d502      	bpl.n	8005276 <_printf_float+0x18e>
 8005270:	3301      	adds	r3, #1
 8005272:	440b      	add	r3, r1
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005278:	f04f 0900 	mov.w	r9, #0
 800527c:	65a3      	str	r3, [r4, #88]	; 0x58
 800527e:	e7d9      	b.n	8005234 <_printf_float+0x14c>
 8005280:	b913      	cbnz	r3, 8005288 <_printf_float+0x1a0>
 8005282:	6822      	ldr	r2, [r4, #0]
 8005284:	07d0      	lsls	r0, r2, #31
 8005286:	d501      	bpl.n	800528c <_printf_float+0x1a4>
 8005288:	3302      	adds	r3, #2
 800528a:	e7f3      	b.n	8005274 <_printf_float+0x18c>
 800528c:	2301      	movs	r3, #1
 800528e:	e7f1      	b.n	8005274 <_printf_float+0x18c>
 8005290:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005294:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005298:	4293      	cmp	r3, r2
 800529a:	db05      	blt.n	80052a8 <_printf_float+0x1c0>
 800529c:	6822      	ldr	r2, [r4, #0]
 800529e:	6123      	str	r3, [r4, #16]
 80052a0:	07d1      	lsls	r1, r2, #31
 80052a2:	d5e8      	bpl.n	8005276 <_printf_float+0x18e>
 80052a4:	3301      	adds	r3, #1
 80052a6:	e7e5      	b.n	8005274 <_printf_float+0x18c>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bfcc      	ite	gt
 80052ac:	2301      	movgt	r3, #1
 80052ae:	f1c3 0302 	rsble	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	e7de      	b.n	8005274 <_printf_float+0x18c>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	055a      	lsls	r2, r3, #21
 80052ba:	d407      	bmi.n	80052cc <_printf_float+0x1e4>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	463a      	mov	r2, r7
 80052c0:	4659      	mov	r1, fp
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b0      	blx	r6
 80052c6:	3001      	adds	r0, #1
 80052c8:	d129      	bne.n	800531e <_printf_float+0x236>
 80052ca:	e764      	b.n	8005196 <_printf_float+0xae>
 80052cc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80052d0:	f240 80d7 	bls.w	8005482 <_printf_float+0x39a>
 80052d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052d8:	2200      	movs	r2, #0
 80052da:	2300      	movs	r3, #0
 80052dc:	f7fb fb64 	bl	80009a8 <__aeabi_dcmpeq>
 80052e0:	b388      	cbz	r0, 8005346 <_printf_float+0x25e>
 80052e2:	2301      	movs	r3, #1
 80052e4:	4a40      	ldr	r2, [pc, #256]	; (80053e8 <_printf_float+0x300>)
 80052e6:	4659      	mov	r1, fp
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b0      	blx	r6
 80052ec:	3001      	adds	r0, #1
 80052ee:	f43f af52 	beq.w	8005196 <_printf_float+0xae>
 80052f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052f6:	429a      	cmp	r2, r3
 80052f8:	db02      	blt.n	8005300 <_printf_float+0x218>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	07d8      	lsls	r0, r3, #31
 80052fe:	d50e      	bpl.n	800531e <_printf_float+0x236>
 8005300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005304:	4659      	mov	r1, fp
 8005306:	4628      	mov	r0, r5
 8005308:	47b0      	blx	r6
 800530a:	3001      	adds	r0, #1
 800530c:	f43f af43 	beq.w	8005196 <_printf_float+0xae>
 8005310:	2700      	movs	r7, #0
 8005312:	f104 081a 	add.w	r8, r4, #26
 8005316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005318:	3b01      	subs	r3, #1
 800531a:	42bb      	cmp	r3, r7
 800531c:	dc09      	bgt.n	8005332 <_printf_float+0x24a>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	079f      	lsls	r7, r3, #30
 8005322:	f100 80fd 	bmi.w	8005520 <_printf_float+0x438>
 8005326:	68e0      	ldr	r0, [r4, #12]
 8005328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800532a:	4298      	cmp	r0, r3
 800532c:	bfb8      	it	lt
 800532e:	4618      	movlt	r0, r3
 8005330:	e733      	b.n	800519a <_printf_float+0xb2>
 8005332:	2301      	movs	r3, #1
 8005334:	4642      	mov	r2, r8
 8005336:	4659      	mov	r1, fp
 8005338:	4628      	mov	r0, r5
 800533a:	47b0      	blx	r6
 800533c:	3001      	adds	r0, #1
 800533e:	f43f af2a 	beq.w	8005196 <_printf_float+0xae>
 8005342:	3701      	adds	r7, #1
 8005344:	e7e7      	b.n	8005316 <_printf_float+0x22e>
 8005346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005348:	2b00      	cmp	r3, #0
 800534a:	dc2b      	bgt.n	80053a4 <_printf_float+0x2bc>
 800534c:	2301      	movs	r3, #1
 800534e:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <_printf_float+0x300>)
 8005350:	4659      	mov	r1, fp
 8005352:	4628      	mov	r0, r5
 8005354:	47b0      	blx	r6
 8005356:	3001      	adds	r0, #1
 8005358:	f43f af1d 	beq.w	8005196 <_printf_float+0xae>
 800535c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800535e:	b923      	cbnz	r3, 800536a <_printf_float+0x282>
 8005360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005362:	b913      	cbnz	r3, 800536a <_printf_float+0x282>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	07d9      	lsls	r1, r3, #31
 8005368:	d5d9      	bpl.n	800531e <_printf_float+0x236>
 800536a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800536e:	4659      	mov	r1, fp
 8005370:	4628      	mov	r0, r5
 8005372:	47b0      	blx	r6
 8005374:	3001      	adds	r0, #1
 8005376:	f43f af0e 	beq.w	8005196 <_printf_float+0xae>
 800537a:	f04f 0800 	mov.w	r8, #0
 800537e:	f104 091a 	add.w	r9, r4, #26
 8005382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005384:	425b      	negs	r3, r3
 8005386:	4543      	cmp	r3, r8
 8005388:	dc01      	bgt.n	800538e <_printf_float+0x2a6>
 800538a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800538c:	e797      	b.n	80052be <_printf_float+0x1d6>
 800538e:	2301      	movs	r3, #1
 8005390:	464a      	mov	r2, r9
 8005392:	4659      	mov	r1, fp
 8005394:	4628      	mov	r0, r5
 8005396:	47b0      	blx	r6
 8005398:	3001      	adds	r0, #1
 800539a:	f43f aefc 	beq.w	8005196 <_printf_float+0xae>
 800539e:	f108 0801 	add.w	r8, r8, #1
 80053a2:	e7ee      	b.n	8005382 <_printf_float+0x29a>
 80053a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053a8:	429a      	cmp	r2, r3
 80053aa:	bfa8      	it	ge
 80053ac:	461a      	movge	r2, r3
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	4690      	mov	r8, r2
 80053b2:	dd07      	ble.n	80053c4 <_printf_float+0x2dc>
 80053b4:	4613      	mov	r3, r2
 80053b6:	4659      	mov	r1, fp
 80053b8:	463a      	mov	r2, r7
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b0      	blx	r6
 80053be:	3001      	adds	r0, #1
 80053c0:	f43f aee9 	beq.w	8005196 <_printf_float+0xae>
 80053c4:	f104 031a 	add.w	r3, r4, #26
 80053c8:	f04f 0a00 	mov.w	sl, #0
 80053cc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80053d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80053d2:	e015      	b.n	8005400 <_printf_float+0x318>
 80053d4:	7fefffff 	.word	0x7fefffff
 80053d8:	080072b0 	.word	0x080072b0
 80053dc:	080072ac 	.word	0x080072ac
 80053e0:	080072b8 	.word	0x080072b8
 80053e4:	080072b4 	.word	0x080072b4
 80053e8:	080072bc 	.word	0x080072bc
 80053ec:	2301      	movs	r3, #1
 80053ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053f0:	4659      	mov	r1, fp
 80053f2:	4628      	mov	r0, r5
 80053f4:	47b0      	blx	r6
 80053f6:	3001      	adds	r0, #1
 80053f8:	f43f aecd 	beq.w	8005196 <_printf_float+0xae>
 80053fc:	f10a 0a01 	add.w	sl, sl, #1
 8005400:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005404:	eba9 0308 	sub.w	r3, r9, r8
 8005408:	4553      	cmp	r3, sl
 800540a:	dcef      	bgt.n	80053ec <_printf_float+0x304>
 800540c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005410:	429a      	cmp	r2, r3
 8005412:	444f      	add	r7, r9
 8005414:	db14      	blt.n	8005440 <_printf_float+0x358>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	07da      	lsls	r2, r3, #31
 800541a:	d411      	bmi.n	8005440 <_printf_float+0x358>
 800541c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800541e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005420:	eba3 0209 	sub.w	r2, r3, r9
 8005424:	eba3 0901 	sub.w	r9, r3, r1
 8005428:	4591      	cmp	r9, r2
 800542a:	bfa8      	it	ge
 800542c:	4691      	movge	r9, r2
 800542e:	f1b9 0f00 	cmp.w	r9, #0
 8005432:	dc0d      	bgt.n	8005450 <_printf_float+0x368>
 8005434:	2700      	movs	r7, #0
 8005436:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800543a:	f104 081a 	add.w	r8, r4, #26
 800543e:	e018      	b.n	8005472 <_printf_float+0x38a>
 8005440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005444:	4659      	mov	r1, fp
 8005446:	4628      	mov	r0, r5
 8005448:	47b0      	blx	r6
 800544a:	3001      	adds	r0, #1
 800544c:	d1e6      	bne.n	800541c <_printf_float+0x334>
 800544e:	e6a2      	b.n	8005196 <_printf_float+0xae>
 8005450:	464b      	mov	r3, r9
 8005452:	463a      	mov	r2, r7
 8005454:	4659      	mov	r1, fp
 8005456:	4628      	mov	r0, r5
 8005458:	47b0      	blx	r6
 800545a:	3001      	adds	r0, #1
 800545c:	d1ea      	bne.n	8005434 <_printf_float+0x34c>
 800545e:	e69a      	b.n	8005196 <_printf_float+0xae>
 8005460:	2301      	movs	r3, #1
 8005462:	4642      	mov	r2, r8
 8005464:	4659      	mov	r1, fp
 8005466:	4628      	mov	r0, r5
 8005468:	47b0      	blx	r6
 800546a:	3001      	adds	r0, #1
 800546c:	f43f ae93 	beq.w	8005196 <_printf_float+0xae>
 8005470:	3701      	adds	r7, #1
 8005472:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	eba3 0309 	sub.w	r3, r3, r9
 800547c:	42bb      	cmp	r3, r7
 800547e:	dcef      	bgt.n	8005460 <_printf_float+0x378>
 8005480:	e74d      	b.n	800531e <_printf_float+0x236>
 8005482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005484:	2a01      	cmp	r2, #1
 8005486:	dc01      	bgt.n	800548c <_printf_float+0x3a4>
 8005488:	07db      	lsls	r3, r3, #31
 800548a:	d538      	bpl.n	80054fe <_printf_float+0x416>
 800548c:	2301      	movs	r3, #1
 800548e:	463a      	mov	r2, r7
 8005490:	4659      	mov	r1, fp
 8005492:	4628      	mov	r0, r5
 8005494:	47b0      	blx	r6
 8005496:	3001      	adds	r0, #1
 8005498:	f43f ae7d 	beq.w	8005196 <_printf_float+0xae>
 800549c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054a0:	4659      	mov	r1, fp
 80054a2:	4628      	mov	r0, r5
 80054a4:	47b0      	blx	r6
 80054a6:	3001      	adds	r0, #1
 80054a8:	f107 0701 	add.w	r7, r7, #1
 80054ac:	f43f ae73 	beq.w	8005196 <_printf_float+0xae>
 80054b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054b6:	2200      	movs	r2, #0
 80054b8:	f103 38ff 	add.w	r8, r3, #4294967295
 80054bc:	2300      	movs	r3, #0
 80054be:	f7fb fa73 	bl	80009a8 <__aeabi_dcmpeq>
 80054c2:	b9c0      	cbnz	r0, 80054f6 <_printf_float+0x40e>
 80054c4:	4643      	mov	r3, r8
 80054c6:	463a      	mov	r2, r7
 80054c8:	4659      	mov	r1, fp
 80054ca:	4628      	mov	r0, r5
 80054cc:	47b0      	blx	r6
 80054ce:	3001      	adds	r0, #1
 80054d0:	d10d      	bne.n	80054ee <_printf_float+0x406>
 80054d2:	e660      	b.n	8005196 <_printf_float+0xae>
 80054d4:	2301      	movs	r3, #1
 80054d6:	4642      	mov	r2, r8
 80054d8:	4659      	mov	r1, fp
 80054da:	4628      	mov	r0, r5
 80054dc:	47b0      	blx	r6
 80054de:	3001      	adds	r0, #1
 80054e0:	f43f ae59 	beq.w	8005196 <_printf_float+0xae>
 80054e4:	3701      	adds	r7, #1
 80054e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054e8:	3b01      	subs	r3, #1
 80054ea:	42bb      	cmp	r3, r7
 80054ec:	dcf2      	bgt.n	80054d4 <_printf_float+0x3ec>
 80054ee:	464b      	mov	r3, r9
 80054f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054f4:	e6e4      	b.n	80052c0 <_printf_float+0x1d8>
 80054f6:	2700      	movs	r7, #0
 80054f8:	f104 081a 	add.w	r8, r4, #26
 80054fc:	e7f3      	b.n	80054e6 <_printf_float+0x3fe>
 80054fe:	2301      	movs	r3, #1
 8005500:	e7e1      	b.n	80054c6 <_printf_float+0x3de>
 8005502:	2301      	movs	r3, #1
 8005504:	4642      	mov	r2, r8
 8005506:	4659      	mov	r1, fp
 8005508:	4628      	mov	r0, r5
 800550a:	47b0      	blx	r6
 800550c:	3001      	adds	r0, #1
 800550e:	f43f ae42 	beq.w	8005196 <_printf_float+0xae>
 8005512:	3701      	adds	r7, #1
 8005514:	68e3      	ldr	r3, [r4, #12]
 8005516:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	42bb      	cmp	r3, r7
 800551c:	dcf1      	bgt.n	8005502 <_printf_float+0x41a>
 800551e:	e702      	b.n	8005326 <_printf_float+0x23e>
 8005520:	2700      	movs	r7, #0
 8005522:	f104 0819 	add.w	r8, r4, #25
 8005526:	e7f5      	b.n	8005514 <_printf_float+0x42c>
 8005528:	2b00      	cmp	r3, #0
 800552a:	f43f ae94 	beq.w	8005256 <_printf_float+0x16e>
 800552e:	f04f 0c00 	mov.w	ip, #0
 8005532:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005536:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800553a:	6022      	str	r2, [r4, #0]
 800553c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005540:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	463a      	mov	r2, r7
 8005548:	464b      	mov	r3, r9
 800554a:	4628      	mov	r0, r5
 800554c:	f7ff fd3b 	bl	8004fc6 <__cvt>
 8005550:	4607      	mov	r7, r0
 8005552:	e64f      	b.n	80051f4 <_printf_float+0x10c>

08005554 <_printf_common>:
 8005554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005558:	4691      	mov	r9, r2
 800555a:	461f      	mov	r7, r3
 800555c:	688a      	ldr	r2, [r1, #8]
 800555e:	690b      	ldr	r3, [r1, #16]
 8005560:	4606      	mov	r6, r0
 8005562:	4293      	cmp	r3, r2
 8005564:	bfb8      	it	lt
 8005566:	4613      	movlt	r3, r2
 8005568:	f8c9 3000 	str.w	r3, [r9]
 800556c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005570:	460c      	mov	r4, r1
 8005572:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005576:	b112      	cbz	r2, 800557e <_printf_common+0x2a>
 8005578:	3301      	adds	r3, #1
 800557a:	f8c9 3000 	str.w	r3, [r9]
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	0699      	lsls	r1, r3, #26
 8005582:	bf42      	ittt	mi
 8005584:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005588:	3302      	addmi	r3, #2
 800558a:	f8c9 3000 	strmi.w	r3, [r9]
 800558e:	6825      	ldr	r5, [r4, #0]
 8005590:	f015 0506 	ands.w	r5, r5, #6
 8005594:	d107      	bne.n	80055a6 <_printf_common+0x52>
 8005596:	f104 0a19 	add.w	sl, r4, #25
 800559a:	68e3      	ldr	r3, [r4, #12]
 800559c:	f8d9 2000 	ldr.w	r2, [r9]
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	42ab      	cmp	r3, r5
 80055a4:	dc29      	bgt.n	80055fa <_printf_common+0xa6>
 80055a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80055aa:	6822      	ldr	r2, [r4, #0]
 80055ac:	3300      	adds	r3, #0
 80055ae:	bf18      	it	ne
 80055b0:	2301      	movne	r3, #1
 80055b2:	0692      	lsls	r2, r2, #26
 80055b4:	d42e      	bmi.n	8005614 <_printf_common+0xc0>
 80055b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ba:	4639      	mov	r1, r7
 80055bc:	4630      	mov	r0, r6
 80055be:	47c0      	blx	r8
 80055c0:	3001      	adds	r0, #1
 80055c2:	d021      	beq.n	8005608 <_printf_common+0xb4>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	68e5      	ldr	r5, [r4, #12]
 80055c8:	f003 0306 	and.w	r3, r3, #6
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	bf18      	it	ne
 80055d0:	2500      	movne	r5, #0
 80055d2:	f8d9 2000 	ldr.w	r2, [r9]
 80055d6:	f04f 0900 	mov.w	r9, #0
 80055da:	bf08      	it	eq
 80055dc:	1aad      	subeq	r5, r5, r2
 80055de:	68a3      	ldr	r3, [r4, #8]
 80055e0:	6922      	ldr	r2, [r4, #16]
 80055e2:	bf08      	it	eq
 80055e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055e8:	4293      	cmp	r3, r2
 80055ea:	bfc4      	itt	gt
 80055ec:	1a9b      	subgt	r3, r3, r2
 80055ee:	18ed      	addgt	r5, r5, r3
 80055f0:	341a      	adds	r4, #26
 80055f2:	454d      	cmp	r5, r9
 80055f4:	d11a      	bne.n	800562c <_printf_common+0xd8>
 80055f6:	2000      	movs	r0, #0
 80055f8:	e008      	b.n	800560c <_printf_common+0xb8>
 80055fa:	2301      	movs	r3, #1
 80055fc:	4652      	mov	r2, sl
 80055fe:	4639      	mov	r1, r7
 8005600:	4630      	mov	r0, r6
 8005602:	47c0      	blx	r8
 8005604:	3001      	adds	r0, #1
 8005606:	d103      	bne.n	8005610 <_printf_common+0xbc>
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005610:	3501      	adds	r5, #1
 8005612:	e7c2      	b.n	800559a <_printf_common+0x46>
 8005614:	2030      	movs	r0, #48	; 0x30
 8005616:	18e1      	adds	r1, r4, r3
 8005618:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005622:	4422      	add	r2, r4
 8005624:	3302      	adds	r3, #2
 8005626:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800562a:	e7c4      	b.n	80055b6 <_printf_common+0x62>
 800562c:	2301      	movs	r3, #1
 800562e:	4622      	mov	r2, r4
 8005630:	4639      	mov	r1, r7
 8005632:	4630      	mov	r0, r6
 8005634:	47c0      	blx	r8
 8005636:	3001      	adds	r0, #1
 8005638:	d0e6      	beq.n	8005608 <_printf_common+0xb4>
 800563a:	f109 0901 	add.w	r9, r9, #1
 800563e:	e7d8      	b.n	80055f2 <_printf_common+0x9e>

08005640 <_printf_i>:
 8005640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005644:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005648:	460c      	mov	r4, r1
 800564a:	7e09      	ldrb	r1, [r1, #24]
 800564c:	b085      	sub	sp, #20
 800564e:	296e      	cmp	r1, #110	; 0x6e
 8005650:	4617      	mov	r7, r2
 8005652:	4606      	mov	r6, r0
 8005654:	4698      	mov	r8, r3
 8005656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005658:	f000 80b3 	beq.w	80057c2 <_printf_i+0x182>
 800565c:	d822      	bhi.n	80056a4 <_printf_i+0x64>
 800565e:	2963      	cmp	r1, #99	; 0x63
 8005660:	d036      	beq.n	80056d0 <_printf_i+0x90>
 8005662:	d80a      	bhi.n	800567a <_printf_i+0x3a>
 8005664:	2900      	cmp	r1, #0
 8005666:	f000 80b9 	beq.w	80057dc <_printf_i+0x19c>
 800566a:	2958      	cmp	r1, #88	; 0x58
 800566c:	f000 8083 	beq.w	8005776 <_printf_i+0x136>
 8005670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005674:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005678:	e032      	b.n	80056e0 <_printf_i+0xa0>
 800567a:	2964      	cmp	r1, #100	; 0x64
 800567c:	d001      	beq.n	8005682 <_printf_i+0x42>
 800567e:	2969      	cmp	r1, #105	; 0x69
 8005680:	d1f6      	bne.n	8005670 <_printf_i+0x30>
 8005682:	6820      	ldr	r0, [r4, #0]
 8005684:	6813      	ldr	r3, [r2, #0]
 8005686:	0605      	lsls	r5, r0, #24
 8005688:	f103 0104 	add.w	r1, r3, #4
 800568c:	d52a      	bpl.n	80056e4 <_printf_i+0xa4>
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6011      	str	r1, [r2, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	da03      	bge.n	800569e <_printf_i+0x5e>
 8005696:	222d      	movs	r2, #45	; 0x2d
 8005698:	425b      	negs	r3, r3
 800569a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800569e:	486f      	ldr	r0, [pc, #444]	; (800585c <_printf_i+0x21c>)
 80056a0:	220a      	movs	r2, #10
 80056a2:	e039      	b.n	8005718 <_printf_i+0xd8>
 80056a4:	2973      	cmp	r1, #115	; 0x73
 80056a6:	f000 809d 	beq.w	80057e4 <_printf_i+0x1a4>
 80056aa:	d808      	bhi.n	80056be <_printf_i+0x7e>
 80056ac:	296f      	cmp	r1, #111	; 0x6f
 80056ae:	d020      	beq.n	80056f2 <_printf_i+0xb2>
 80056b0:	2970      	cmp	r1, #112	; 0x70
 80056b2:	d1dd      	bne.n	8005670 <_printf_i+0x30>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f043 0320 	orr.w	r3, r3, #32
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	e003      	b.n	80056c6 <_printf_i+0x86>
 80056be:	2975      	cmp	r1, #117	; 0x75
 80056c0:	d017      	beq.n	80056f2 <_printf_i+0xb2>
 80056c2:	2978      	cmp	r1, #120	; 0x78
 80056c4:	d1d4      	bne.n	8005670 <_printf_i+0x30>
 80056c6:	2378      	movs	r3, #120	; 0x78
 80056c8:	4865      	ldr	r0, [pc, #404]	; (8005860 <_printf_i+0x220>)
 80056ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056ce:	e055      	b.n	800577c <_printf_i+0x13c>
 80056d0:	6813      	ldr	r3, [r2, #0]
 80056d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d6:	1d19      	adds	r1, r3, #4
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6011      	str	r1, [r2, #0]
 80056dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056e0:	2301      	movs	r3, #1
 80056e2:	e08c      	b.n	80057fe <_printf_i+0x1be>
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056ea:	6011      	str	r1, [r2, #0]
 80056ec:	bf18      	it	ne
 80056ee:	b21b      	sxthne	r3, r3
 80056f0:	e7cf      	b.n	8005692 <_printf_i+0x52>
 80056f2:	6813      	ldr	r3, [r2, #0]
 80056f4:	6825      	ldr	r5, [r4, #0]
 80056f6:	1d18      	adds	r0, r3, #4
 80056f8:	6010      	str	r0, [r2, #0]
 80056fa:	0628      	lsls	r0, r5, #24
 80056fc:	d501      	bpl.n	8005702 <_printf_i+0xc2>
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	e002      	b.n	8005708 <_printf_i+0xc8>
 8005702:	0668      	lsls	r0, r5, #25
 8005704:	d5fb      	bpl.n	80056fe <_printf_i+0xbe>
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	296f      	cmp	r1, #111	; 0x6f
 800570a:	bf14      	ite	ne
 800570c:	220a      	movne	r2, #10
 800570e:	2208      	moveq	r2, #8
 8005710:	4852      	ldr	r0, [pc, #328]	; (800585c <_printf_i+0x21c>)
 8005712:	2100      	movs	r1, #0
 8005714:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005718:	6865      	ldr	r5, [r4, #4]
 800571a:	2d00      	cmp	r5, #0
 800571c:	60a5      	str	r5, [r4, #8]
 800571e:	f2c0 8095 	blt.w	800584c <_printf_i+0x20c>
 8005722:	6821      	ldr	r1, [r4, #0]
 8005724:	f021 0104 	bic.w	r1, r1, #4
 8005728:	6021      	str	r1, [r4, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d13d      	bne.n	80057aa <_printf_i+0x16a>
 800572e:	2d00      	cmp	r5, #0
 8005730:	f040 808e 	bne.w	8005850 <_printf_i+0x210>
 8005734:	4665      	mov	r5, ip
 8005736:	2a08      	cmp	r2, #8
 8005738:	d10b      	bne.n	8005752 <_printf_i+0x112>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	07db      	lsls	r3, r3, #31
 800573e:	d508      	bpl.n	8005752 <_printf_i+0x112>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	6862      	ldr	r2, [r4, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	bfde      	ittt	le
 8005748:	2330      	movle	r3, #48	; 0x30
 800574a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800574e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005752:	ebac 0305 	sub.w	r3, ip, r5
 8005756:	6123      	str	r3, [r4, #16]
 8005758:	f8cd 8000 	str.w	r8, [sp]
 800575c:	463b      	mov	r3, r7
 800575e:	aa03      	add	r2, sp, #12
 8005760:	4621      	mov	r1, r4
 8005762:	4630      	mov	r0, r6
 8005764:	f7ff fef6 	bl	8005554 <_printf_common>
 8005768:	3001      	adds	r0, #1
 800576a:	d14d      	bne.n	8005808 <_printf_i+0x1c8>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	b005      	add	sp, #20
 8005772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005776:	4839      	ldr	r0, [pc, #228]	; (800585c <_printf_i+0x21c>)
 8005778:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800577c:	6813      	ldr	r3, [r2, #0]
 800577e:	6821      	ldr	r1, [r4, #0]
 8005780:	1d1d      	adds	r5, r3, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6015      	str	r5, [r2, #0]
 8005786:	060a      	lsls	r2, r1, #24
 8005788:	d50b      	bpl.n	80057a2 <_printf_i+0x162>
 800578a:	07ca      	lsls	r2, r1, #31
 800578c:	bf44      	itt	mi
 800578e:	f041 0120 	orrmi.w	r1, r1, #32
 8005792:	6021      	strmi	r1, [r4, #0]
 8005794:	b91b      	cbnz	r3, 800579e <_printf_i+0x15e>
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	f022 0220 	bic.w	r2, r2, #32
 800579c:	6022      	str	r2, [r4, #0]
 800579e:	2210      	movs	r2, #16
 80057a0:	e7b7      	b.n	8005712 <_printf_i+0xd2>
 80057a2:	064d      	lsls	r5, r1, #25
 80057a4:	bf48      	it	mi
 80057a6:	b29b      	uxthmi	r3, r3
 80057a8:	e7ef      	b.n	800578a <_printf_i+0x14a>
 80057aa:	4665      	mov	r5, ip
 80057ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80057b0:	fb02 3311 	mls	r3, r2, r1, r3
 80057b4:	5cc3      	ldrb	r3, [r0, r3]
 80057b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80057ba:	460b      	mov	r3, r1
 80057bc:	2900      	cmp	r1, #0
 80057be:	d1f5      	bne.n	80057ac <_printf_i+0x16c>
 80057c0:	e7b9      	b.n	8005736 <_printf_i+0xf6>
 80057c2:	6813      	ldr	r3, [r2, #0]
 80057c4:	6825      	ldr	r5, [r4, #0]
 80057c6:	1d18      	adds	r0, r3, #4
 80057c8:	6961      	ldr	r1, [r4, #20]
 80057ca:	6010      	str	r0, [r2, #0]
 80057cc:	0628      	lsls	r0, r5, #24
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	d501      	bpl.n	80057d6 <_printf_i+0x196>
 80057d2:	6019      	str	r1, [r3, #0]
 80057d4:	e002      	b.n	80057dc <_printf_i+0x19c>
 80057d6:	066a      	lsls	r2, r5, #25
 80057d8:	d5fb      	bpl.n	80057d2 <_printf_i+0x192>
 80057da:	8019      	strh	r1, [r3, #0]
 80057dc:	2300      	movs	r3, #0
 80057de:	4665      	mov	r5, ip
 80057e0:	6123      	str	r3, [r4, #16]
 80057e2:	e7b9      	b.n	8005758 <_printf_i+0x118>
 80057e4:	6813      	ldr	r3, [r2, #0]
 80057e6:	1d19      	adds	r1, r3, #4
 80057e8:	6011      	str	r1, [r2, #0]
 80057ea:	681d      	ldr	r5, [r3, #0]
 80057ec:	6862      	ldr	r2, [r4, #4]
 80057ee:	2100      	movs	r1, #0
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 feaf 	bl	8006554 <memchr>
 80057f6:	b108      	cbz	r0, 80057fc <_printf_i+0x1bc>
 80057f8:	1b40      	subs	r0, r0, r5
 80057fa:	6060      	str	r0, [r4, #4]
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	2300      	movs	r3, #0
 8005802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005806:	e7a7      	b.n	8005758 <_printf_i+0x118>
 8005808:	6923      	ldr	r3, [r4, #16]
 800580a:	462a      	mov	r2, r5
 800580c:	4639      	mov	r1, r7
 800580e:	4630      	mov	r0, r6
 8005810:	47c0      	blx	r8
 8005812:	3001      	adds	r0, #1
 8005814:	d0aa      	beq.n	800576c <_printf_i+0x12c>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	079b      	lsls	r3, r3, #30
 800581a:	d413      	bmi.n	8005844 <_printf_i+0x204>
 800581c:	68e0      	ldr	r0, [r4, #12]
 800581e:	9b03      	ldr	r3, [sp, #12]
 8005820:	4298      	cmp	r0, r3
 8005822:	bfb8      	it	lt
 8005824:	4618      	movlt	r0, r3
 8005826:	e7a3      	b.n	8005770 <_printf_i+0x130>
 8005828:	2301      	movs	r3, #1
 800582a:	464a      	mov	r2, r9
 800582c:	4639      	mov	r1, r7
 800582e:	4630      	mov	r0, r6
 8005830:	47c0      	blx	r8
 8005832:	3001      	adds	r0, #1
 8005834:	d09a      	beq.n	800576c <_printf_i+0x12c>
 8005836:	3501      	adds	r5, #1
 8005838:	68e3      	ldr	r3, [r4, #12]
 800583a:	9a03      	ldr	r2, [sp, #12]
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	42ab      	cmp	r3, r5
 8005840:	dcf2      	bgt.n	8005828 <_printf_i+0x1e8>
 8005842:	e7eb      	b.n	800581c <_printf_i+0x1dc>
 8005844:	2500      	movs	r5, #0
 8005846:	f104 0919 	add.w	r9, r4, #25
 800584a:	e7f5      	b.n	8005838 <_printf_i+0x1f8>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1ac      	bne.n	80057aa <_printf_i+0x16a>
 8005850:	7803      	ldrb	r3, [r0, #0]
 8005852:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005856:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800585a:	e76c      	b.n	8005736 <_printf_i+0xf6>
 800585c:	080072be 	.word	0x080072be
 8005860:	080072cf 	.word	0x080072cf

08005864 <siprintf>:
 8005864:	b40e      	push	{r1, r2, r3}
 8005866:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800586a:	b500      	push	{lr}
 800586c:	b09c      	sub	sp, #112	; 0x70
 800586e:	ab1d      	add	r3, sp, #116	; 0x74
 8005870:	9002      	str	r0, [sp, #8]
 8005872:	9006      	str	r0, [sp, #24]
 8005874:	9107      	str	r1, [sp, #28]
 8005876:	9104      	str	r1, [sp, #16]
 8005878:	4808      	ldr	r0, [pc, #32]	; (800589c <siprintf+0x38>)
 800587a:	4909      	ldr	r1, [pc, #36]	; (80058a0 <siprintf+0x3c>)
 800587c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005880:	9105      	str	r1, [sp, #20]
 8005882:	6800      	ldr	r0, [r0, #0]
 8005884:	a902      	add	r1, sp, #8
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	f001 fa5c 	bl	8006d44 <_svfiprintf_r>
 800588c:	2200      	movs	r2, #0
 800588e:	9b02      	ldr	r3, [sp, #8]
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	b01c      	add	sp, #112	; 0x70
 8005894:	f85d eb04 	ldr.w	lr, [sp], #4
 8005898:	b003      	add	sp, #12
 800589a:	4770      	bx	lr
 800589c:	20000014 	.word	0x20000014
 80058a0:	ffff0208 	.word	0xffff0208

080058a4 <quorem>:
 80058a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a8:	6903      	ldr	r3, [r0, #16]
 80058aa:	690c      	ldr	r4, [r1, #16]
 80058ac:	4680      	mov	r8, r0
 80058ae:	42a3      	cmp	r3, r4
 80058b0:	f2c0 8084 	blt.w	80059bc <quorem+0x118>
 80058b4:	3c01      	subs	r4, #1
 80058b6:	f101 0714 	add.w	r7, r1, #20
 80058ba:	f100 0614 	add.w	r6, r0, #20
 80058be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80058c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80058c6:	3501      	adds	r5, #1
 80058c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80058cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80058d0:	eb06 030c 	add.w	r3, r6, ip
 80058d4:	eb07 090c 	add.w	r9, r7, ip
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	b39d      	cbz	r5, 8005944 <quorem+0xa0>
 80058dc:	f04f 0a00 	mov.w	sl, #0
 80058e0:	4638      	mov	r0, r7
 80058e2:	46b6      	mov	lr, r6
 80058e4:	46d3      	mov	fp, sl
 80058e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80058ea:	b293      	uxth	r3, r2
 80058ec:	fb05 a303 	mla	r3, r5, r3, sl
 80058f0:	0c12      	lsrs	r2, r2, #16
 80058f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058f6:	fb05 a202 	mla	r2, r5, r2, sl
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	ebab 0303 	sub.w	r3, fp, r3
 8005900:	f8de b000 	ldr.w	fp, [lr]
 8005904:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005908:	fa1f fb8b 	uxth.w	fp, fp
 800590c:	445b      	add	r3, fp
 800590e:	fa1f fb82 	uxth.w	fp, r2
 8005912:	f8de 2000 	ldr.w	r2, [lr]
 8005916:	4581      	cmp	r9, r0
 8005918:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800591c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005920:	b29b      	uxth	r3, r3
 8005922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005926:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800592a:	f84e 3b04 	str.w	r3, [lr], #4
 800592e:	d2da      	bcs.n	80058e6 <quorem+0x42>
 8005930:	f856 300c 	ldr.w	r3, [r6, ip]
 8005934:	b933      	cbnz	r3, 8005944 <quorem+0xa0>
 8005936:	9b01      	ldr	r3, [sp, #4]
 8005938:	3b04      	subs	r3, #4
 800593a:	429e      	cmp	r6, r3
 800593c:	461a      	mov	r2, r3
 800593e:	d331      	bcc.n	80059a4 <quorem+0x100>
 8005940:	f8c8 4010 	str.w	r4, [r8, #16]
 8005944:	4640      	mov	r0, r8
 8005946:	f001 f827 	bl	8006998 <__mcmp>
 800594a:	2800      	cmp	r0, #0
 800594c:	db26      	blt.n	800599c <quorem+0xf8>
 800594e:	4630      	mov	r0, r6
 8005950:	f04f 0c00 	mov.w	ip, #0
 8005954:	3501      	adds	r5, #1
 8005956:	f857 1b04 	ldr.w	r1, [r7], #4
 800595a:	f8d0 e000 	ldr.w	lr, [r0]
 800595e:	b28b      	uxth	r3, r1
 8005960:	ebac 0303 	sub.w	r3, ip, r3
 8005964:	fa1f f28e 	uxth.w	r2, lr
 8005968:	4413      	add	r3, r2
 800596a:	0c0a      	lsrs	r2, r1, #16
 800596c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005974:	b29b      	uxth	r3, r3
 8005976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800597a:	45b9      	cmp	r9, r7
 800597c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005980:	f840 3b04 	str.w	r3, [r0], #4
 8005984:	d2e7      	bcs.n	8005956 <quorem+0xb2>
 8005986:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800598a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800598e:	b92a      	cbnz	r2, 800599c <quorem+0xf8>
 8005990:	3b04      	subs	r3, #4
 8005992:	429e      	cmp	r6, r3
 8005994:	461a      	mov	r2, r3
 8005996:	d30b      	bcc.n	80059b0 <quorem+0x10c>
 8005998:	f8c8 4010 	str.w	r4, [r8, #16]
 800599c:	4628      	mov	r0, r5
 800599e:	b003      	add	sp, #12
 80059a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	3b04      	subs	r3, #4
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	d1c9      	bne.n	8005940 <quorem+0x9c>
 80059ac:	3c01      	subs	r4, #1
 80059ae:	e7c4      	b.n	800593a <quorem+0x96>
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	3b04      	subs	r3, #4
 80059b4:	2a00      	cmp	r2, #0
 80059b6:	d1ef      	bne.n	8005998 <quorem+0xf4>
 80059b8:	3c01      	subs	r4, #1
 80059ba:	e7ea      	b.n	8005992 <quorem+0xee>
 80059bc:	2000      	movs	r0, #0
 80059be:	e7ee      	b.n	800599e <quorem+0xfa>

080059c0 <_dtoa_r>:
 80059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	4616      	mov	r6, r2
 80059c6:	461f      	mov	r7, r3
 80059c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059ca:	b095      	sub	sp, #84	; 0x54
 80059cc:	4604      	mov	r4, r0
 80059ce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80059d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80059d6:	b93d      	cbnz	r5, 80059e8 <_dtoa_r+0x28>
 80059d8:	2010      	movs	r0, #16
 80059da:	f000 fdb3 	bl	8006544 <malloc>
 80059de:	6260      	str	r0, [r4, #36]	; 0x24
 80059e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059e4:	6005      	str	r5, [r0, #0]
 80059e6:	60c5      	str	r5, [r0, #12]
 80059e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ea:	6819      	ldr	r1, [r3, #0]
 80059ec:	b151      	cbz	r1, 8005a04 <_dtoa_r+0x44>
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	2301      	movs	r3, #1
 80059f2:	4093      	lsls	r3, r2
 80059f4:	604a      	str	r2, [r1, #4]
 80059f6:	608b      	str	r3, [r1, #8]
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 fded 	bl	80065d8 <_Bfree>
 80059fe:	2200      	movs	r2, #0
 8005a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	1e3b      	subs	r3, r7, #0
 8005a06:	bfaf      	iteee	ge
 8005a08:	2300      	movge	r3, #0
 8005a0a:	2201      	movlt	r2, #1
 8005a0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a10:	9303      	strlt	r3, [sp, #12]
 8005a12:	bfac      	ite	ge
 8005a14:	f8c8 3000 	strge.w	r3, [r8]
 8005a18:	f8c8 2000 	strlt.w	r2, [r8]
 8005a1c:	4bae      	ldr	r3, [pc, #696]	; (8005cd8 <_dtoa_r+0x318>)
 8005a1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a22:	ea33 0308 	bics.w	r3, r3, r8
 8005a26:	d11b      	bne.n	8005a60 <_dtoa_r+0xa0>
 8005a28:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	9b02      	ldr	r3, [sp, #8]
 8005a32:	b923      	cbnz	r3, 8005a3e <_dtoa_r+0x7e>
 8005a34:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f000 8545 	beq.w	80064c8 <_dtoa_r+0xb08>
 8005a3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a40:	b953      	cbnz	r3, 8005a58 <_dtoa_r+0x98>
 8005a42:	4ba6      	ldr	r3, [pc, #664]	; (8005cdc <_dtoa_r+0x31c>)
 8005a44:	e021      	b.n	8005a8a <_dtoa_r+0xca>
 8005a46:	4ba6      	ldr	r3, [pc, #664]	; (8005ce0 <_dtoa_r+0x320>)
 8005a48:	9306      	str	r3, [sp, #24]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	9806      	ldr	r0, [sp, #24]
 8005a52:	b015      	add	sp, #84	; 0x54
 8005a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a58:	4ba0      	ldr	r3, [pc, #640]	; (8005cdc <_dtoa_r+0x31c>)
 8005a5a:	9306      	str	r3, [sp, #24]
 8005a5c:	3303      	adds	r3, #3
 8005a5e:	e7f5      	b.n	8005a4c <_dtoa_r+0x8c>
 8005a60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	4630      	mov	r0, r6
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	f7fa ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005a70:	4682      	mov	sl, r0
 8005a72:	b160      	cbz	r0, 8005a8e <_dtoa_r+0xce>
 8005a74:	2301      	movs	r3, #1
 8005a76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8520 	beq.w	80064c2 <_dtoa_r+0xb02>
 8005a82:	4b98      	ldr	r3, [pc, #608]	; (8005ce4 <_dtoa_r+0x324>)
 8005a84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	9306      	str	r3, [sp, #24]
 8005a8c:	e7e0      	b.n	8005a50 <_dtoa_r+0x90>
 8005a8e:	ab12      	add	r3, sp, #72	; 0x48
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	ab13      	add	r3, sp, #76	; 0x4c
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	4632      	mov	r2, r6
 8005a98:	463b      	mov	r3, r7
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 fff4 	bl	8006a88 <__d2b>
 8005aa0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005aa4:	4683      	mov	fp, r0
 8005aa6:	2d00      	cmp	r5, #0
 8005aa8:	d07d      	beq.n	8005ba6 <_dtoa_r+0x1e6>
 8005aaa:	46b0      	mov	r8, r6
 8005aac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ab0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005ab4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005ab8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005abc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4b89      	ldr	r3, [pc, #548]	; (8005ce8 <_dtoa_r+0x328>)
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	f7fa fb4e 	bl	8000168 <__aeabi_dsub>
 8005acc:	a37c      	add	r3, pc, #496	; (adr r3, 8005cc0 <_dtoa_r+0x300>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fd01 	bl	80004d8 <__aeabi_dmul>
 8005ad6:	a37c      	add	r3, pc, #496	; (adr r3, 8005cc8 <_dtoa_r+0x308>)
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f7fa fb46 	bl	800016c <__adddf3>
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	460f      	mov	r7, r1
 8005ae6:	f7fa fc8d 	bl	8000404 <__aeabi_i2d>
 8005aea:	a379      	add	r3, pc, #484	; (adr r3, 8005cd0 <_dtoa_r+0x310>)
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f7fa fcf2 	bl	80004d8 <__aeabi_dmul>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4630      	mov	r0, r6
 8005afa:	4639      	mov	r1, r7
 8005afc:	f7fa fb36 	bl	800016c <__adddf3>
 8005b00:	4606      	mov	r6, r0
 8005b02:	460f      	mov	r7, r1
 8005b04:	f7fa ff98 	bl	8000a38 <__aeabi_d2iz>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4682      	mov	sl, r0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4630      	mov	r0, r6
 8005b10:	4639      	mov	r1, r7
 8005b12:	f7fa ff53 	bl	80009bc <__aeabi_dcmplt>
 8005b16:	b148      	cbz	r0, 8005b2c <_dtoa_r+0x16c>
 8005b18:	4650      	mov	r0, sl
 8005b1a:	f7fa fc73 	bl	8000404 <__aeabi_i2d>
 8005b1e:	4632      	mov	r2, r6
 8005b20:	463b      	mov	r3, r7
 8005b22:	f7fa ff41 	bl	80009a8 <__aeabi_dcmpeq>
 8005b26:	b908      	cbnz	r0, 8005b2c <_dtoa_r+0x16c>
 8005b28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b2c:	f1ba 0f16 	cmp.w	sl, #22
 8005b30:	d85a      	bhi.n	8005be8 <_dtoa_r+0x228>
 8005b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b36:	496d      	ldr	r1, [pc, #436]	; (8005cec <_dtoa_r+0x32c>)
 8005b38:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b40:	f7fa ff5a 	bl	80009f8 <__aeabi_dcmpgt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d051      	beq.n	8005bec <_dtoa_r+0x22c>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b52:	1b5d      	subs	r5, r3, r5
 8005b54:	1e6b      	subs	r3, r5, #1
 8005b56:	9307      	str	r3, [sp, #28]
 8005b58:	bf43      	ittte	mi
 8005b5a:	2300      	movmi	r3, #0
 8005b5c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005b60:	9307      	strmi	r3, [sp, #28]
 8005b62:	f04f 0900 	movpl.w	r9, #0
 8005b66:	f1ba 0f00 	cmp.w	sl, #0
 8005b6a:	db41      	blt.n	8005bf0 <_dtoa_r+0x230>
 8005b6c:	9b07      	ldr	r3, [sp, #28]
 8005b6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005b72:	4453      	add	r3, sl
 8005b74:	9307      	str	r3, [sp, #28]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9308      	str	r3, [sp, #32]
 8005b7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b7c:	2b09      	cmp	r3, #9
 8005b7e:	f200 808f 	bhi.w	8005ca0 <_dtoa_r+0x2e0>
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	bfc4      	itt	gt
 8005b86:	3b04      	subgt	r3, #4
 8005b88:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005b8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b8c:	bfc8      	it	gt
 8005b8e:	2500      	movgt	r5, #0
 8005b90:	f1a3 0302 	sub.w	r3, r3, #2
 8005b94:	bfd8      	it	le
 8005b96:	2501      	movle	r5, #1
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	f200 808d 	bhi.w	8005cb8 <_dtoa_r+0x2f8>
 8005b9e:	e8df f003 	tbb	[pc, r3]
 8005ba2:	7d7b      	.short	0x7d7b
 8005ba4:	6f2f      	.short	0x6f2f
 8005ba6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005baa:	441d      	add	r5, r3
 8005bac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005bb0:	2820      	cmp	r0, #32
 8005bb2:	dd13      	ble.n	8005bdc <_dtoa_r+0x21c>
 8005bb4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005bb8:	9b02      	ldr	r3, [sp, #8]
 8005bba:	fa08 f800 	lsl.w	r8, r8, r0
 8005bbe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005bc2:	fa23 f000 	lsr.w	r0, r3, r0
 8005bc6:	ea48 0000 	orr.w	r0, r8, r0
 8005bca:	f7fa fc0b 	bl	80003e4 <__aeabi_ui2d>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4680      	mov	r8, r0
 8005bd2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005bd6:	3d01      	subs	r5, #1
 8005bd8:	9310      	str	r3, [sp, #64]	; 0x40
 8005bda:	e771      	b.n	8005ac0 <_dtoa_r+0x100>
 8005bdc:	9b02      	ldr	r3, [sp, #8]
 8005bde:	f1c0 0020 	rsb	r0, r0, #32
 8005be2:	fa03 f000 	lsl.w	r0, r3, r0
 8005be6:	e7f0      	b.n	8005bca <_dtoa_r+0x20a>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e7b0      	b.n	8005b4e <_dtoa_r+0x18e>
 8005bec:	900d      	str	r0, [sp, #52]	; 0x34
 8005bee:	e7af      	b.n	8005b50 <_dtoa_r+0x190>
 8005bf0:	f1ca 0300 	rsb	r3, sl, #0
 8005bf4:	9308      	str	r3, [sp, #32]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	eba9 090a 	sub.w	r9, r9, sl
 8005bfc:	930c      	str	r3, [sp, #48]	; 0x30
 8005bfe:	e7bc      	b.n	8005b7a <_dtoa_r+0x1ba>
 8005c00:	2301      	movs	r3, #1
 8005c02:	9309      	str	r3, [sp, #36]	; 0x24
 8005c04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	dd74      	ble.n	8005cf4 <_dtoa_r+0x334>
 8005c0a:	4698      	mov	r8, r3
 8005c0c:	9304      	str	r3, [sp, #16]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c12:	6072      	str	r2, [r6, #4]
 8005c14:	2204      	movs	r2, #4
 8005c16:	f102 0014 	add.w	r0, r2, #20
 8005c1a:	4298      	cmp	r0, r3
 8005c1c:	6871      	ldr	r1, [r6, #4]
 8005c1e:	d96e      	bls.n	8005cfe <_dtoa_r+0x33e>
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 fca5 	bl	8006570 <_Balloc>
 8005c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c28:	6030      	str	r0, [r6, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1b8 0f0e 	cmp.w	r8, #14
 8005c30:	9306      	str	r3, [sp, #24]
 8005c32:	f200 80ed 	bhi.w	8005e10 <_dtoa_r+0x450>
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	f000 80ea 	beq.w	8005e10 <_dtoa_r+0x450>
 8005c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c40:	f1ba 0f00 	cmp.w	sl, #0
 8005c44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005c48:	dd77      	ble.n	8005d3a <_dtoa_r+0x37a>
 8005c4a:	4a28      	ldr	r2, [pc, #160]	; (8005cec <_dtoa_r+0x32c>)
 8005c4c:	f00a 030f 	and.w	r3, sl, #15
 8005c50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005c54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c58:	06f0      	lsls	r0, r6, #27
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c62:	d568      	bpl.n	8005d36 <_dtoa_r+0x376>
 8005c64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c68:	4b21      	ldr	r3, [pc, #132]	; (8005cf0 <_dtoa_r+0x330>)
 8005c6a:	2503      	movs	r5, #3
 8005c6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c70:	f7fa fd5c 	bl	800072c <__aeabi_ddiv>
 8005c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c78:	f006 060f 	and.w	r6, r6, #15
 8005c7c:	4f1c      	ldr	r7, [pc, #112]	; (8005cf0 <_dtoa_r+0x330>)
 8005c7e:	e04f      	b.n	8005d20 <_dtoa_r+0x360>
 8005c80:	2301      	movs	r3, #1
 8005c82:	9309      	str	r3, [sp, #36]	; 0x24
 8005c84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c86:	4453      	add	r3, sl
 8005c88:	f103 0801 	add.w	r8, r3, #1
 8005c8c:	9304      	str	r3, [sp, #16]
 8005c8e:	4643      	mov	r3, r8
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	bfb8      	it	lt
 8005c94:	2301      	movlt	r3, #1
 8005c96:	e7ba      	b.n	8005c0e <_dtoa_r+0x24e>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e7b2      	b.n	8005c02 <_dtoa_r+0x242>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e7f0      	b.n	8005c82 <_dtoa_r+0x2c2>
 8005ca0:	2501      	movs	r5, #1
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9509      	str	r5, [sp, #36]	; 0x24
 8005ca6:	931e      	str	r3, [sp, #120]	; 0x78
 8005ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cac:	2200      	movs	r2, #0
 8005cae:	9304      	str	r3, [sp, #16]
 8005cb0:	4698      	mov	r8, r3
 8005cb2:	2312      	movs	r3, #18
 8005cb4:	921f      	str	r2, [sp, #124]	; 0x7c
 8005cb6:	e7aa      	b.n	8005c0e <_dtoa_r+0x24e>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbc:	e7f4      	b.n	8005ca8 <_dtoa_r+0x2e8>
 8005cbe:	bf00      	nop
 8005cc0:	636f4361 	.word	0x636f4361
 8005cc4:	3fd287a7 	.word	0x3fd287a7
 8005cc8:	8b60c8b3 	.word	0x8b60c8b3
 8005ccc:	3fc68a28 	.word	0x3fc68a28
 8005cd0:	509f79fb 	.word	0x509f79fb
 8005cd4:	3fd34413 	.word	0x3fd34413
 8005cd8:	7ff00000 	.word	0x7ff00000
 8005cdc:	080072e9 	.word	0x080072e9
 8005ce0:	080072e0 	.word	0x080072e0
 8005ce4:	080072bd 	.word	0x080072bd
 8005ce8:	3ff80000 	.word	0x3ff80000
 8005cec:	08007318 	.word	0x08007318
 8005cf0:	080072f0 	.word	0x080072f0
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	4698      	mov	r8, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	e7da      	b.n	8005cb4 <_dtoa_r+0x2f4>
 8005cfe:	3101      	adds	r1, #1
 8005d00:	6071      	str	r1, [r6, #4]
 8005d02:	0052      	lsls	r2, r2, #1
 8005d04:	e787      	b.n	8005c16 <_dtoa_r+0x256>
 8005d06:	07f1      	lsls	r1, r6, #31
 8005d08:	d508      	bpl.n	8005d1c <_dtoa_r+0x35c>
 8005d0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d12:	f7fa fbe1 	bl	80004d8 <__aeabi_dmul>
 8005d16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d1a:	3501      	adds	r5, #1
 8005d1c:	1076      	asrs	r6, r6, #1
 8005d1e:	3708      	adds	r7, #8
 8005d20:	2e00      	cmp	r6, #0
 8005d22:	d1f0      	bne.n	8005d06 <_dtoa_r+0x346>
 8005d24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d2c:	f7fa fcfe 	bl	800072c <__aeabi_ddiv>
 8005d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d34:	e01b      	b.n	8005d6e <_dtoa_r+0x3ae>
 8005d36:	2502      	movs	r5, #2
 8005d38:	e7a0      	b.n	8005c7c <_dtoa_r+0x2bc>
 8005d3a:	f000 80a4 	beq.w	8005e86 <_dtoa_r+0x4c6>
 8005d3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005d42:	f1ca 0600 	rsb	r6, sl, #0
 8005d46:	4ba0      	ldr	r3, [pc, #640]	; (8005fc8 <_dtoa_r+0x608>)
 8005d48:	f006 020f 	and.w	r2, r6, #15
 8005d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fbc0 	bl	80004d8 <__aeabi_dmul>
 8005d58:	2502      	movs	r5, #2
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d60:	4f9a      	ldr	r7, [pc, #616]	; (8005fcc <_dtoa_r+0x60c>)
 8005d62:	1136      	asrs	r6, r6, #4
 8005d64:	2e00      	cmp	r6, #0
 8005d66:	f040 8083 	bne.w	8005e70 <_dtoa_r+0x4b0>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e0      	bne.n	8005d30 <_dtoa_r+0x370>
 8005d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 808a 	beq.w	8005e8a <_dtoa_r+0x4ca>
 8005d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d82:	2200      	movs	r2, #0
 8005d84:	4b92      	ldr	r3, [pc, #584]	; (8005fd0 <_dtoa_r+0x610>)
 8005d86:	f7fa fe19 	bl	80009bc <__aeabi_dcmplt>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d07d      	beq.n	8005e8a <_dtoa_r+0x4ca>
 8005d8e:	f1b8 0f00 	cmp.w	r8, #0
 8005d92:	d07a      	beq.n	8005e8a <_dtoa_r+0x4ca>
 8005d94:	9b04      	ldr	r3, [sp, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	dd36      	ble.n	8005e08 <_dtoa_r+0x448>
 8005d9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d9e:	2200      	movs	r2, #0
 8005da0:	4b8c      	ldr	r3, [pc, #560]	; (8005fd4 <_dtoa_r+0x614>)
 8005da2:	f7fa fb99 	bl	80004d8 <__aeabi_dmul>
 8005da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005daa:	9e04      	ldr	r6, [sp, #16]
 8005dac:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005db0:	3501      	adds	r5, #1
 8005db2:	4628      	mov	r0, r5
 8005db4:	f7fa fb26 	bl	8000404 <__aeabi_i2d>
 8005db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dbc:	f7fa fb8c 	bl	80004d8 <__aeabi_dmul>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4b85      	ldr	r3, [pc, #532]	; (8005fd8 <_dtoa_r+0x618>)
 8005dc4:	f7fa f9d2 	bl	800016c <__adddf3>
 8005dc8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005dcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005dd0:	950b      	str	r5, [sp, #44]	; 0x2c
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d15c      	bne.n	8005e90 <_dtoa_r+0x4d0>
 8005dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4b7f      	ldr	r3, [pc, #508]	; (8005fdc <_dtoa_r+0x61c>)
 8005dde:	f7fa f9c3 	bl	8000168 <__aeabi_dsub>
 8005de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005de4:	462b      	mov	r3, r5
 8005de6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dea:	f7fa fe05 	bl	80009f8 <__aeabi_dcmpgt>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f040 8281 	bne.w	80062f6 <_dtoa_r+0x936>
 8005df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dfa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005dfe:	f7fa fddd 	bl	80009bc <__aeabi_dcmplt>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	f040 8275 	bne.w	80062f2 <_dtoa_r+0x932>
 8005e08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f2c0 814b 	blt.w	80060ae <_dtoa_r+0x6ee>
 8005e18:	f1ba 0f0e 	cmp.w	sl, #14
 8005e1c:	f300 8147 	bgt.w	80060ae <_dtoa_r+0x6ee>
 8005e20:	4b69      	ldr	r3, [pc, #420]	; (8005fc8 <_dtoa_r+0x608>)
 8005e22:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f280 80d7 	bge.w	8005fe4 <_dtoa_r+0x624>
 8005e36:	f1b8 0f00 	cmp.w	r8, #0
 8005e3a:	f300 80d3 	bgt.w	8005fe4 <_dtoa_r+0x624>
 8005e3e:	f040 8257 	bne.w	80062f0 <_dtoa_r+0x930>
 8005e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e46:	2200      	movs	r2, #0
 8005e48:	4b64      	ldr	r3, [pc, #400]	; (8005fdc <_dtoa_r+0x61c>)
 8005e4a:	f7fa fb45 	bl	80004d8 <__aeabi_dmul>
 8005e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e52:	f7fa fdc7 	bl	80009e4 <__aeabi_dcmpge>
 8005e56:	4646      	mov	r6, r8
 8005e58:	4647      	mov	r7, r8
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f040 822d 	bne.w	80062ba <_dtoa_r+0x8fa>
 8005e60:	9b06      	ldr	r3, [sp, #24]
 8005e62:	9a06      	ldr	r2, [sp, #24]
 8005e64:	1c5d      	adds	r5, r3, #1
 8005e66:	2331      	movs	r3, #49	; 0x31
 8005e68:	f10a 0a01 	add.w	sl, sl, #1
 8005e6c:	7013      	strb	r3, [r2, #0]
 8005e6e:	e228      	b.n	80062c2 <_dtoa_r+0x902>
 8005e70:	07f2      	lsls	r2, r6, #31
 8005e72:	d505      	bpl.n	8005e80 <_dtoa_r+0x4c0>
 8005e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e78:	f7fa fb2e 	bl	80004d8 <__aeabi_dmul>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	3501      	adds	r5, #1
 8005e80:	1076      	asrs	r6, r6, #1
 8005e82:	3708      	adds	r7, #8
 8005e84:	e76e      	b.n	8005d64 <_dtoa_r+0x3a4>
 8005e86:	2502      	movs	r5, #2
 8005e88:	e771      	b.n	8005d6e <_dtoa_r+0x3ae>
 8005e8a:	4657      	mov	r7, sl
 8005e8c:	4646      	mov	r6, r8
 8005e8e:	e790      	b.n	8005db2 <_dtoa_r+0x3f2>
 8005e90:	4b4d      	ldr	r3, [pc, #308]	; (8005fc8 <_dtoa_r+0x608>)
 8005e92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e96:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d048      	beq.n	8005f32 <_dtoa_r+0x572>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	494e      	ldr	r1, [pc, #312]	; (8005fe0 <_dtoa_r+0x620>)
 8005ea8:	f7fa fc40 	bl	800072c <__aeabi_ddiv>
 8005eac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005eb0:	f7fa f95a 	bl	8000168 <__aeabi_dsub>
 8005eb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005eb8:	9d06      	ldr	r5, [sp, #24]
 8005eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ebe:	f7fa fdbb 	bl	8000a38 <__aeabi_d2iz>
 8005ec2:	9011      	str	r0, [sp, #68]	; 0x44
 8005ec4:	f7fa fa9e 	bl	8000404 <__aeabi_i2d>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ed0:	f7fa f94a 	bl	8000168 <__aeabi_dsub>
 8005ed4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eda:	3330      	adds	r3, #48	; 0x30
 8005edc:	f805 3b01 	strb.w	r3, [r5], #1
 8005ee0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ee4:	f7fa fd6a 	bl	80009bc <__aeabi_dcmplt>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d163      	bne.n	8005fb4 <_dtoa_r+0x5f4>
 8005eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	4937      	ldr	r1, [pc, #220]	; (8005fd0 <_dtoa_r+0x610>)
 8005ef4:	f7fa f938 	bl	8000168 <__aeabi_dsub>
 8005ef8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005efc:	f7fa fd5e 	bl	80009bc <__aeabi_dcmplt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f040 80b5 	bne.w	8006070 <_dtoa_r+0x6b0>
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	1aeb      	subs	r3, r5, r3
 8005f0a:	429e      	cmp	r6, r3
 8005f0c:	f77f af7c 	ble.w	8005e08 <_dtoa_r+0x448>
 8005f10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f14:	2200      	movs	r2, #0
 8005f16:	4b2f      	ldr	r3, [pc, #188]	; (8005fd4 <_dtoa_r+0x614>)
 8005f18:	f7fa fade 	bl	80004d8 <__aeabi_dmul>
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f26:	4b2b      	ldr	r3, [pc, #172]	; (8005fd4 <_dtoa_r+0x614>)
 8005f28:	f7fa fad6 	bl	80004d8 <__aeabi_dmul>
 8005f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f30:	e7c3      	b.n	8005eba <_dtoa_r+0x4fa>
 8005f32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f36:	f7fa facf 	bl	80004d8 <__aeabi_dmul>
 8005f3a:	9b06      	ldr	r3, [sp, #24]
 8005f3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f40:	199d      	adds	r5, r3, r6
 8005f42:	461e      	mov	r6, r3
 8005f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f48:	f7fa fd76 	bl	8000a38 <__aeabi_d2iz>
 8005f4c:	9011      	str	r0, [sp, #68]	; 0x44
 8005f4e:	f7fa fa59 	bl	8000404 <__aeabi_i2d>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f5a:	f7fa f905 	bl	8000168 <__aeabi_dsub>
 8005f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f64:	3330      	adds	r3, #48	; 0x30
 8005f66:	f806 3b01 	strb.w	r3, [r6], #1
 8005f6a:	42ae      	cmp	r6, r5
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	d124      	bne.n	8005fbc <_dtoa_r+0x5fc>
 8005f72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f76:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <_dtoa_r+0x620>)
 8005f78:	f7fa f8f8 	bl	800016c <__adddf3>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f84:	f7fa fd38 	bl	80009f8 <__aeabi_dcmpgt>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d171      	bne.n	8006070 <_dtoa_r+0x6b0>
 8005f8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f90:	2000      	movs	r0, #0
 8005f92:	4913      	ldr	r1, [pc, #76]	; (8005fe0 <_dtoa_r+0x620>)
 8005f94:	f7fa f8e8 	bl	8000168 <__aeabi_dsub>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fa0:	f7fa fd0c 	bl	80009bc <__aeabi_dcmplt>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	f43f af2f 	beq.w	8005e08 <_dtoa_r+0x448>
 8005faa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fae:	1e6a      	subs	r2, r5, #1
 8005fb0:	2b30      	cmp	r3, #48	; 0x30
 8005fb2:	d001      	beq.n	8005fb8 <_dtoa_r+0x5f8>
 8005fb4:	46ba      	mov	sl, r7
 8005fb6:	e04a      	b.n	800604e <_dtoa_r+0x68e>
 8005fb8:	4615      	mov	r5, r2
 8005fba:	e7f6      	b.n	8005faa <_dtoa_r+0x5ea>
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <_dtoa_r+0x614>)
 8005fbe:	f7fa fa8b 	bl	80004d8 <__aeabi_dmul>
 8005fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc6:	e7bd      	b.n	8005f44 <_dtoa_r+0x584>
 8005fc8:	08007318 	.word	0x08007318
 8005fcc:	080072f0 	.word	0x080072f0
 8005fd0:	3ff00000 	.word	0x3ff00000
 8005fd4:	40240000 	.word	0x40240000
 8005fd8:	401c0000 	.word	0x401c0000
 8005fdc:	40140000 	.word	0x40140000
 8005fe0:	3fe00000 	.word	0x3fe00000
 8005fe4:	9d06      	ldr	r5, [sp, #24]
 8005fe6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fee:	4630      	mov	r0, r6
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	f7fa fb9b 	bl	800072c <__aeabi_ddiv>
 8005ff6:	f7fa fd1f 	bl	8000a38 <__aeabi_d2iz>
 8005ffa:	4681      	mov	r9, r0
 8005ffc:	f7fa fa02 	bl	8000404 <__aeabi_i2d>
 8006000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006004:	f7fa fa68 	bl	80004d8 <__aeabi_dmul>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4630      	mov	r0, r6
 800600e:	4639      	mov	r1, r7
 8006010:	f7fa f8aa 	bl	8000168 <__aeabi_dsub>
 8006014:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006018:	f805 6b01 	strb.w	r6, [r5], #1
 800601c:	9e06      	ldr	r6, [sp, #24]
 800601e:	4602      	mov	r2, r0
 8006020:	1bae      	subs	r6, r5, r6
 8006022:	45b0      	cmp	r8, r6
 8006024:	460b      	mov	r3, r1
 8006026:	d135      	bne.n	8006094 <_dtoa_r+0x6d4>
 8006028:	f7fa f8a0 	bl	800016c <__adddf3>
 800602c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006030:	4606      	mov	r6, r0
 8006032:	460f      	mov	r7, r1
 8006034:	f7fa fce0 	bl	80009f8 <__aeabi_dcmpgt>
 8006038:	b9c8      	cbnz	r0, 800606e <_dtoa_r+0x6ae>
 800603a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800603e:	4630      	mov	r0, r6
 8006040:	4639      	mov	r1, r7
 8006042:	f7fa fcb1 	bl	80009a8 <__aeabi_dcmpeq>
 8006046:	b110      	cbz	r0, 800604e <_dtoa_r+0x68e>
 8006048:	f019 0f01 	tst.w	r9, #1
 800604c:	d10f      	bne.n	800606e <_dtoa_r+0x6ae>
 800604e:	4659      	mov	r1, fp
 8006050:	4620      	mov	r0, r4
 8006052:	f000 fac1 	bl	80065d8 <_Bfree>
 8006056:	2300      	movs	r3, #0
 8006058:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800605a:	702b      	strb	r3, [r5, #0]
 800605c:	f10a 0301 	add.w	r3, sl, #1
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006064:	2b00      	cmp	r3, #0
 8006066:	f43f acf3 	beq.w	8005a50 <_dtoa_r+0x90>
 800606a:	601d      	str	r5, [r3, #0]
 800606c:	e4f0      	b.n	8005a50 <_dtoa_r+0x90>
 800606e:	4657      	mov	r7, sl
 8006070:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006074:	1e6b      	subs	r3, r5, #1
 8006076:	2a39      	cmp	r2, #57	; 0x39
 8006078:	d106      	bne.n	8006088 <_dtoa_r+0x6c8>
 800607a:	9a06      	ldr	r2, [sp, #24]
 800607c:	429a      	cmp	r2, r3
 800607e:	d107      	bne.n	8006090 <_dtoa_r+0x6d0>
 8006080:	2330      	movs	r3, #48	; 0x30
 8006082:	7013      	strb	r3, [r2, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	3701      	adds	r7, #1
 8006088:	781a      	ldrb	r2, [r3, #0]
 800608a:	3201      	adds	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e791      	b.n	8005fb4 <_dtoa_r+0x5f4>
 8006090:	461d      	mov	r5, r3
 8006092:	e7ed      	b.n	8006070 <_dtoa_r+0x6b0>
 8006094:	2200      	movs	r2, #0
 8006096:	4b99      	ldr	r3, [pc, #612]	; (80062fc <_dtoa_r+0x93c>)
 8006098:	f7fa fa1e 	bl	80004d8 <__aeabi_dmul>
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	4606      	mov	r6, r0
 80060a2:	460f      	mov	r7, r1
 80060a4:	f7fa fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d09e      	beq.n	8005fea <_dtoa_r+0x62a>
 80060ac:	e7cf      	b.n	800604e <_dtoa_r+0x68e>
 80060ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060b0:	2a00      	cmp	r2, #0
 80060b2:	f000 8088 	beq.w	80061c6 <_dtoa_r+0x806>
 80060b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80060b8:	2a01      	cmp	r2, #1
 80060ba:	dc6d      	bgt.n	8006198 <_dtoa_r+0x7d8>
 80060bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060be:	2a00      	cmp	r2, #0
 80060c0:	d066      	beq.n	8006190 <_dtoa_r+0x7d0>
 80060c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060c6:	464d      	mov	r5, r9
 80060c8:	9e08      	ldr	r6, [sp, #32]
 80060ca:	9a07      	ldr	r2, [sp, #28]
 80060cc:	2101      	movs	r1, #1
 80060ce:	441a      	add	r2, r3
 80060d0:	4620      	mov	r0, r4
 80060d2:	4499      	add	r9, r3
 80060d4:	9207      	str	r2, [sp, #28]
 80060d6:	f000 fb1f 	bl	8006718 <__i2b>
 80060da:	4607      	mov	r7, r0
 80060dc:	2d00      	cmp	r5, #0
 80060de:	dd0b      	ble.n	80060f8 <_dtoa_r+0x738>
 80060e0:	9b07      	ldr	r3, [sp, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	dd08      	ble.n	80060f8 <_dtoa_r+0x738>
 80060e6:	42ab      	cmp	r3, r5
 80060e8:	bfa8      	it	ge
 80060ea:	462b      	movge	r3, r5
 80060ec:	9a07      	ldr	r2, [sp, #28]
 80060ee:	eba9 0903 	sub.w	r9, r9, r3
 80060f2:	1aed      	subs	r5, r5, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	9307      	str	r3, [sp, #28]
 80060f8:	9b08      	ldr	r3, [sp, #32]
 80060fa:	b1eb      	cbz	r3, 8006138 <_dtoa_r+0x778>
 80060fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d065      	beq.n	80061ce <_dtoa_r+0x80e>
 8006102:	b18e      	cbz	r6, 8006128 <_dtoa_r+0x768>
 8006104:	4639      	mov	r1, r7
 8006106:	4632      	mov	r2, r6
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fba3 	bl	8006854 <__pow5mult>
 800610e:	465a      	mov	r2, fp
 8006110:	4601      	mov	r1, r0
 8006112:	4607      	mov	r7, r0
 8006114:	4620      	mov	r0, r4
 8006116:	f000 fb08 	bl	800672a <__multiply>
 800611a:	4659      	mov	r1, fp
 800611c:	900a      	str	r0, [sp, #40]	; 0x28
 800611e:	4620      	mov	r0, r4
 8006120:	f000 fa5a 	bl	80065d8 <_Bfree>
 8006124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006126:	469b      	mov	fp, r3
 8006128:	9b08      	ldr	r3, [sp, #32]
 800612a:	1b9a      	subs	r2, r3, r6
 800612c:	d004      	beq.n	8006138 <_dtoa_r+0x778>
 800612e:	4659      	mov	r1, fp
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fb8f 	bl	8006854 <__pow5mult>
 8006136:	4683      	mov	fp, r0
 8006138:	2101      	movs	r1, #1
 800613a:	4620      	mov	r0, r4
 800613c:	f000 faec 	bl	8006718 <__i2b>
 8006140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006142:	4606      	mov	r6, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 81c6 	beq.w	80064d6 <_dtoa_r+0xb16>
 800614a:	461a      	mov	r2, r3
 800614c:	4601      	mov	r1, r0
 800614e:	4620      	mov	r0, r4
 8006150:	f000 fb80 	bl	8006854 <__pow5mult>
 8006154:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006156:	4606      	mov	r6, r0
 8006158:	2b01      	cmp	r3, #1
 800615a:	dc3e      	bgt.n	80061da <_dtoa_r+0x81a>
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d137      	bne.n	80061d2 <_dtoa_r+0x812>
 8006162:	9b03      	ldr	r3, [sp, #12]
 8006164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006168:	2b00      	cmp	r3, #0
 800616a:	d134      	bne.n	80061d6 <_dtoa_r+0x816>
 800616c:	9b03      	ldr	r3, [sp, #12]
 800616e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006172:	0d1b      	lsrs	r3, r3, #20
 8006174:	051b      	lsls	r3, r3, #20
 8006176:	b12b      	cbz	r3, 8006184 <_dtoa_r+0x7c4>
 8006178:	9b07      	ldr	r3, [sp, #28]
 800617a:	f109 0901 	add.w	r9, r9, #1
 800617e:	3301      	adds	r3, #1
 8006180:	9307      	str	r3, [sp, #28]
 8006182:	2301      	movs	r3, #1
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006188:	2b00      	cmp	r3, #0
 800618a:	d128      	bne.n	80061de <_dtoa_r+0x81e>
 800618c:	2001      	movs	r0, #1
 800618e:	e02e      	b.n	80061ee <_dtoa_r+0x82e>
 8006190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006192:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006196:	e796      	b.n	80060c6 <_dtoa_r+0x706>
 8006198:	9b08      	ldr	r3, [sp, #32]
 800619a:	f108 36ff 	add.w	r6, r8, #4294967295
 800619e:	42b3      	cmp	r3, r6
 80061a0:	bfb7      	itett	lt
 80061a2:	9b08      	ldrlt	r3, [sp, #32]
 80061a4:	1b9e      	subge	r6, r3, r6
 80061a6:	1af2      	sublt	r2, r6, r3
 80061a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80061aa:	bfbf      	itttt	lt
 80061ac:	9608      	strlt	r6, [sp, #32]
 80061ae:	189b      	addlt	r3, r3, r2
 80061b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80061b2:	2600      	movlt	r6, #0
 80061b4:	f1b8 0f00 	cmp.w	r8, #0
 80061b8:	bfb9      	ittee	lt
 80061ba:	eba9 0508 	sublt.w	r5, r9, r8
 80061be:	2300      	movlt	r3, #0
 80061c0:	464d      	movge	r5, r9
 80061c2:	4643      	movge	r3, r8
 80061c4:	e781      	b.n	80060ca <_dtoa_r+0x70a>
 80061c6:	9e08      	ldr	r6, [sp, #32]
 80061c8:	464d      	mov	r5, r9
 80061ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80061cc:	e786      	b.n	80060dc <_dtoa_r+0x71c>
 80061ce:	9a08      	ldr	r2, [sp, #32]
 80061d0:	e7ad      	b.n	800612e <_dtoa_r+0x76e>
 80061d2:	2300      	movs	r3, #0
 80061d4:	e7d6      	b.n	8006184 <_dtoa_r+0x7c4>
 80061d6:	9b02      	ldr	r3, [sp, #8]
 80061d8:	e7d4      	b.n	8006184 <_dtoa_r+0x7c4>
 80061da:	2300      	movs	r3, #0
 80061dc:	9308      	str	r3, [sp, #32]
 80061de:	6933      	ldr	r3, [r6, #16]
 80061e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061e4:	6918      	ldr	r0, [r3, #16]
 80061e6:	f000 fa49 	bl	800667c <__hi0bits>
 80061ea:	f1c0 0020 	rsb	r0, r0, #32
 80061ee:	9b07      	ldr	r3, [sp, #28]
 80061f0:	4418      	add	r0, r3
 80061f2:	f010 001f 	ands.w	r0, r0, #31
 80061f6:	d047      	beq.n	8006288 <_dtoa_r+0x8c8>
 80061f8:	f1c0 0320 	rsb	r3, r0, #32
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	dd3b      	ble.n	8006278 <_dtoa_r+0x8b8>
 8006200:	9b07      	ldr	r3, [sp, #28]
 8006202:	f1c0 001c 	rsb	r0, r0, #28
 8006206:	4481      	add	r9, r0
 8006208:	4405      	add	r5, r0
 800620a:	4403      	add	r3, r0
 800620c:	9307      	str	r3, [sp, #28]
 800620e:	f1b9 0f00 	cmp.w	r9, #0
 8006212:	dd05      	ble.n	8006220 <_dtoa_r+0x860>
 8006214:	4659      	mov	r1, fp
 8006216:	464a      	mov	r2, r9
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fb69 	bl	80068f0 <__lshift>
 800621e:	4683      	mov	fp, r0
 8006220:	9b07      	ldr	r3, [sp, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	dd05      	ble.n	8006232 <_dtoa_r+0x872>
 8006226:	4631      	mov	r1, r6
 8006228:	461a      	mov	r2, r3
 800622a:	4620      	mov	r0, r4
 800622c:	f000 fb60 	bl	80068f0 <__lshift>
 8006230:	4606      	mov	r6, r0
 8006232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006234:	b353      	cbz	r3, 800628c <_dtoa_r+0x8cc>
 8006236:	4631      	mov	r1, r6
 8006238:	4658      	mov	r0, fp
 800623a:	f000 fbad 	bl	8006998 <__mcmp>
 800623e:	2800      	cmp	r0, #0
 8006240:	da24      	bge.n	800628c <_dtoa_r+0x8cc>
 8006242:	2300      	movs	r3, #0
 8006244:	4659      	mov	r1, fp
 8006246:	220a      	movs	r2, #10
 8006248:	4620      	mov	r0, r4
 800624a:	f000 f9dc 	bl	8006606 <__multadd>
 800624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006250:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006254:	4683      	mov	fp, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 8144 	beq.w	80064e4 <_dtoa_r+0xb24>
 800625c:	2300      	movs	r3, #0
 800625e:	4639      	mov	r1, r7
 8006260:	220a      	movs	r2, #10
 8006262:	4620      	mov	r0, r4
 8006264:	f000 f9cf 	bl	8006606 <__multadd>
 8006268:	9b04      	ldr	r3, [sp, #16]
 800626a:	4607      	mov	r7, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	dc4d      	bgt.n	800630c <_dtoa_r+0x94c>
 8006270:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006272:	2b02      	cmp	r3, #2
 8006274:	dd4a      	ble.n	800630c <_dtoa_r+0x94c>
 8006276:	e011      	b.n	800629c <_dtoa_r+0x8dc>
 8006278:	d0c9      	beq.n	800620e <_dtoa_r+0x84e>
 800627a:	9a07      	ldr	r2, [sp, #28]
 800627c:	331c      	adds	r3, #28
 800627e:	441a      	add	r2, r3
 8006280:	4499      	add	r9, r3
 8006282:	441d      	add	r5, r3
 8006284:	4613      	mov	r3, r2
 8006286:	e7c1      	b.n	800620c <_dtoa_r+0x84c>
 8006288:	4603      	mov	r3, r0
 800628a:	e7f6      	b.n	800627a <_dtoa_r+0x8ba>
 800628c:	f1b8 0f00 	cmp.w	r8, #0
 8006290:	dc36      	bgt.n	8006300 <_dtoa_r+0x940>
 8006292:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006294:	2b02      	cmp	r3, #2
 8006296:	dd33      	ble.n	8006300 <_dtoa_r+0x940>
 8006298:	f8cd 8010 	str.w	r8, [sp, #16]
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	b963      	cbnz	r3, 80062ba <_dtoa_r+0x8fa>
 80062a0:	4631      	mov	r1, r6
 80062a2:	2205      	movs	r2, #5
 80062a4:	4620      	mov	r0, r4
 80062a6:	f000 f9ae 	bl	8006606 <__multadd>
 80062aa:	4601      	mov	r1, r0
 80062ac:	4606      	mov	r6, r0
 80062ae:	4658      	mov	r0, fp
 80062b0:	f000 fb72 	bl	8006998 <__mcmp>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f73f add3 	bgt.w	8005e60 <_dtoa_r+0x4a0>
 80062ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062bc:	9d06      	ldr	r5, [sp, #24]
 80062be:	ea6f 0a03 	mvn.w	sl, r3
 80062c2:	f04f 0900 	mov.w	r9, #0
 80062c6:	4631      	mov	r1, r6
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 f985 	bl	80065d8 <_Bfree>
 80062ce:	2f00      	cmp	r7, #0
 80062d0:	f43f aebd 	beq.w	800604e <_dtoa_r+0x68e>
 80062d4:	f1b9 0f00 	cmp.w	r9, #0
 80062d8:	d005      	beq.n	80062e6 <_dtoa_r+0x926>
 80062da:	45b9      	cmp	r9, r7
 80062dc:	d003      	beq.n	80062e6 <_dtoa_r+0x926>
 80062de:	4649      	mov	r1, r9
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 f979 	bl	80065d8 <_Bfree>
 80062e6:	4639      	mov	r1, r7
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 f975 	bl	80065d8 <_Bfree>
 80062ee:	e6ae      	b.n	800604e <_dtoa_r+0x68e>
 80062f0:	2600      	movs	r6, #0
 80062f2:	4637      	mov	r7, r6
 80062f4:	e7e1      	b.n	80062ba <_dtoa_r+0x8fa>
 80062f6:	46ba      	mov	sl, r7
 80062f8:	4637      	mov	r7, r6
 80062fa:	e5b1      	b.n	8005e60 <_dtoa_r+0x4a0>
 80062fc:	40240000 	.word	0x40240000
 8006300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006302:	f8cd 8010 	str.w	r8, [sp, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80f3 	beq.w	80064f2 <_dtoa_r+0xb32>
 800630c:	2d00      	cmp	r5, #0
 800630e:	dd05      	ble.n	800631c <_dtoa_r+0x95c>
 8006310:	4639      	mov	r1, r7
 8006312:	462a      	mov	r2, r5
 8006314:	4620      	mov	r0, r4
 8006316:	f000 faeb 	bl	80068f0 <__lshift>
 800631a:	4607      	mov	r7, r0
 800631c:	9b08      	ldr	r3, [sp, #32]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d04c      	beq.n	80063bc <_dtoa_r+0x9fc>
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	4620      	mov	r0, r4
 8006326:	f000 f923 	bl	8006570 <_Balloc>
 800632a:	4605      	mov	r5, r0
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	f107 010c 	add.w	r1, r7, #12
 8006332:	3202      	adds	r2, #2
 8006334:	0092      	lsls	r2, r2, #2
 8006336:	300c      	adds	r0, #12
 8006338:	f7fe fe32 	bl	8004fa0 <memcpy>
 800633c:	2201      	movs	r2, #1
 800633e:	4629      	mov	r1, r5
 8006340:	4620      	mov	r0, r4
 8006342:	f000 fad5 	bl	80068f0 <__lshift>
 8006346:	46b9      	mov	r9, r7
 8006348:	4607      	mov	r7, r0
 800634a:	9b06      	ldr	r3, [sp, #24]
 800634c:	9307      	str	r3, [sp, #28]
 800634e:	9b02      	ldr	r3, [sp, #8]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	9308      	str	r3, [sp, #32]
 8006356:	4631      	mov	r1, r6
 8006358:	4658      	mov	r0, fp
 800635a:	f7ff faa3 	bl	80058a4 <quorem>
 800635e:	4649      	mov	r1, r9
 8006360:	4605      	mov	r5, r0
 8006362:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006366:	4658      	mov	r0, fp
 8006368:	f000 fb16 	bl	8006998 <__mcmp>
 800636c:	463a      	mov	r2, r7
 800636e:	9002      	str	r0, [sp, #8]
 8006370:	4631      	mov	r1, r6
 8006372:	4620      	mov	r0, r4
 8006374:	f000 fb2a 	bl	80069cc <__mdiff>
 8006378:	68c3      	ldr	r3, [r0, #12]
 800637a:	4602      	mov	r2, r0
 800637c:	bb03      	cbnz	r3, 80063c0 <_dtoa_r+0xa00>
 800637e:	4601      	mov	r1, r0
 8006380:	9009      	str	r0, [sp, #36]	; 0x24
 8006382:	4658      	mov	r0, fp
 8006384:	f000 fb08 	bl	8006998 <__mcmp>
 8006388:	4603      	mov	r3, r0
 800638a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800638c:	4611      	mov	r1, r2
 800638e:	4620      	mov	r0, r4
 8006390:	9309      	str	r3, [sp, #36]	; 0x24
 8006392:	f000 f921 	bl	80065d8 <_Bfree>
 8006396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006398:	b9a3      	cbnz	r3, 80063c4 <_dtoa_r+0xa04>
 800639a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800639c:	b992      	cbnz	r2, 80063c4 <_dtoa_r+0xa04>
 800639e:	9a08      	ldr	r2, [sp, #32]
 80063a0:	b982      	cbnz	r2, 80063c4 <_dtoa_r+0xa04>
 80063a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063a6:	d029      	beq.n	80063fc <_dtoa_r+0xa3c>
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dd01      	ble.n	80063b2 <_dtoa_r+0x9f2>
 80063ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80063b2:	9b07      	ldr	r3, [sp, #28]
 80063b4:	1c5d      	adds	r5, r3, #1
 80063b6:	f883 8000 	strb.w	r8, [r3]
 80063ba:	e784      	b.n	80062c6 <_dtoa_r+0x906>
 80063bc:	4638      	mov	r0, r7
 80063be:	e7c2      	b.n	8006346 <_dtoa_r+0x986>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e7e3      	b.n	800638c <_dtoa_r+0x9cc>
 80063c4:	9a02      	ldr	r2, [sp, #8]
 80063c6:	2a00      	cmp	r2, #0
 80063c8:	db04      	blt.n	80063d4 <_dtoa_r+0xa14>
 80063ca:	d123      	bne.n	8006414 <_dtoa_r+0xa54>
 80063cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80063ce:	bb0a      	cbnz	r2, 8006414 <_dtoa_r+0xa54>
 80063d0:	9a08      	ldr	r2, [sp, #32]
 80063d2:	b9fa      	cbnz	r2, 8006414 <_dtoa_r+0xa54>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	ddec      	ble.n	80063b2 <_dtoa_r+0x9f2>
 80063d8:	4659      	mov	r1, fp
 80063da:	2201      	movs	r2, #1
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 fa87 	bl	80068f0 <__lshift>
 80063e2:	4631      	mov	r1, r6
 80063e4:	4683      	mov	fp, r0
 80063e6:	f000 fad7 	bl	8006998 <__mcmp>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	dc03      	bgt.n	80063f6 <_dtoa_r+0xa36>
 80063ee:	d1e0      	bne.n	80063b2 <_dtoa_r+0x9f2>
 80063f0:	f018 0f01 	tst.w	r8, #1
 80063f4:	d0dd      	beq.n	80063b2 <_dtoa_r+0x9f2>
 80063f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063fa:	d1d8      	bne.n	80063ae <_dtoa_r+0x9ee>
 80063fc:	9b07      	ldr	r3, [sp, #28]
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	1c5d      	adds	r5, r3, #1
 8006402:	2339      	movs	r3, #57	; 0x39
 8006404:	7013      	strb	r3, [r2, #0]
 8006406:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800640a:	1e6a      	subs	r2, r5, #1
 800640c:	2b39      	cmp	r3, #57	; 0x39
 800640e:	d04d      	beq.n	80064ac <_dtoa_r+0xaec>
 8006410:	3301      	adds	r3, #1
 8006412:	e052      	b.n	80064ba <_dtoa_r+0xafa>
 8006414:	9a07      	ldr	r2, [sp, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f102 0501 	add.w	r5, r2, #1
 800641c:	dd06      	ble.n	800642c <_dtoa_r+0xa6c>
 800641e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006422:	d0eb      	beq.n	80063fc <_dtoa_r+0xa3c>
 8006424:	f108 0801 	add.w	r8, r8, #1
 8006428:	9b07      	ldr	r3, [sp, #28]
 800642a:	e7c4      	b.n	80063b6 <_dtoa_r+0x9f6>
 800642c:	9b06      	ldr	r3, [sp, #24]
 800642e:	9a04      	ldr	r2, [sp, #16]
 8006430:	1aeb      	subs	r3, r5, r3
 8006432:	4293      	cmp	r3, r2
 8006434:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006438:	d021      	beq.n	800647e <_dtoa_r+0xabe>
 800643a:	4659      	mov	r1, fp
 800643c:	2300      	movs	r3, #0
 800643e:	220a      	movs	r2, #10
 8006440:	4620      	mov	r0, r4
 8006442:	f000 f8e0 	bl	8006606 <__multadd>
 8006446:	45b9      	cmp	r9, r7
 8006448:	4683      	mov	fp, r0
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	f04f 020a 	mov.w	r2, #10
 8006452:	4649      	mov	r1, r9
 8006454:	4620      	mov	r0, r4
 8006456:	d105      	bne.n	8006464 <_dtoa_r+0xaa4>
 8006458:	f000 f8d5 	bl	8006606 <__multadd>
 800645c:	4681      	mov	r9, r0
 800645e:	4607      	mov	r7, r0
 8006460:	9507      	str	r5, [sp, #28]
 8006462:	e778      	b.n	8006356 <_dtoa_r+0x996>
 8006464:	f000 f8cf 	bl	8006606 <__multadd>
 8006468:	4639      	mov	r1, r7
 800646a:	4681      	mov	r9, r0
 800646c:	2300      	movs	r3, #0
 800646e:	220a      	movs	r2, #10
 8006470:	4620      	mov	r0, r4
 8006472:	f000 f8c8 	bl	8006606 <__multadd>
 8006476:	4607      	mov	r7, r0
 8006478:	e7f2      	b.n	8006460 <_dtoa_r+0xaa0>
 800647a:	f04f 0900 	mov.w	r9, #0
 800647e:	4659      	mov	r1, fp
 8006480:	2201      	movs	r2, #1
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fa34 	bl	80068f0 <__lshift>
 8006488:	4631      	mov	r1, r6
 800648a:	4683      	mov	fp, r0
 800648c:	f000 fa84 	bl	8006998 <__mcmp>
 8006490:	2800      	cmp	r0, #0
 8006492:	dcb8      	bgt.n	8006406 <_dtoa_r+0xa46>
 8006494:	d102      	bne.n	800649c <_dtoa_r+0xadc>
 8006496:	f018 0f01 	tst.w	r8, #1
 800649a:	d1b4      	bne.n	8006406 <_dtoa_r+0xa46>
 800649c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064a0:	1e6a      	subs	r2, r5, #1
 80064a2:	2b30      	cmp	r3, #48	; 0x30
 80064a4:	f47f af0f 	bne.w	80062c6 <_dtoa_r+0x906>
 80064a8:	4615      	mov	r5, r2
 80064aa:	e7f7      	b.n	800649c <_dtoa_r+0xadc>
 80064ac:	9b06      	ldr	r3, [sp, #24]
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d105      	bne.n	80064be <_dtoa_r+0xafe>
 80064b2:	2331      	movs	r3, #49	; 0x31
 80064b4:	9a06      	ldr	r2, [sp, #24]
 80064b6:	f10a 0a01 	add.w	sl, sl, #1
 80064ba:	7013      	strb	r3, [r2, #0]
 80064bc:	e703      	b.n	80062c6 <_dtoa_r+0x906>
 80064be:	4615      	mov	r5, r2
 80064c0:	e7a1      	b.n	8006406 <_dtoa_r+0xa46>
 80064c2:	4b17      	ldr	r3, [pc, #92]	; (8006520 <_dtoa_r+0xb60>)
 80064c4:	f7ff bae1 	b.w	8005a8a <_dtoa_r+0xca>
 80064c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f47f aabb 	bne.w	8005a46 <_dtoa_r+0x86>
 80064d0:	4b14      	ldr	r3, [pc, #80]	; (8006524 <_dtoa_r+0xb64>)
 80064d2:	f7ff bada 	b.w	8005a8a <_dtoa_r+0xca>
 80064d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064d8:	2b01      	cmp	r3, #1
 80064da:	f77f ae3f 	ble.w	800615c <_dtoa_r+0x79c>
 80064de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064e0:	9308      	str	r3, [sp, #32]
 80064e2:	e653      	b.n	800618c <_dtoa_r+0x7cc>
 80064e4:	9b04      	ldr	r3, [sp, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	dc03      	bgt.n	80064f2 <_dtoa_r+0xb32>
 80064ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	f73f aed5 	bgt.w	800629c <_dtoa_r+0x8dc>
 80064f2:	9d06      	ldr	r5, [sp, #24]
 80064f4:	4631      	mov	r1, r6
 80064f6:	4658      	mov	r0, fp
 80064f8:	f7ff f9d4 	bl	80058a4 <quorem>
 80064fc:	9b06      	ldr	r3, [sp, #24]
 80064fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006502:	f805 8b01 	strb.w	r8, [r5], #1
 8006506:	9a04      	ldr	r2, [sp, #16]
 8006508:	1aeb      	subs	r3, r5, r3
 800650a:	429a      	cmp	r2, r3
 800650c:	ddb5      	ble.n	800647a <_dtoa_r+0xaba>
 800650e:	4659      	mov	r1, fp
 8006510:	2300      	movs	r3, #0
 8006512:	220a      	movs	r2, #10
 8006514:	4620      	mov	r0, r4
 8006516:	f000 f876 	bl	8006606 <__multadd>
 800651a:	4683      	mov	fp, r0
 800651c:	e7ea      	b.n	80064f4 <_dtoa_r+0xb34>
 800651e:	bf00      	nop
 8006520:	080072bc 	.word	0x080072bc
 8006524:	080072e0 	.word	0x080072e0

08006528 <_localeconv_r>:
 8006528:	4b04      	ldr	r3, [pc, #16]	; (800653c <_localeconv_r+0x14>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6a18      	ldr	r0, [r3, #32]
 800652e:	4b04      	ldr	r3, [pc, #16]	; (8006540 <_localeconv_r+0x18>)
 8006530:	2800      	cmp	r0, #0
 8006532:	bf08      	it	eq
 8006534:	4618      	moveq	r0, r3
 8006536:	30f0      	adds	r0, #240	; 0xf0
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20000014 	.word	0x20000014
 8006540:	20000078 	.word	0x20000078

08006544 <malloc>:
 8006544:	4b02      	ldr	r3, [pc, #8]	; (8006550 <malloc+0xc>)
 8006546:	4601      	mov	r1, r0
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f000 bb47 	b.w	8006bdc <_malloc_r>
 800654e:	bf00      	nop
 8006550:	20000014 	.word	0x20000014

08006554 <memchr>:
 8006554:	b510      	push	{r4, lr}
 8006556:	b2c9      	uxtb	r1, r1
 8006558:	4402      	add	r2, r0
 800655a:	4290      	cmp	r0, r2
 800655c:	4603      	mov	r3, r0
 800655e:	d101      	bne.n	8006564 <memchr+0x10>
 8006560:	2300      	movs	r3, #0
 8006562:	e003      	b.n	800656c <memchr+0x18>
 8006564:	781c      	ldrb	r4, [r3, #0]
 8006566:	3001      	adds	r0, #1
 8006568:	428c      	cmp	r4, r1
 800656a:	d1f6      	bne.n	800655a <memchr+0x6>
 800656c:	4618      	mov	r0, r3
 800656e:	bd10      	pop	{r4, pc}

08006570 <_Balloc>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006574:	4604      	mov	r4, r0
 8006576:	460e      	mov	r6, r1
 8006578:	b93d      	cbnz	r5, 800658a <_Balloc+0x1a>
 800657a:	2010      	movs	r0, #16
 800657c:	f7ff ffe2 	bl	8006544 <malloc>
 8006580:	6260      	str	r0, [r4, #36]	; 0x24
 8006582:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006586:	6005      	str	r5, [r0, #0]
 8006588:	60c5      	str	r5, [r0, #12]
 800658a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800658c:	68eb      	ldr	r3, [r5, #12]
 800658e:	b183      	cbz	r3, 80065b2 <_Balloc+0x42>
 8006590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006598:	b9b8      	cbnz	r0, 80065ca <_Balloc+0x5a>
 800659a:	2101      	movs	r1, #1
 800659c:	fa01 f506 	lsl.w	r5, r1, r6
 80065a0:	1d6a      	adds	r2, r5, #5
 80065a2:	0092      	lsls	r2, r2, #2
 80065a4:	4620      	mov	r0, r4
 80065a6:	f000 fabe 	bl	8006b26 <_calloc_r>
 80065aa:	b160      	cbz	r0, 80065c6 <_Balloc+0x56>
 80065ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80065b0:	e00e      	b.n	80065d0 <_Balloc+0x60>
 80065b2:	2221      	movs	r2, #33	; 0x21
 80065b4:	2104      	movs	r1, #4
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 fab5 	bl	8006b26 <_calloc_r>
 80065bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065be:	60e8      	str	r0, [r5, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e4      	bne.n	8006590 <_Balloc+0x20>
 80065c6:	2000      	movs	r0, #0
 80065c8:	bd70      	pop	{r4, r5, r6, pc}
 80065ca:	6802      	ldr	r2, [r0, #0]
 80065cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80065d0:	2300      	movs	r3, #0
 80065d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065d6:	e7f7      	b.n	80065c8 <_Balloc+0x58>

080065d8 <_Bfree>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065dc:	4606      	mov	r6, r0
 80065de:	460d      	mov	r5, r1
 80065e0:	b93c      	cbnz	r4, 80065f2 <_Bfree+0x1a>
 80065e2:	2010      	movs	r0, #16
 80065e4:	f7ff ffae 	bl	8006544 <malloc>
 80065e8:	6270      	str	r0, [r6, #36]	; 0x24
 80065ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065ee:	6004      	str	r4, [r0, #0]
 80065f0:	60c4      	str	r4, [r0, #12]
 80065f2:	b13d      	cbz	r5, 8006604 <_Bfree+0x2c>
 80065f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065f6:	686a      	ldr	r2, [r5, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065fe:	6029      	str	r1, [r5, #0]
 8006600:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006604:	bd70      	pop	{r4, r5, r6, pc}

08006606 <__multadd>:
 8006606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800660a:	461f      	mov	r7, r3
 800660c:	4606      	mov	r6, r0
 800660e:	460c      	mov	r4, r1
 8006610:	2300      	movs	r3, #0
 8006612:	690d      	ldr	r5, [r1, #16]
 8006614:	f101 0c14 	add.w	ip, r1, #20
 8006618:	f8dc 0000 	ldr.w	r0, [ip]
 800661c:	3301      	adds	r3, #1
 800661e:	b281      	uxth	r1, r0
 8006620:	fb02 7101 	mla	r1, r2, r1, r7
 8006624:	0c00      	lsrs	r0, r0, #16
 8006626:	0c0f      	lsrs	r7, r1, #16
 8006628:	fb02 7000 	mla	r0, r2, r0, r7
 800662c:	b289      	uxth	r1, r1
 800662e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006632:	429d      	cmp	r5, r3
 8006634:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006638:	f84c 1b04 	str.w	r1, [ip], #4
 800663c:	dcec      	bgt.n	8006618 <__multadd+0x12>
 800663e:	b1d7      	cbz	r7, 8006676 <__multadd+0x70>
 8006640:	68a3      	ldr	r3, [r4, #8]
 8006642:	42ab      	cmp	r3, r5
 8006644:	dc12      	bgt.n	800666c <__multadd+0x66>
 8006646:	6861      	ldr	r1, [r4, #4]
 8006648:	4630      	mov	r0, r6
 800664a:	3101      	adds	r1, #1
 800664c:	f7ff ff90 	bl	8006570 <_Balloc>
 8006650:	4680      	mov	r8, r0
 8006652:	6922      	ldr	r2, [r4, #16]
 8006654:	f104 010c 	add.w	r1, r4, #12
 8006658:	3202      	adds	r2, #2
 800665a:	0092      	lsls	r2, r2, #2
 800665c:	300c      	adds	r0, #12
 800665e:	f7fe fc9f 	bl	8004fa0 <memcpy>
 8006662:	4621      	mov	r1, r4
 8006664:	4630      	mov	r0, r6
 8006666:	f7ff ffb7 	bl	80065d8 <_Bfree>
 800666a:	4644      	mov	r4, r8
 800666c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006670:	3501      	adds	r5, #1
 8006672:	615f      	str	r7, [r3, #20]
 8006674:	6125      	str	r5, [r4, #16]
 8006676:	4620      	mov	r0, r4
 8006678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800667c <__hi0bits>:
 800667c:	0c02      	lsrs	r2, r0, #16
 800667e:	0412      	lsls	r2, r2, #16
 8006680:	4603      	mov	r3, r0
 8006682:	b9b2      	cbnz	r2, 80066b2 <__hi0bits+0x36>
 8006684:	0403      	lsls	r3, r0, #16
 8006686:	2010      	movs	r0, #16
 8006688:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800668c:	bf04      	itt	eq
 800668e:	021b      	lsleq	r3, r3, #8
 8006690:	3008      	addeq	r0, #8
 8006692:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006696:	bf04      	itt	eq
 8006698:	011b      	lsleq	r3, r3, #4
 800669a:	3004      	addeq	r0, #4
 800669c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066a0:	bf04      	itt	eq
 80066a2:	009b      	lsleq	r3, r3, #2
 80066a4:	3002      	addeq	r0, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	db06      	blt.n	80066b8 <__hi0bits+0x3c>
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	d503      	bpl.n	80066b6 <__hi0bits+0x3a>
 80066ae:	3001      	adds	r0, #1
 80066b0:	4770      	bx	lr
 80066b2:	2000      	movs	r0, #0
 80066b4:	e7e8      	b.n	8006688 <__hi0bits+0xc>
 80066b6:	2020      	movs	r0, #32
 80066b8:	4770      	bx	lr

080066ba <__lo0bits>:
 80066ba:	6803      	ldr	r3, [r0, #0]
 80066bc:	4601      	mov	r1, r0
 80066be:	f013 0207 	ands.w	r2, r3, #7
 80066c2:	d00b      	beq.n	80066dc <__lo0bits+0x22>
 80066c4:	07da      	lsls	r2, r3, #31
 80066c6:	d423      	bmi.n	8006710 <__lo0bits+0x56>
 80066c8:	0798      	lsls	r0, r3, #30
 80066ca:	bf49      	itett	mi
 80066cc:	085b      	lsrmi	r3, r3, #1
 80066ce:	089b      	lsrpl	r3, r3, #2
 80066d0:	2001      	movmi	r0, #1
 80066d2:	600b      	strmi	r3, [r1, #0]
 80066d4:	bf5c      	itt	pl
 80066d6:	600b      	strpl	r3, [r1, #0]
 80066d8:	2002      	movpl	r0, #2
 80066da:	4770      	bx	lr
 80066dc:	b298      	uxth	r0, r3
 80066de:	b9a8      	cbnz	r0, 800670c <__lo0bits+0x52>
 80066e0:	2010      	movs	r0, #16
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066e8:	bf04      	itt	eq
 80066ea:	0a1b      	lsreq	r3, r3, #8
 80066ec:	3008      	addeq	r0, #8
 80066ee:	071a      	lsls	r2, r3, #28
 80066f0:	bf04      	itt	eq
 80066f2:	091b      	lsreq	r3, r3, #4
 80066f4:	3004      	addeq	r0, #4
 80066f6:	079a      	lsls	r2, r3, #30
 80066f8:	bf04      	itt	eq
 80066fa:	089b      	lsreq	r3, r3, #2
 80066fc:	3002      	addeq	r0, #2
 80066fe:	07da      	lsls	r2, r3, #31
 8006700:	d402      	bmi.n	8006708 <__lo0bits+0x4e>
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	d006      	beq.n	8006714 <__lo0bits+0x5a>
 8006706:	3001      	adds	r0, #1
 8006708:	600b      	str	r3, [r1, #0]
 800670a:	4770      	bx	lr
 800670c:	4610      	mov	r0, r2
 800670e:	e7e9      	b.n	80066e4 <__lo0bits+0x2a>
 8006710:	2000      	movs	r0, #0
 8006712:	4770      	bx	lr
 8006714:	2020      	movs	r0, #32
 8006716:	4770      	bx	lr

08006718 <__i2b>:
 8006718:	b510      	push	{r4, lr}
 800671a:	460c      	mov	r4, r1
 800671c:	2101      	movs	r1, #1
 800671e:	f7ff ff27 	bl	8006570 <_Balloc>
 8006722:	2201      	movs	r2, #1
 8006724:	6144      	str	r4, [r0, #20]
 8006726:	6102      	str	r2, [r0, #16]
 8006728:	bd10      	pop	{r4, pc}

0800672a <__multiply>:
 800672a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672e:	4614      	mov	r4, r2
 8006730:	690a      	ldr	r2, [r1, #16]
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	4688      	mov	r8, r1
 8006736:	429a      	cmp	r2, r3
 8006738:	bfbe      	ittt	lt
 800673a:	460b      	movlt	r3, r1
 800673c:	46a0      	movlt	r8, r4
 800673e:	461c      	movlt	r4, r3
 8006740:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006744:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006748:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800674c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006750:	eb07 0609 	add.w	r6, r7, r9
 8006754:	42b3      	cmp	r3, r6
 8006756:	bfb8      	it	lt
 8006758:	3101      	addlt	r1, #1
 800675a:	f7ff ff09 	bl	8006570 <_Balloc>
 800675e:	f100 0514 	add.w	r5, r0, #20
 8006762:	462b      	mov	r3, r5
 8006764:	2200      	movs	r2, #0
 8006766:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800676a:	4573      	cmp	r3, lr
 800676c:	d316      	bcc.n	800679c <__multiply+0x72>
 800676e:	f104 0214 	add.w	r2, r4, #20
 8006772:	f108 0114 	add.w	r1, r8, #20
 8006776:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800677a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	9b00      	ldr	r3, [sp, #0]
 8006782:	9201      	str	r2, [sp, #4]
 8006784:	4293      	cmp	r3, r2
 8006786:	d80c      	bhi.n	80067a2 <__multiply+0x78>
 8006788:	2e00      	cmp	r6, #0
 800678a:	dd03      	ble.n	8006794 <__multiply+0x6a>
 800678c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006790:	2b00      	cmp	r3, #0
 8006792:	d05d      	beq.n	8006850 <__multiply+0x126>
 8006794:	6106      	str	r6, [r0, #16]
 8006796:	b003      	add	sp, #12
 8006798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679c:	f843 2b04 	str.w	r2, [r3], #4
 80067a0:	e7e3      	b.n	800676a <__multiply+0x40>
 80067a2:	f8b2 b000 	ldrh.w	fp, [r2]
 80067a6:	f1bb 0f00 	cmp.w	fp, #0
 80067aa:	d023      	beq.n	80067f4 <__multiply+0xca>
 80067ac:	4689      	mov	r9, r1
 80067ae:	46ac      	mov	ip, r5
 80067b0:	f04f 0800 	mov.w	r8, #0
 80067b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80067b8:	f8dc a000 	ldr.w	sl, [ip]
 80067bc:	b2a3      	uxth	r3, r4
 80067be:	fa1f fa8a 	uxth.w	sl, sl
 80067c2:	fb0b a303 	mla	r3, fp, r3, sl
 80067c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067ca:	f8dc 4000 	ldr.w	r4, [ip]
 80067ce:	4443      	add	r3, r8
 80067d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067d4:	fb0b 840a 	mla	r4, fp, sl, r8
 80067d8:	46e2      	mov	sl, ip
 80067da:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80067de:	b29b      	uxth	r3, r3
 80067e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80067e4:	454f      	cmp	r7, r9
 80067e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067ea:	f84a 3b04 	str.w	r3, [sl], #4
 80067ee:	d82b      	bhi.n	8006848 <__multiply+0x11e>
 80067f0:	f8cc 8004 	str.w	r8, [ip, #4]
 80067f4:	9b01      	ldr	r3, [sp, #4]
 80067f6:	3204      	adds	r2, #4
 80067f8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80067fc:	f1ba 0f00 	cmp.w	sl, #0
 8006800:	d020      	beq.n	8006844 <__multiply+0x11a>
 8006802:	4689      	mov	r9, r1
 8006804:	46a8      	mov	r8, r5
 8006806:	f04f 0b00 	mov.w	fp, #0
 800680a:	682b      	ldr	r3, [r5, #0]
 800680c:	f8b9 c000 	ldrh.w	ip, [r9]
 8006810:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006814:	b29b      	uxth	r3, r3
 8006816:	fb0a 440c 	mla	r4, sl, ip, r4
 800681a:	46c4      	mov	ip, r8
 800681c:	445c      	add	r4, fp
 800681e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006822:	f84c 3b04 	str.w	r3, [ip], #4
 8006826:	f859 3b04 	ldr.w	r3, [r9], #4
 800682a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800682e:	0c1b      	lsrs	r3, r3, #16
 8006830:	fb0a b303 	mla	r3, sl, r3, fp
 8006834:	454f      	cmp	r7, r9
 8006836:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800683a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800683e:	d805      	bhi.n	800684c <__multiply+0x122>
 8006840:	f8c8 3004 	str.w	r3, [r8, #4]
 8006844:	3504      	adds	r5, #4
 8006846:	e79b      	b.n	8006780 <__multiply+0x56>
 8006848:	46d4      	mov	ip, sl
 800684a:	e7b3      	b.n	80067b4 <__multiply+0x8a>
 800684c:	46e0      	mov	r8, ip
 800684e:	e7dd      	b.n	800680c <__multiply+0xe2>
 8006850:	3e01      	subs	r6, #1
 8006852:	e799      	b.n	8006788 <__multiply+0x5e>

08006854 <__pow5mult>:
 8006854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006858:	4615      	mov	r5, r2
 800685a:	f012 0203 	ands.w	r2, r2, #3
 800685e:	4606      	mov	r6, r0
 8006860:	460f      	mov	r7, r1
 8006862:	d007      	beq.n	8006874 <__pow5mult+0x20>
 8006864:	4c21      	ldr	r4, [pc, #132]	; (80068ec <__pow5mult+0x98>)
 8006866:	3a01      	subs	r2, #1
 8006868:	2300      	movs	r3, #0
 800686a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800686e:	f7ff feca 	bl	8006606 <__multadd>
 8006872:	4607      	mov	r7, r0
 8006874:	10ad      	asrs	r5, r5, #2
 8006876:	d035      	beq.n	80068e4 <__pow5mult+0x90>
 8006878:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800687a:	b93c      	cbnz	r4, 800688c <__pow5mult+0x38>
 800687c:	2010      	movs	r0, #16
 800687e:	f7ff fe61 	bl	8006544 <malloc>
 8006882:	6270      	str	r0, [r6, #36]	; 0x24
 8006884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006888:	6004      	str	r4, [r0, #0]
 800688a:	60c4      	str	r4, [r0, #12]
 800688c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006894:	b94c      	cbnz	r4, 80068aa <__pow5mult+0x56>
 8006896:	f240 2171 	movw	r1, #625	; 0x271
 800689a:	4630      	mov	r0, r6
 800689c:	f7ff ff3c 	bl	8006718 <__i2b>
 80068a0:	2300      	movs	r3, #0
 80068a2:	4604      	mov	r4, r0
 80068a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80068a8:	6003      	str	r3, [r0, #0]
 80068aa:	f04f 0800 	mov.w	r8, #0
 80068ae:	07eb      	lsls	r3, r5, #31
 80068b0:	d50a      	bpl.n	80068c8 <__pow5mult+0x74>
 80068b2:	4639      	mov	r1, r7
 80068b4:	4622      	mov	r2, r4
 80068b6:	4630      	mov	r0, r6
 80068b8:	f7ff ff37 	bl	800672a <__multiply>
 80068bc:	4681      	mov	r9, r0
 80068be:	4639      	mov	r1, r7
 80068c0:	4630      	mov	r0, r6
 80068c2:	f7ff fe89 	bl	80065d8 <_Bfree>
 80068c6:	464f      	mov	r7, r9
 80068c8:	106d      	asrs	r5, r5, #1
 80068ca:	d00b      	beq.n	80068e4 <__pow5mult+0x90>
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	b938      	cbnz	r0, 80068e0 <__pow5mult+0x8c>
 80068d0:	4622      	mov	r2, r4
 80068d2:	4621      	mov	r1, r4
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7ff ff28 	bl	800672a <__multiply>
 80068da:	6020      	str	r0, [r4, #0]
 80068dc:	f8c0 8000 	str.w	r8, [r0]
 80068e0:	4604      	mov	r4, r0
 80068e2:	e7e4      	b.n	80068ae <__pow5mult+0x5a>
 80068e4:	4638      	mov	r0, r7
 80068e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ea:	bf00      	nop
 80068ec:	080073e0 	.word	0x080073e0

080068f0 <__lshift>:
 80068f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f4:	460c      	mov	r4, r1
 80068f6:	4607      	mov	r7, r0
 80068f8:	4616      	mov	r6, r2
 80068fa:	6923      	ldr	r3, [r4, #16]
 80068fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006900:	eb0a 0903 	add.w	r9, sl, r3
 8006904:	6849      	ldr	r1, [r1, #4]
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	f109 0501 	add.w	r5, r9, #1
 800690c:	42ab      	cmp	r3, r5
 800690e:	db32      	blt.n	8006976 <__lshift+0x86>
 8006910:	4638      	mov	r0, r7
 8006912:	f7ff fe2d 	bl	8006570 <_Balloc>
 8006916:	2300      	movs	r3, #0
 8006918:	4680      	mov	r8, r0
 800691a:	461a      	mov	r2, r3
 800691c:	f100 0114 	add.w	r1, r0, #20
 8006920:	4553      	cmp	r3, sl
 8006922:	db2b      	blt.n	800697c <__lshift+0x8c>
 8006924:	6920      	ldr	r0, [r4, #16]
 8006926:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800692a:	f104 0314 	add.w	r3, r4, #20
 800692e:	f016 021f 	ands.w	r2, r6, #31
 8006932:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006936:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800693a:	d025      	beq.n	8006988 <__lshift+0x98>
 800693c:	2000      	movs	r0, #0
 800693e:	f1c2 0e20 	rsb	lr, r2, #32
 8006942:	468a      	mov	sl, r1
 8006944:	681e      	ldr	r6, [r3, #0]
 8006946:	4096      	lsls	r6, r2
 8006948:	4330      	orrs	r0, r6
 800694a:	f84a 0b04 	str.w	r0, [sl], #4
 800694e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006952:	459c      	cmp	ip, r3
 8006954:	fa20 f00e 	lsr.w	r0, r0, lr
 8006958:	d814      	bhi.n	8006984 <__lshift+0x94>
 800695a:	6048      	str	r0, [r1, #4]
 800695c:	b108      	cbz	r0, 8006962 <__lshift+0x72>
 800695e:	f109 0502 	add.w	r5, r9, #2
 8006962:	3d01      	subs	r5, #1
 8006964:	4638      	mov	r0, r7
 8006966:	f8c8 5010 	str.w	r5, [r8, #16]
 800696a:	4621      	mov	r1, r4
 800696c:	f7ff fe34 	bl	80065d8 <_Bfree>
 8006970:	4640      	mov	r0, r8
 8006972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006976:	3101      	adds	r1, #1
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	e7c7      	b.n	800690c <__lshift+0x1c>
 800697c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006980:	3301      	adds	r3, #1
 8006982:	e7cd      	b.n	8006920 <__lshift+0x30>
 8006984:	4651      	mov	r1, sl
 8006986:	e7dc      	b.n	8006942 <__lshift+0x52>
 8006988:	3904      	subs	r1, #4
 800698a:	f853 2b04 	ldr.w	r2, [r3], #4
 800698e:	459c      	cmp	ip, r3
 8006990:	f841 2f04 	str.w	r2, [r1, #4]!
 8006994:	d8f9      	bhi.n	800698a <__lshift+0x9a>
 8006996:	e7e4      	b.n	8006962 <__lshift+0x72>

08006998 <__mcmp>:
 8006998:	6903      	ldr	r3, [r0, #16]
 800699a:	690a      	ldr	r2, [r1, #16]
 800699c:	b530      	push	{r4, r5, lr}
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	d10c      	bne.n	80069bc <__mcmp+0x24>
 80069a2:	0092      	lsls	r2, r2, #2
 80069a4:	3014      	adds	r0, #20
 80069a6:	3114      	adds	r1, #20
 80069a8:	1884      	adds	r4, r0, r2
 80069aa:	4411      	add	r1, r2
 80069ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069b4:	4295      	cmp	r5, r2
 80069b6:	d003      	beq.n	80069c0 <__mcmp+0x28>
 80069b8:	d305      	bcc.n	80069c6 <__mcmp+0x2e>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4618      	mov	r0, r3
 80069be:	bd30      	pop	{r4, r5, pc}
 80069c0:	42a0      	cmp	r0, r4
 80069c2:	d3f3      	bcc.n	80069ac <__mcmp+0x14>
 80069c4:	e7fa      	b.n	80069bc <__mcmp+0x24>
 80069c6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ca:	e7f7      	b.n	80069bc <__mcmp+0x24>

080069cc <__mdiff>:
 80069cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d0:	460d      	mov	r5, r1
 80069d2:	4607      	mov	r7, r0
 80069d4:	4611      	mov	r1, r2
 80069d6:	4628      	mov	r0, r5
 80069d8:	4614      	mov	r4, r2
 80069da:	f7ff ffdd 	bl	8006998 <__mcmp>
 80069de:	1e06      	subs	r6, r0, #0
 80069e0:	d108      	bne.n	80069f4 <__mdiff+0x28>
 80069e2:	4631      	mov	r1, r6
 80069e4:	4638      	mov	r0, r7
 80069e6:	f7ff fdc3 	bl	8006570 <_Balloc>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80069f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f4:	bfa4      	itt	ge
 80069f6:	4623      	movge	r3, r4
 80069f8:	462c      	movge	r4, r5
 80069fa:	4638      	mov	r0, r7
 80069fc:	6861      	ldr	r1, [r4, #4]
 80069fe:	bfa6      	itte	ge
 8006a00:	461d      	movge	r5, r3
 8006a02:	2600      	movge	r6, #0
 8006a04:	2601      	movlt	r6, #1
 8006a06:	f7ff fdb3 	bl	8006570 <_Balloc>
 8006a0a:	f04f 0e00 	mov.w	lr, #0
 8006a0e:	60c6      	str	r6, [r0, #12]
 8006a10:	692b      	ldr	r3, [r5, #16]
 8006a12:	6926      	ldr	r6, [r4, #16]
 8006a14:	f104 0214 	add.w	r2, r4, #20
 8006a18:	f105 0914 	add.w	r9, r5, #20
 8006a1c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a20:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a24:	f100 0114 	add.w	r1, r0, #20
 8006a28:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a2c:	f859 5b04 	ldr.w	r5, [r9], #4
 8006a30:	fa1f f38a 	uxth.w	r3, sl
 8006a34:	4473      	add	r3, lr
 8006a36:	b2ac      	uxth	r4, r5
 8006a38:	1b1b      	subs	r3, r3, r4
 8006a3a:	0c2c      	lsrs	r4, r5, #16
 8006a3c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006a40:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006a4a:	45c8      	cmp	r8, r9
 8006a4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006a50:	4694      	mov	ip, r2
 8006a52:	f841 4b04 	str.w	r4, [r1], #4
 8006a56:	d8e7      	bhi.n	8006a28 <__mdiff+0x5c>
 8006a58:	45bc      	cmp	ip, r7
 8006a5a:	d304      	bcc.n	8006a66 <__mdiff+0x9a>
 8006a5c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a60:	b183      	cbz	r3, 8006a84 <__mdiff+0xb8>
 8006a62:	6106      	str	r6, [r0, #16]
 8006a64:	e7c4      	b.n	80069f0 <__mdiff+0x24>
 8006a66:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006a6a:	b2a2      	uxth	r2, r4
 8006a6c:	4472      	add	r2, lr
 8006a6e:	1413      	asrs	r3, r2, #16
 8006a70:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a74:	b292      	uxth	r2, r2
 8006a76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a7a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a7e:	f841 2b04 	str.w	r2, [r1], #4
 8006a82:	e7e9      	b.n	8006a58 <__mdiff+0x8c>
 8006a84:	3e01      	subs	r6, #1
 8006a86:	e7e9      	b.n	8006a5c <__mdiff+0x90>

08006a88 <__d2b>:
 8006a88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a8c:	461c      	mov	r4, r3
 8006a8e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006a92:	2101      	movs	r1, #1
 8006a94:	4690      	mov	r8, r2
 8006a96:	f7ff fd6b 	bl	8006570 <_Balloc>
 8006a9a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006a9e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	bb34      	cbnz	r4, 8006af4 <__d2b+0x6c>
 8006aa6:	9201      	str	r2, [sp, #4]
 8006aa8:	f1b8 0200 	subs.w	r2, r8, #0
 8006aac:	d027      	beq.n	8006afe <__d2b+0x76>
 8006aae:	a802      	add	r0, sp, #8
 8006ab0:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006ab4:	f7ff fe01 	bl	80066ba <__lo0bits>
 8006ab8:	9900      	ldr	r1, [sp, #0]
 8006aba:	b1f0      	cbz	r0, 8006afa <__d2b+0x72>
 8006abc:	9a01      	ldr	r2, [sp, #4]
 8006abe:	f1c0 0320 	rsb	r3, r0, #32
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	40c2      	lsrs	r2, r0
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	9201      	str	r2, [sp, #4]
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bf14      	ite	ne
 8006ad4:	2102      	movne	r1, #2
 8006ad6:	2101      	moveq	r1, #1
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	6139      	str	r1, [r7, #16]
 8006adc:	b1c4      	cbz	r4, 8006b10 <__d2b+0x88>
 8006ade:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ae2:	4404      	add	r4, r0
 8006ae4:	6034      	str	r4, [r6, #0]
 8006ae6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006aea:	6028      	str	r0, [r5, #0]
 8006aec:	4638      	mov	r0, r7
 8006aee:	b002      	add	sp, #8
 8006af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006af8:	e7d5      	b.n	8006aa6 <__d2b+0x1e>
 8006afa:	6179      	str	r1, [r7, #20]
 8006afc:	e7e7      	b.n	8006ace <__d2b+0x46>
 8006afe:	a801      	add	r0, sp, #4
 8006b00:	f7ff fddb 	bl	80066ba <__lo0bits>
 8006b04:	2101      	movs	r1, #1
 8006b06:	9b01      	ldr	r3, [sp, #4]
 8006b08:	6139      	str	r1, [r7, #16]
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	3020      	adds	r0, #32
 8006b0e:	e7e5      	b.n	8006adc <__d2b+0x54>
 8006b10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b14:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b18:	6030      	str	r0, [r6, #0]
 8006b1a:	6918      	ldr	r0, [r3, #16]
 8006b1c:	f7ff fdae 	bl	800667c <__hi0bits>
 8006b20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b24:	e7e1      	b.n	8006aea <__d2b+0x62>

08006b26 <_calloc_r>:
 8006b26:	b538      	push	{r3, r4, r5, lr}
 8006b28:	fb02 f401 	mul.w	r4, r2, r1
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	f000 f855 	bl	8006bdc <_malloc_r>
 8006b32:	4605      	mov	r5, r0
 8006b34:	b118      	cbz	r0, 8006b3e <_calloc_r+0x18>
 8006b36:	4622      	mov	r2, r4
 8006b38:	2100      	movs	r1, #0
 8006b3a:	f7fe fa3c 	bl	8004fb6 <memset>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	bd38      	pop	{r3, r4, r5, pc}
	...

08006b44 <_free_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4605      	mov	r5, r0
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	d043      	beq.n	8006bd4 <_free_r+0x90>
 8006b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b50:	1f0c      	subs	r4, r1, #4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	bfb8      	it	lt
 8006b56:	18e4      	addlt	r4, r4, r3
 8006b58:	f000 fa27 	bl	8006faa <__malloc_lock>
 8006b5c:	4a1e      	ldr	r2, [pc, #120]	; (8006bd8 <_free_r+0x94>)
 8006b5e:	6813      	ldr	r3, [r2, #0]
 8006b60:	4610      	mov	r0, r2
 8006b62:	b933      	cbnz	r3, 8006b72 <_free_r+0x2e>
 8006b64:	6063      	str	r3, [r4, #4]
 8006b66:	6014      	str	r4, [r2, #0]
 8006b68:	4628      	mov	r0, r5
 8006b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b6e:	f000 ba1d 	b.w	8006fac <__malloc_unlock>
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	d90b      	bls.n	8006b8e <_free_r+0x4a>
 8006b76:	6821      	ldr	r1, [r4, #0]
 8006b78:	1862      	adds	r2, r4, r1
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	bf01      	itttt	eq
 8006b7e:	681a      	ldreq	r2, [r3, #0]
 8006b80:	685b      	ldreq	r3, [r3, #4]
 8006b82:	1852      	addeq	r2, r2, r1
 8006b84:	6022      	streq	r2, [r4, #0]
 8006b86:	6063      	str	r3, [r4, #4]
 8006b88:	6004      	str	r4, [r0, #0]
 8006b8a:	e7ed      	b.n	8006b68 <_free_r+0x24>
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	b10a      	cbz	r2, 8006b96 <_free_r+0x52>
 8006b92:	42a2      	cmp	r2, r4
 8006b94:	d9fa      	bls.n	8006b8c <_free_r+0x48>
 8006b96:	6819      	ldr	r1, [r3, #0]
 8006b98:	1858      	adds	r0, r3, r1
 8006b9a:	42a0      	cmp	r0, r4
 8006b9c:	d10b      	bne.n	8006bb6 <_free_r+0x72>
 8006b9e:	6820      	ldr	r0, [r4, #0]
 8006ba0:	4401      	add	r1, r0
 8006ba2:	1858      	adds	r0, r3, r1
 8006ba4:	4282      	cmp	r2, r0
 8006ba6:	6019      	str	r1, [r3, #0]
 8006ba8:	d1de      	bne.n	8006b68 <_free_r+0x24>
 8006baa:	6810      	ldr	r0, [r2, #0]
 8006bac:	6852      	ldr	r2, [r2, #4]
 8006bae:	4401      	add	r1, r0
 8006bb0:	6019      	str	r1, [r3, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
 8006bb4:	e7d8      	b.n	8006b68 <_free_r+0x24>
 8006bb6:	d902      	bls.n	8006bbe <_free_r+0x7a>
 8006bb8:	230c      	movs	r3, #12
 8006bba:	602b      	str	r3, [r5, #0]
 8006bbc:	e7d4      	b.n	8006b68 <_free_r+0x24>
 8006bbe:	6820      	ldr	r0, [r4, #0]
 8006bc0:	1821      	adds	r1, r4, r0
 8006bc2:	428a      	cmp	r2, r1
 8006bc4:	bf01      	itttt	eq
 8006bc6:	6811      	ldreq	r1, [r2, #0]
 8006bc8:	6852      	ldreq	r2, [r2, #4]
 8006bca:	1809      	addeq	r1, r1, r0
 8006bcc:	6021      	streq	r1, [r4, #0]
 8006bce:	6062      	str	r2, [r4, #4]
 8006bd0:	605c      	str	r4, [r3, #4]
 8006bd2:	e7c9      	b.n	8006b68 <_free_r+0x24>
 8006bd4:	bd38      	pop	{r3, r4, r5, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000400 	.word	0x20000400

08006bdc <_malloc_r>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	1ccd      	adds	r5, r1, #3
 8006be0:	f025 0503 	bic.w	r5, r5, #3
 8006be4:	3508      	adds	r5, #8
 8006be6:	2d0c      	cmp	r5, #12
 8006be8:	bf38      	it	cc
 8006bea:	250c      	movcc	r5, #12
 8006bec:	2d00      	cmp	r5, #0
 8006bee:	4606      	mov	r6, r0
 8006bf0:	db01      	blt.n	8006bf6 <_malloc_r+0x1a>
 8006bf2:	42a9      	cmp	r1, r5
 8006bf4:	d903      	bls.n	8006bfe <_malloc_r+0x22>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	6033      	str	r3, [r6, #0]
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	f000 f9d4 	bl	8006faa <__malloc_lock>
 8006c02:	4a21      	ldr	r2, [pc, #132]	; (8006c88 <_malloc_r+0xac>)
 8006c04:	6814      	ldr	r4, [r2, #0]
 8006c06:	4621      	mov	r1, r4
 8006c08:	b991      	cbnz	r1, 8006c30 <_malloc_r+0x54>
 8006c0a:	4c20      	ldr	r4, [pc, #128]	; (8006c8c <_malloc_r+0xb0>)
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	b91b      	cbnz	r3, 8006c18 <_malloc_r+0x3c>
 8006c10:	4630      	mov	r0, r6
 8006c12:	f000 f98f 	bl	8006f34 <_sbrk_r>
 8006c16:	6020      	str	r0, [r4, #0]
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f000 f98a 	bl	8006f34 <_sbrk_r>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d124      	bne.n	8006c6e <_malloc_r+0x92>
 8006c24:	230c      	movs	r3, #12
 8006c26:	4630      	mov	r0, r6
 8006c28:	6033      	str	r3, [r6, #0]
 8006c2a:	f000 f9bf 	bl	8006fac <__malloc_unlock>
 8006c2e:	e7e4      	b.n	8006bfa <_malloc_r+0x1e>
 8006c30:	680b      	ldr	r3, [r1, #0]
 8006c32:	1b5b      	subs	r3, r3, r5
 8006c34:	d418      	bmi.n	8006c68 <_malloc_r+0x8c>
 8006c36:	2b0b      	cmp	r3, #11
 8006c38:	d90f      	bls.n	8006c5a <_malloc_r+0x7e>
 8006c3a:	600b      	str	r3, [r1, #0]
 8006c3c:	18cc      	adds	r4, r1, r3
 8006c3e:	50cd      	str	r5, [r1, r3]
 8006c40:	4630      	mov	r0, r6
 8006c42:	f000 f9b3 	bl	8006fac <__malloc_unlock>
 8006c46:	f104 000b 	add.w	r0, r4, #11
 8006c4a:	1d23      	adds	r3, r4, #4
 8006c4c:	f020 0007 	bic.w	r0, r0, #7
 8006c50:	1ac3      	subs	r3, r0, r3
 8006c52:	d0d3      	beq.n	8006bfc <_malloc_r+0x20>
 8006c54:	425a      	negs	r2, r3
 8006c56:	50e2      	str	r2, [r4, r3]
 8006c58:	e7d0      	b.n	8006bfc <_malloc_r+0x20>
 8006c5a:	684b      	ldr	r3, [r1, #4]
 8006c5c:	428c      	cmp	r4, r1
 8006c5e:	bf16      	itet	ne
 8006c60:	6063      	strne	r3, [r4, #4]
 8006c62:	6013      	streq	r3, [r2, #0]
 8006c64:	460c      	movne	r4, r1
 8006c66:	e7eb      	b.n	8006c40 <_malloc_r+0x64>
 8006c68:	460c      	mov	r4, r1
 8006c6a:	6849      	ldr	r1, [r1, #4]
 8006c6c:	e7cc      	b.n	8006c08 <_malloc_r+0x2c>
 8006c6e:	1cc4      	adds	r4, r0, #3
 8006c70:	f024 0403 	bic.w	r4, r4, #3
 8006c74:	42a0      	cmp	r0, r4
 8006c76:	d005      	beq.n	8006c84 <_malloc_r+0xa8>
 8006c78:	1a21      	subs	r1, r4, r0
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	f000 f95a 	bl	8006f34 <_sbrk_r>
 8006c80:	3001      	adds	r0, #1
 8006c82:	d0cf      	beq.n	8006c24 <_malloc_r+0x48>
 8006c84:	6025      	str	r5, [r4, #0]
 8006c86:	e7db      	b.n	8006c40 <_malloc_r+0x64>
 8006c88:	20000400 	.word	0x20000400
 8006c8c:	20000404 	.word	0x20000404

08006c90 <__ssputs_r>:
 8006c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c94:	688e      	ldr	r6, [r1, #8]
 8006c96:	4682      	mov	sl, r0
 8006c98:	429e      	cmp	r6, r3
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	4690      	mov	r8, r2
 8006c9e:	4699      	mov	r9, r3
 8006ca0:	d837      	bhi.n	8006d12 <__ssputs_r+0x82>
 8006ca2:	898a      	ldrh	r2, [r1, #12]
 8006ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ca8:	d031      	beq.n	8006d0e <__ssputs_r+0x7e>
 8006caa:	2302      	movs	r3, #2
 8006cac:	6825      	ldr	r5, [r4, #0]
 8006cae:	6909      	ldr	r1, [r1, #16]
 8006cb0:	1a6f      	subs	r7, r5, r1
 8006cb2:	6965      	ldr	r5, [r4, #20]
 8006cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8006cbc:	f109 0301 	add.w	r3, r9, #1
 8006cc0:	443b      	add	r3, r7
 8006cc2:	429d      	cmp	r5, r3
 8006cc4:	bf38      	it	cc
 8006cc6:	461d      	movcc	r5, r3
 8006cc8:	0553      	lsls	r3, r2, #21
 8006cca:	d530      	bpl.n	8006d2e <__ssputs_r+0x9e>
 8006ccc:	4629      	mov	r1, r5
 8006cce:	f7ff ff85 	bl	8006bdc <_malloc_r>
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	b950      	cbnz	r0, 8006cec <__ssputs_r+0x5c>
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	f8ca 3000 	str.w	r3, [sl]
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ce6:	81a3      	strh	r3, [r4, #12]
 8006ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cec:	463a      	mov	r2, r7
 8006cee:	6921      	ldr	r1, [r4, #16]
 8006cf0:	f7fe f956 	bl	8004fa0 <memcpy>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	6126      	str	r6, [r4, #16]
 8006d02:	443e      	add	r6, r7
 8006d04:	6026      	str	r6, [r4, #0]
 8006d06:	464e      	mov	r6, r9
 8006d08:	6165      	str	r5, [r4, #20]
 8006d0a:	1bed      	subs	r5, r5, r7
 8006d0c:	60a5      	str	r5, [r4, #8]
 8006d0e:	454e      	cmp	r6, r9
 8006d10:	d900      	bls.n	8006d14 <__ssputs_r+0x84>
 8006d12:	464e      	mov	r6, r9
 8006d14:	4632      	mov	r2, r6
 8006d16:	4641      	mov	r1, r8
 8006d18:	6820      	ldr	r0, [r4, #0]
 8006d1a:	f000 f92d 	bl	8006f78 <memmove>
 8006d1e:	68a3      	ldr	r3, [r4, #8]
 8006d20:	2000      	movs	r0, #0
 8006d22:	1b9b      	subs	r3, r3, r6
 8006d24:	60a3      	str	r3, [r4, #8]
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	441e      	add	r6, r3
 8006d2a:	6026      	str	r6, [r4, #0]
 8006d2c:	e7dc      	b.n	8006ce8 <__ssputs_r+0x58>
 8006d2e:	462a      	mov	r2, r5
 8006d30:	f000 f93d 	bl	8006fae <_realloc_r>
 8006d34:	4606      	mov	r6, r0
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d1e2      	bne.n	8006d00 <__ssputs_r+0x70>
 8006d3a:	6921      	ldr	r1, [r4, #16]
 8006d3c:	4650      	mov	r0, sl
 8006d3e:	f7ff ff01 	bl	8006b44 <_free_r>
 8006d42:	e7c8      	b.n	8006cd6 <__ssputs_r+0x46>

08006d44 <_svfiprintf_r>:
 8006d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d48:	461d      	mov	r5, r3
 8006d4a:	898b      	ldrh	r3, [r1, #12]
 8006d4c:	b09d      	sub	sp, #116	; 0x74
 8006d4e:	061f      	lsls	r7, r3, #24
 8006d50:	4680      	mov	r8, r0
 8006d52:	460c      	mov	r4, r1
 8006d54:	4616      	mov	r6, r2
 8006d56:	d50f      	bpl.n	8006d78 <_svfiprintf_r+0x34>
 8006d58:	690b      	ldr	r3, [r1, #16]
 8006d5a:	b96b      	cbnz	r3, 8006d78 <_svfiprintf_r+0x34>
 8006d5c:	2140      	movs	r1, #64	; 0x40
 8006d5e:	f7ff ff3d 	bl	8006bdc <_malloc_r>
 8006d62:	6020      	str	r0, [r4, #0]
 8006d64:	6120      	str	r0, [r4, #16]
 8006d66:	b928      	cbnz	r0, 8006d74 <_svfiprintf_r+0x30>
 8006d68:	230c      	movs	r3, #12
 8006d6a:	f8c8 3000 	str.w	r3, [r8]
 8006d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d72:	e0c8      	b.n	8006f06 <_svfiprintf_r+0x1c2>
 8006d74:	2340      	movs	r3, #64	; 0x40
 8006d76:	6163      	str	r3, [r4, #20]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d7c:	2320      	movs	r3, #32
 8006d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d82:	2330      	movs	r3, #48	; 0x30
 8006d84:	f04f 0b01 	mov.w	fp, #1
 8006d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d8c:	9503      	str	r5, [sp, #12]
 8006d8e:	4637      	mov	r7, r6
 8006d90:	463d      	mov	r5, r7
 8006d92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d96:	b10b      	cbz	r3, 8006d9c <_svfiprintf_r+0x58>
 8006d98:	2b25      	cmp	r3, #37	; 0x25
 8006d9a:	d13e      	bne.n	8006e1a <_svfiprintf_r+0xd6>
 8006d9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006da0:	d00b      	beq.n	8006dba <_svfiprintf_r+0x76>
 8006da2:	4653      	mov	r3, sl
 8006da4:	4632      	mov	r2, r6
 8006da6:	4621      	mov	r1, r4
 8006da8:	4640      	mov	r0, r8
 8006daa:	f7ff ff71 	bl	8006c90 <__ssputs_r>
 8006dae:	3001      	adds	r0, #1
 8006db0:	f000 80a4 	beq.w	8006efc <_svfiprintf_r+0x1b8>
 8006db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db6:	4453      	add	r3, sl
 8006db8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dba:	783b      	ldrb	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 809d 	beq.w	8006efc <_svfiprintf_r+0x1b8>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	9307      	str	r3, [sp, #28]
 8006dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8006dd6:	462f      	mov	r7, r5
 8006dd8:	2205      	movs	r2, #5
 8006dda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006dde:	4850      	ldr	r0, [pc, #320]	; (8006f20 <_svfiprintf_r+0x1dc>)
 8006de0:	f7ff fbb8 	bl	8006554 <memchr>
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	b9d0      	cbnz	r0, 8006e1e <_svfiprintf_r+0xda>
 8006de8:	06d9      	lsls	r1, r3, #27
 8006dea:	bf44      	itt	mi
 8006dec:	2220      	movmi	r2, #32
 8006dee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006df2:	071a      	lsls	r2, r3, #28
 8006df4:	bf44      	itt	mi
 8006df6:	222b      	movmi	r2, #43	; 0x2b
 8006df8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dfc:	782a      	ldrb	r2, [r5, #0]
 8006dfe:	2a2a      	cmp	r2, #42	; 0x2a
 8006e00:	d015      	beq.n	8006e2e <_svfiprintf_r+0xea>
 8006e02:	462f      	mov	r7, r5
 8006e04:	2000      	movs	r0, #0
 8006e06:	250a      	movs	r5, #10
 8006e08:	9a07      	ldr	r2, [sp, #28]
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e10:	3b30      	subs	r3, #48	; 0x30
 8006e12:	2b09      	cmp	r3, #9
 8006e14:	d94d      	bls.n	8006eb2 <_svfiprintf_r+0x16e>
 8006e16:	b1b8      	cbz	r0, 8006e48 <_svfiprintf_r+0x104>
 8006e18:	e00f      	b.n	8006e3a <_svfiprintf_r+0xf6>
 8006e1a:	462f      	mov	r7, r5
 8006e1c:	e7b8      	b.n	8006d90 <_svfiprintf_r+0x4c>
 8006e1e:	4a40      	ldr	r2, [pc, #256]	; (8006f20 <_svfiprintf_r+0x1dc>)
 8006e20:	463d      	mov	r5, r7
 8006e22:	1a80      	subs	r0, r0, r2
 8006e24:	fa0b f000 	lsl.w	r0, fp, r0
 8006e28:	4318      	orrs	r0, r3
 8006e2a:	9004      	str	r0, [sp, #16]
 8006e2c:	e7d3      	b.n	8006dd6 <_svfiprintf_r+0x92>
 8006e2e:	9a03      	ldr	r2, [sp, #12]
 8006e30:	1d11      	adds	r1, r2, #4
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	9103      	str	r1, [sp, #12]
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	db01      	blt.n	8006e3e <_svfiprintf_r+0xfa>
 8006e3a:	9207      	str	r2, [sp, #28]
 8006e3c:	e004      	b.n	8006e48 <_svfiprintf_r+0x104>
 8006e3e:	4252      	negs	r2, r2
 8006e40:	f043 0302 	orr.w	r3, r3, #2
 8006e44:	9207      	str	r2, [sp, #28]
 8006e46:	9304      	str	r3, [sp, #16]
 8006e48:	783b      	ldrb	r3, [r7, #0]
 8006e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e4c:	d10c      	bne.n	8006e68 <_svfiprintf_r+0x124>
 8006e4e:	787b      	ldrb	r3, [r7, #1]
 8006e50:	2b2a      	cmp	r3, #42	; 0x2a
 8006e52:	d133      	bne.n	8006ebc <_svfiprintf_r+0x178>
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	3702      	adds	r7, #2
 8006e58:	1d1a      	adds	r2, r3, #4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	9203      	str	r2, [sp, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfb8      	it	lt
 8006e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e66:	9305      	str	r3, [sp, #20]
 8006e68:	4d2e      	ldr	r5, [pc, #184]	; (8006f24 <_svfiprintf_r+0x1e0>)
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	7839      	ldrb	r1, [r7, #0]
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f7ff fb70 	bl	8006554 <memchr>
 8006e74:	b138      	cbz	r0, 8006e86 <_svfiprintf_r+0x142>
 8006e76:	2340      	movs	r3, #64	; 0x40
 8006e78:	1b40      	subs	r0, r0, r5
 8006e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e7e:	9b04      	ldr	r3, [sp, #16]
 8006e80:	3701      	adds	r7, #1
 8006e82:	4303      	orrs	r3, r0
 8006e84:	9304      	str	r3, [sp, #16]
 8006e86:	7839      	ldrb	r1, [r7, #0]
 8006e88:	2206      	movs	r2, #6
 8006e8a:	4827      	ldr	r0, [pc, #156]	; (8006f28 <_svfiprintf_r+0x1e4>)
 8006e8c:	1c7e      	adds	r6, r7, #1
 8006e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e92:	f7ff fb5f 	bl	8006554 <memchr>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d038      	beq.n	8006f0c <_svfiprintf_r+0x1c8>
 8006e9a:	4b24      	ldr	r3, [pc, #144]	; (8006f2c <_svfiprintf_r+0x1e8>)
 8006e9c:	bb13      	cbnz	r3, 8006ee4 <_svfiprintf_r+0x1a0>
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	3307      	adds	r3, #7
 8006ea2:	f023 0307 	bic.w	r3, r3, #7
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	9303      	str	r3, [sp, #12]
 8006eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eac:	444b      	add	r3, r9
 8006eae:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb0:	e76d      	b.n	8006d8e <_svfiprintf_r+0x4a>
 8006eb2:	fb05 3202 	mla	r2, r5, r2, r3
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	460f      	mov	r7, r1
 8006eba:	e7a6      	b.n	8006e0a <_svfiprintf_r+0xc6>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	250a      	movs	r5, #10
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	3701      	adds	r7, #1
 8006ec4:	9305      	str	r3, [sp, #20]
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ecc:	3a30      	subs	r2, #48	; 0x30
 8006ece:	2a09      	cmp	r2, #9
 8006ed0:	d903      	bls.n	8006eda <_svfiprintf_r+0x196>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0c8      	beq.n	8006e68 <_svfiprintf_r+0x124>
 8006ed6:	9105      	str	r1, [sp, #20]
 8006ed8:	e7c6      	b.n	8006e68 <_svfiprintf_r+0x124>
 8006eda:	fb05 2101 	mla	r1, r5, r1, r2
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4607      	mov	r7, r0
 8006ee2:	e7f0      	b.n	8006ec6 <_svfiprintf_r+0x182>
 8006ee4:	ab03      	add	r3, sp, #12
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <_svfiprintf_r+0x1ec>)
 8006eec:	a904      	add	r1, sp, #16
 8006eee:	4640      	mov	r0, r8
 8006ef0:	f7fe f8fa 	bl	80050e8 <_printf_float>
 8006ef4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006ef8:	4681      	mov	r9, r0
 8006efa:	d1d6      	bne.n	8006eaa <_svfiprintf_r+0x166>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	065b      	lsls	r3, r3, #25
 8006f00:	f53f af35 	bmi.w	8006d6e <_svfiprintf_r+0x2a>
 8006f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f06:	b01d      	add	sp, #116	; 0x74
 8006f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0c:	ab03      	add	r3, sp, #12
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	4622      	mov	r2, r4
 8006f12:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <_svfiprintf_r+0x1ec>)
 8006f14:	a904      	add	r1, sp, #16
 8006f16:	4640      	mov	r0, r8
 8006f18:	f7fe fb92 	bl	8005640 <_printf_i>
 8006f1c:	e7ea      	b.n	8006ef4 <_svfiprintf_r+0x1b0>
 8006f1e:	bf00      	nop
 8006f20:	080073ec 	.word	0x080073ec
 8006f24:	080073f2 	.word	0x080073f2
 8006f28:	080073f6 	.word	0x080073f6
 8006f2c:	080050e9 	.word	0x080050e9
 8006f30:	08006c91 	.word	0x08006c91

08006f34 <_sbrk_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	2300      	movs	r3, #0
 8006f38:	4c05      	ldr	r4, [pc, #20]	; (8006f50 <_sbrk_r+0x1c>)
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	f7fb f8b0 	bl	80020a4 <_sbrk>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_sbrk_r+0x1a>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_sbrk_r+0x1a>
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	20000598 	.word	0x20000598

08006f54 <__ascii_mbtowc>:
 8006f54:	b082      	sub	sp, #8
 8006f56:	b901      	cbnz	r1, 8006f5a <__ascii_mbtowc+0x6>
 8006f58:	a901      	add	r1, sp, #4
 8006f5a:	b142      	cbz	r2, 8006f6e <__ascii_mbtowc+0x1a>
 8006f5c:	b14b      	cbz	r3, 8006f72 <__ascii_mbtowc+0x1e>
 8006f5e:	7813      	ldrb	r3, [r2, #0]
 8006f60:	600b      	str	r3, [r1, #0]
 8006f62:	7812      	ldrb	r2, [r2, #0]
 8006f64:	1c10      	adds	r0, r2, #0
 8006f66:	bf18      	it	ne
 8006f68:	2001      	movne	r0, #1
 8006f6a:	b002      	add	sp, #8
 8006f6c:	4770      	bx	lr
 8006f6e:	4610      	mov	r0, r2
 8006f70:	e7fb      	b.n	8006f6a <__ascii_mbtowc+0x16>
 8006f72:	f06f 0001 	mvn.w	r0, #1
 8006f76:	e7f8      	b.n	8006f6a <__ascii_mbtowc+0x16>

08006f78 <memmove>:
 8006f78:	4288      	cmp	r0, r1
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	eb01 0302 	add.w	r3, r1, r2
 8006f80:	d807      	bhi.n	8006f92 <memmove+0x1a>
 8006f82:	1e42      	subs	r2, r0, #1
 8006f84:	4299      	cmp	r1, r3
 8006f86:	d00a      	beq.n	8006f9e <memmove+0x26>
 8006f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f90:	e7f8      	b.n	8006f84 <memmove+0xc>
 8006f92:	4283      	cmp	r3, r0
 8006f94:	d9f5      	bls.n	8006f82 <memmove+0xa>
 8006f96:	1881      	adds	r1, r0, r2
 8006f98:	1ad2      	subs	r2, r2, r3
 8006f9a:	42d3      	cmn	r3, r2
 8006f9c:	d100      	bne.n	8006fa0 <memmove+0x28>
 8006f9e:	bd10      	pop	{r4, pc}
 8006fa0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fa4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006fa8:	e7f7      	b.n	8006f9a <memmove+0x22>

08006faa <__malloc_lock>:
 8006faa:	4770      	bx	lr

08006fac <__malloc_unlock>:
 8006fac:	4770      	bx	lr

08006fae <_realloc_r>:
 8006fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb0:	4607      	mov	r7, r0
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	460e      	mov	r6, r1
 8006fb6:	b921      	cbnz	r1, 8006fc2 <_realloc_r+0x14>
 8006fb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	f7ff be0d 	b.w	8006bdc <_malloc_r>
 8006fc2:	b922      	cbnz	r2, 8006fce <_realloc_r+0x20>
 8006fc4:	f7ff fdbe 	bl	8006b44 <_free_r>
 8006fc8:	4625      	mov	r5, r4
 8006fca:	4628      	mov	r0, r5
 8006fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fce:	f000 f821 	bl	8007014 <_malloc_usable_size_r>
 8006fd2:	42a0      	cmp	r0, r4
 8006fd4:	d20f      	bcs.n	8006ff6 <_realloc_r+0x48>
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f7ff fdff 	bl	8006bdc <_malloc_r>
 8006fde:	4605      	mov	r5, r0
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d0f2      	beq.n	8006fca <_realloc_r+0x1c>
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	f7fd ffda 	bl	8004fa0 <memcpy>
 8006fec:	4631      	mov	r1, r6
 8006fee:	4638      	mov	r0, r7
 8006ff0:	f7ff fda8 	bl	8006b44 <_free_r>
 8006ff4:	e7e9      	b.n	8006fca <_realloc_r+0x1c>
 8006ff6:	4635      	mov	r5, r6
 8006ff8:	e7e7      	b.n	8006fca <_realloc_r+0x1c>

08006ffa <__ascii_wctomb>:
 8006ffa:	b149      	cbz	r1, 8007010 <__ascii_wctomb+0x16>
 8006ffc:	2aff      	cmp	r2, #255	; 0xff
 8006ffe:	bf8b      	itete	hi
 8007000:	238a      	movhi	r3, #138	; 0x8a
 8007002:	700a      	strbls	r2, [r1, #0]
 8007004:	6003      	strhi	r3, [r0, #0]
 8007006:	2001      	movls	r0, #1
 8007008:	bf88      	it	hi
 800700a:	f04f 30ff 	movhi.w	r0, #4294967295
 800700e:	4770      	bx	lr
 8007010:	4608      	mov	r0, r1
 8007012:	4770      	bx	lr

08007014 <_malloc_usable_size_r>:
 8007014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007018:	1f18      	subs	r0, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfbc      	itt	lt
 800701e:	580b      	ldrlt	r3, [r1, r0]
 8007020:	18c0      	addlt	r0, r0, r3
 8007022:	4770      	bx	lr

08007024 <_init>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	bf00      	nop
 8007028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702a:	bc08      	pop	{r3}
 800702c:	469e      	mov	lr, r3
 800702e:	4770      	bx	lr

08007030 <_fini>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	bf00      	nop
 8007034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007036:	bc08      	pop	{r3}
 8007038:	469e      	mov	lr, r3
 800703a:	4770      	bx	lr
